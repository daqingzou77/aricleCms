/**
 *  具有隐私保护的外包文件多关键词检索方法及系统
 * 
 */
// S01 选取安全参数分别为 224、512、128、128、sha3_224  512位的p=10081893753823695138149316107789037327481944265600170118928981468803352047754571544337063842192305679347886663146572724265944013454410927085800342779011171
const sha3_224 = require('js-sha3').sha3_224;

// S02  密钥k = 223609695509363593256321074697001953899 关键词词典D [guan, jian, ci, ci, dian] n=5

// S03 文件索引向量 [ni, jian, hao, da, bu, dian, na, hao] N=7 => 文件索引向量值为[0, 1, 0, 0, 1, 0, 0] 
// 文件名为 N = 'sousuo'  文件大小 d = 1224 哈希值为 33633d8a5b4582337aa1a2a6708460bf0890dfadafe7cdc6e2933d44
// console.log(sha3_224('sousuo1224')); // 33633d8a5b4582337aa1a2a6708460bf0890dfadafe7cdc6e2933d44
// 将哈希值转化位十进制 
// console.log('hex', (sha3_224('sousuo1224')));
// 哈希值为 5411752004588826686201117064082601148555360532212241985786225885184

// S04 当前密钥 k = 223609695509363593256321074697001953899
// 文件索引向量 [0, 1, 0, 0, 1, 0, 0]  选取随机数 a = 208101110173487066196720498995073125329 
// k = 223609695509363593256321074697001953899 得到密文索引向量
const bigInt = require('big-integer');
console.log(bigInt(parseInt(sha3_224('sousuo1224'), 16)).toString());
// 哈希值为 5411752004588826686201117064082601148555360532212241985786225885184
/// --- 当 i = 0 时
// const vlaue = bigInt(223609695509363593256321074697001953899).multiply(208101110173487066196720498995073125329).mod(10081893753823695138149316107789037327481944265600170118928981468803352047754571544337063842192305679347886663146572724265944013454410927085800342779011171).toString();
// console.log(vlaue); //4682707058588747707657905676282136029825876153819399412612005342738458581275107574005861382580224670040064
// 求得余数位 
/// --- 当 i = 1 时
const value1 = bigInt(5411752004588826686201117064082601148555360532212241985786225885184).add(208101110173487066196720498995073125329).multiply(223609695509363593256321074697001953899).mod(10081893753823695138149316107789037327481944265600170118928981468803352047754571544337063842192305679347886663146572724265944013454410927085800342779011171);
console.log(value1.toString()); // 1210120217918295557805738025022914804629825370553736122661208545585445239083101931009398603005076724252672
// 文件索引向量为 [0, 1, 0, 0, 1, 0, 0]  则密文索引向量为 
// I^ [4682707058588747707657905676282136029825876153819399412612005342738458581275107574005861382580224670040064, 1210120217918295557805738025022914804629825370553736122661208545585445239083101931009398603005076724252672, 4682707058588747707657905676282136029825876153819399412612005342738458581275107574005861382580224670040064, 4682707058588747707657905676282136029825876153819399412612005342738458581275107574005861382580224670040064, 1210120217918295557805738025022914804629825370553736122661208545585445239083101931009398603005076724252672, 4682707058588747707657905676282136029825876153819399412612005342738458581275107574005861382580224670040064, 4682707058588747707657905676282136029825876153819399412612005342738458581275107574005861382580224670040064]

4682707058588747707657905676282136029825876153819399412612005342738458581275107574005861382580224670040064
// S05 查询关键字生成查询向量[1, 1, 0, 1, 0, 0, 0]

// S06 查询向量加密得到密文检索陷门
// 随机选取一个224位的随机数m=21565252044977975668299398246638719312520418980487879022988949985151
// 选取一个128位的随机数c=237427297345362726659010295097170235251 计算密文检索陷门
// p=10081893753823695138149316107789037327481944265600170118928981468803352047754571544337063842192305679347886663146572724265944013454410927085800342779011171
/// --- 当Q=0时
const value2 = bigInt(237427297345362726659010295097170235251).divide(223609695509363593256321074697001953899).mod(10081893753823695138149316107789037327481944265600170118928981468803352047754571544337063842192305679347886663146572724265944013454410927085800342779011171).toString();
console.log('value2', value2); // 结果位 1
/// --- 当Q!=0时
const value3 = bigInt(21565252044977975668299398246638719312520418980487879022988949985151).add(237427297345362726659010295097170235251).divide(223609695509363593256321074697001953899).mod(10081893753823695138149316107789037327481944265600170118928981468803352047754571544337063842192305679347886663146572724265944013454410927085800342779011171).toString();
console.log('value3', value3); // 96441489246940712670618749990
// 查询向量 [1, 1, 0, 1, 0, 0, 0]
// 密文检索陷门 Q* [96441489246940712670618749990, 96441489246940712670618749990, 1, 96441489246940712670618749990, 1, 1, 1];

// S07 预设阈值位 3

// S08 计算密文检索陷门和密文索引向量的相似度阈值
// 1. 计算第三中间数值p
// 密文索引向量 [4682707058588747707657905676282136029825876153819399412612005342738458581275107574005861382580224670040064, 1210120217918295557805738025022914804629825370553736122661208545585445239083101931009398603005076724252672, 4682707058588747707657905676282136029825876153819399412612005342738458581275107574005861382580224670040064, 4682707058588747707657905676282136029825876153819399412612005342738458581275107574005861382580224670040064, 1210120217918295557805738025022914804629825370553736122661208545585445239083101931009398603005076724252672, 4682707058588747707657905676282136029825876153819399412612005342738458581275107574005861382580224670040064, 4682707058588747707657905676282136029825876153819399412612005342738458581275107574005861382580224670040064]
// 密文检索陷门 [96441489246940712670618749990, 96441489246940712670618749990, 1, 96441489246940712670618749990, 1, 1, 1];
const p1 = bigInt(96441489246940712670618749990).multiply(4682707058588747707657905676282136029825876153819399412612005342738458581275107574005861382580224670040064)
const p2 = bigInt(1210120217918295557805738025022914804629825370553736122661208545585445239083101931009398603005076724252672).multiply(96441489246940712670618749990);
const p3 = bigInt(4682707058588747707657905676282136029825876153819399412612005342738458581275107574005861382580224670040064);
const p4 = bigInt(4682707058588747707657905676282136029825876153819399412612005342738458581275107574005861382580224670040064).multiply(96441489246940712670618749990)
const p5 = bigInt(1210120217918295557805738025022914804629825370553736122661208545585445239083101931009398603005076724252672);
const p6 = bigInt(4682707058588747707657905676282136029825876153819399412612005342738458581275107574005861382580224670040064);
const p7 = bigInt(4682707058588747707657905676282136029825876153819399412612005342738458581275107574005861382580224670040064);
// console.log('total p', p1.add(p2).add(p3).add(p4).add(p5).add(p6).add(p7).toString());
const totalP = p1.add(p2).add(p3).add(p4).add(p5).add(p6).add(p7);
console.log('totalp', totalP.mod(10081893753823695138149316107789037327481944265600170118928981468803352047754571544337063842192305679347886663146572724265944013454410927085800342779011171).toString())
// 第三中间数p为 1019920280858793013261188301426029718924068137784800375038697867995462251731923528529042693212617598224652362526989638646087583405178880
1019920280858793013261188301426029718924068137784800375038697867995462251731923528529042693212617598224652362526989638646087583405178880

// 2. 计算第一中间数值E
// m = 21565252044977975668299398246638719312520418980487879022988949985151, 
// 哈希 = 5411752004588826686201117064082601148555360532212241985786225885184
const E = bigInt(21565252044977975668299398246638719312520418980487879022988949985151).multiply(5411752004588826686201117064082601148555360532212241985786225885184);
console.log('E', E.toString()); // E 116705795983872852966739318620464849488751781425479220042042036579262627539917575161191233328509232882745802316985862762395259478474752
// 3. 计算第二中间数值G
const G1 = bigInt(1019920280858793013261188301426029718924068137784800375038697867995462251731923528529042693212617598224652362526989638646087583405178880).mod(116705795983872852966739318620464849488751781425479220042042036579262627539917575161191233328509232882745802316985862762395259478474752);
const G = bigInt(1019920280858793013261188301426029718924068137784800375038697867995462251731923528529042693212617598224652362526989638646087583405178880).minus(G1);
console.log('G的值为', G.toString()) // 933646367870982882090733294359224936251836713958929948651199189831078026907390698217257956075830665594210181096425990007068378735312896
// 4. 文件索引向量I* [0, 1, 0, 0, 1, 0, 0 ]和查询向量Q [1, 1, 0, 1, 0, 0, 0] 的内积
console.log('G/E', bigInt(G).divide(E))
const result = 1


