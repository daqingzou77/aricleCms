var $jscomp = $jscomp || {};
$jscomp.scope = {};
$jscomp.findInternal = function(d, f, h) {
  d instanceof String && (d = String(d));
  for (var k = d.length, q = 0; q < k; q++) {
    var w = d[q];
    if (f.call(h, w, q, d)) return { i: q, v: w };
  }
  return { i: -1, v: void 0 };
};
$jscomp.ASSUME_ES5 = !1;
$jscomp.ASSUME_NO_NATIVE_MAP = !1;
$jscomp.ASSUME_NO_NATIVE_SET = !1;
$jscomp.defineProperty =
  $jscomp.ASSUME_ES5 || 'function' == typeof Object.defineProperties
    ? Object.defineProperty
    : function(d, f, h) {
        d != Array.prototype && d != Object.prototype && (d[f] = h.value);
      };
$jscomp.getGlobal = function(d) {
  return 'undefined' != typeof window && window === d
    ? d
    : 'undefined' != typeof global && null != global
    ? global
    : d;
};
$jscomp.global = $jscomp.getGlobal(this);
$jscomp.polyfill = function(d, f, h, k) {
  if (f) {
    h = $jscomp.global;
    d = d.split('.');
    for (k = 0; k < d.length - 1; k++) {
      var q = d[k];
      q in h || (h[q] = {});
      h = h[q];
    }
    d = d[d.length - 1];
    k = h[d];
    f = f(k);
    f != k &&
      null != f &&
      $jscomp.defineProperty(h, d, { configurable: !0, writable: !0, value: f });
  }
};
$jscomp.polyfill(
  'Array.prototype.find',
  function(d) {
    return d
      ? d
      : function(d, h) {
          return $jscomp.findInternal(this, d, h).v;
        };
  },
  'es6',
  'es3'
);
$jscomp.polyfill(
  'Array.prototype.fill',
  function(d) {
    return d
      ? d
      : function(d, h, k) {
          var f = this.length || 0;
          0 > h && (h = Math.max(0, f + h));
          if (null == k || k > f) k = f;
          k = Number(k);
          0 > k && (k = Math.max(0, f + k));
          for (h = Number(h || 0); h < k; h++) this[h] = d;
          return this;
        };
  },
  'es6',
  'es3'
);
$jscomp.checkStringArgs = function(d, f, h) {
  if (null == d)
    throw new TypeError(
      "The 'this' value for String.prototype." + h + ' must not be null or undefined'
    );
  if (f instanceof RegExp)
    throw new TypeError(
      'First argument to String.prototype.' + h + ' must not be a regular expression'
    );
  return d + '';
};
$jscomp.polyfill(
  'String.prototype.codePointAt',
  function(d) {
    return d
      ? d
      : function(d) {
          var f = $jscomp.checkStringArgs(this, null, 'codePointAt'),
            k = f.length;
          d = Number(d) || 0;
          if (0 <= d && d < k) {
            d |= 0;
            var q = f.charCodeAt(d);
            if (55296 > q || 56319 < q || d + 1 === k) return q;
            d = f.charCodeAt(d + 1);
            return 56320 > d || 57343 < d ? q : 1024 * (q - 55296) + d + 9216;
          }
        };
  },
  'es6',
  'es3'
);
$jscomp.SYMBOL_PREFIX = 'jscomp_symbol_';
$jscomp.initSymbol = function() {
  $jscomp.initSymbol = function() {};
  $jscomp.global.Symbol || ($jscomp.global.Symbol = $jscomp.Symbol);
};
$jscomp.Symbol = (function() {
  var d = 0;
  return function(f) {
    return $jscomp.SYMBOL_PREFIX + (f || '') + d++;
  };
})();
$jscomp.initSymbolIterator = function() {
  $jscomp.initSymbol();
  var d = $jscomp.global.Symbol.iterator;
  d || (d = $jscomp.global.Symbol.iterator = $jscomp.global.Symbol('iterator'));
  'function' != typeof Array.prototype[d] &&
    $jscomp.defineProperty(Array.prototype, d, {
      configurable: !0,
      writable: !0,
      value: function() {
        return $jscomp.arrayIterator(this);
      },
    });
  $jscomp.initSymbolIterator = function() {};
};
$jscomp.arrayIterator = function(d) {
  var f = 0;
  return $jscomp.iteratorPrototype(function() {
    return f < d.length ? { done: !1, value: d[f++] } : { done: !0 };
  });
};
$jscomp.iteratorPrototype = function(d) {
  $jscomp.initSymbolIterator();
  d = { next: d };
  d[$jscomp.global.Symbol.iterator] = function() {
    return this;
  };
  return d;
};
$jscomp.iteratorFromArray = function(d, f) {
  $jscomp.initSymbolIterator();
  d instanceof String && (d += '');
  var h = 0,
    k = {
      next: function() {
        if (h < d.length) {
          var q = h++;
          return { value: f(q, d[q]), done: !1 };
        }
        k.next = function() {
          return { done: !0, value: void 0 };
        };
        return k.next();
      },
    };
  k[Symbol.iterator] = function() {
    return k;
  };
  return k;
};
$jscomp.polyfill(
  'Array.prototype.keys',
  function(d) {
    return d
      ? d
      : function() {
          return $jscomp.iteratorFromArray(this, function(d) {
            return d;
          });
        };
  },
  'es6',
  'es3'
);
$jscomp.polyfill(
  'Math.sign',
  function(d) {
    return d
      ? d
      : function(d) {
          d = Number(d);
          return 0 === d || isNaN(d) ? d : 0 < d ? 1 : -1;
        };
  },
  'es6',
  'es3'
);
$jscomp.polyfill(
  'Math.trunc',
  function(d) {
    return d
      ? d
      : function(d) {
          d = Number(d);
          if (isNaN(d) || Infinity === d || -Infinity === d || 0 === d) return d;
          var f = Math.floor(Math.abs(d));
          return 0 > d ? -f : f;
        };
  },
  'es6',
  'es3'
);
$jscomp.polyfill(
  'Array.from',
  function(d) {
    return d
      ? d
      : function(d, h, k) {
          $jscomp.initSymbolIterator();
          h =
            null != h
              ? h
              : function(d) {
                  return d;
                };
          var f = [],
            w = d[Symbol.iterator];
          if ('function' == typeof w) {
            d = w.call(d);
            for (var v = 0; !(w = d.next()).done; ) f.push(h.call(k, w.value, v++));
          } else for (w = d.length, v = 0; v < w; v++) f.push(h.call(k, d[v], v));
          return f;
        };
  },
  'es6',
  'es3'
);
function tab2plot() {
  $('#tab_attr').addClass('disabled');
  $('#tab_latlng').addClass('disabled');
  $('#tab_plot').click();
}
$(function() {
  $(window).resize(refHeight);
  refHeight();
  $('.mp_icon_close').click(function() {
    $(this)
      .parent()
      .parent('.mp_box')
      .hide();
  });
  $('.mp_tab_tit li').click(function() {
    if ($(this).hasClass('cur') || $(this).hasClass('disabled')) return !1;
    var d = $(this),
      f = d.index();
    d.addClass('cur')
      .siblings('li')
      .removeClass('cur');
    d.parent()
      .siblings('.mp_tab_con')
      .children()
      .eq(f)
      .addClass('cur')
      .siblings()
      .removeClass('cur');
    d = $(this).attr('id');
    'tab_plot' != d && (last_attr_tab = d);
  });
  $('.open').click(changeOpenShowHide);
});
var last_attr_tab = 'tab_attr';
function tab2attr() {
  $('#tab_attr').removeClass('disabled');
  $('#tab_latlng').removeClass('disabled');
  $('#tab_plot').hasClass('cur') && $('#' + last_attr_tab).click();
}
function changeOpenShowHide() {
  var d = $(this).siblings(),
    f = $(this).children('.tree_icon');
  d.toggle();
  d.is(':hidden') ? f.html('+') : f.html('-');
}
function refHeight() {
  $('.mp_tab_card').height($('.mp_box').height() - $('.mp_head').height() - 1);
  $('.mp_tree').height($('.mp_tab_card').height() - 32);
  $('.mp_mark').height($('.mp_tab_card').height() - 80);
}
!(function(d) {
  var f = { select: 'mp_select', select_text: 'mp_select_text', select_ul: 'mp_select_ul' };
  d.fn.extend({
    select: function(h) {
      var k = d.extend({}, f, h);
      return this.each(function() {
        var f = d(this);
        void 0 !== f.data('value') && '' !== f.data('value') && f.val(f.data('value'));
        var h = [];
        h.push('<div class="' + f.attr('class') + '">');
        h.push('<div class="' + k.select_text + '">' + f.find(':selected').text() + '</div>');
        h.push('<ul class="' + k.select_ul + '">');
        f.children('option').each(function() {
          var k = d(this);
          f.data('value');
          k.val();
          h.push('<li data-value="' + k.val() + '">' + k.text() + '</li>');
        });
        h.push('</ul>');
        h.push('</div>');
        var v = d(h.join('')),
          F = v.find('.' + k.select_text),
          G = v.find('.' + k.select_ul);
        f.after(v);
        f.hide();
        v.click(function(f) {
          d(this).toggleClass('mp_selected');
          d(this)
            .find('.' + k.select_ul)
            .slideToggle()
            .end()
            .siblings('div.' + k.select)
            .find('.' + k.select_ul)
            .slideUp();
          f.stopPropagation();
        });
        d('body').click(function() {
          G.slideUp();
        });
        G.on('click', 'li', function() {
          var h = d(this),
            k = h
              .addClass('selecton')
              .siblings('li')
              .removeClass('selecton')
              .end()
              .data('value')
              .toString();
          k !== f.attr('data-value') && (F.text(h.text()), f.attr('data-value', k), f.change());
        });
      });
    },
    checkbox: function() {
      return this.each(function() {
        var f = d(this),
          k = f.siblings('input');
        1 == k.prop('disabled')
          ? f.addClass('pnui-check-disbaled')
          : 1 == k.prop('checked')
          ? f.addClass('pnui-checked')
          : f.removeClass('pnui-checked');
        f.on('click', function() {
          if (1 == k.prop('disabled')) return !1;
          f.hasClass('pnui-checked')
            ? (k.removeAttr('checked'), f.removeClass('pnui-checked'))
            : (k.attr('checked', 'checked'), f.addClass('pnui-checked'));
        });
        d('.checkall').click(function() {
          var f = d(this),
            h = f.parents('.checkallbox').find('.pnui-chkbox');
          f.toggleClass('pnui-checked');
          h.each(function() {
            d(this).toggleClass('pnui-checked');
          });
          f.hasClass('pnui-checked')
            ? (h.siblings('input').attr('checked', 'checked'), h.addClass('pnui-checked'))
            : (h.siblings('input').removeAttr('checked'), h.removeClass('pnui-checked'));
        });
      });
    },
    radio: function() {
      return this.each(function() {
        var f = d(this);
        1 == f.children('input').prop('disabled')
          ? f
              .children('.pnui-rdobox')
              .removeClass()
              .addClass('pnui-rdobox pnui-radio-disbaled')
          : 1 == f.children('input').prop('checked')
          ? (f
              .siblings()
              .children('input')
              .removeAttr('checked'),
            f
              .siblings()
              .children('.pnui-rdobox')
              .removeClass('pnui-checked'),
            f.children('.pnui-rdobox').addClass('pnui-checked'))
          : (f
              .siblings()
              .children('input')
              .prop('checked', 'checked'),
            f
              .siblings()
              .children('.pnui-rdobox')
              .addClass('pnui-checked'),
            f.children('.pnui-rdobox').removeClass('pnui-checked'));
        f.on('click', function() {
          var f = d(this);
          if (1 == f.children('input').prop('disabled')) return !1;
          1 == f.children('input').prop('checked')
            ? (f
                .siblings()
                .children('input')
                .prop('checked', 'checked'),
              f
                .siblings()
                .children('.pnui-rdobox')
                .addClass('pnui-checked'),
              f.children('input').removeAttr('checked'),
              f.children('.pnui-rdobox').removeClass('pnui-checked'))
            : (f
                .siblings()
                .children('input')
                .removeAttr('checked'),
              f
                .siblings()
                .children('.pnui-rdobox')
                .removeClass('pnui-checked'),
              f.children('input').prop('checked', 'checked'),
              f.children('.pnui-rdobox').addClass('pnui-checked'));
        });
      });
    },
    progress: function(f) {
      return this.each(function() {
        var h = d(this),
          q = [];
        q.push('<div class="puiprogress">');
        q.push('<div class="puiprogress_bg">');
        q.push('<div class="puiprogress_bar"></div>');
        q.push('</div>');
        q.push('<div class="puiprogress_btn"></div>');
        q.push('<div class="puiprogress_text">' + h.val() + '%</div>');
        q.push('</div>');
        q = d(q.join(''));
        var w = q.find('.puiprogress_bg'),
          v = q.find('.puiprogress_btn'),
          F = q.find('.puiprogress_bar'),
          G = q.find('.puiprogress_text');
        h.after(q);
        h.hide();
        var I = !1,
          J = 0,
          K = 0,
          ma = 0;
        q.css('width', f);
        var N = Number(h.val());
        K = (f * N) / 100;
        v.css('left', K);
        F.width(K);
        G.html(parseInt(N) + '%');
        v.mousedown(function(d) {
          J = d.pageX - K;
          I = !0;
        });
        d(document).mouseup(function() {
          I = !1;
        });
        q.mousemove(function(d) {
          I &&
            (0 >= (K = d.pageX - J) ? (K = 0) : f < K && (K = f),
            v.css('left', K),
            F.width(K),
            (d = parseInt((K / f) * 100)),
            G.html(d + '%'),
            h.val(d),
            h.change());
        });
        w.click(function(d) {
          I ||
            ((ma = w.offset().left),
            0 >= (K = d.pageX - ma) ? (K = 0) : f < K && (K = f),
            v.css('left', K),
            F.animate({ width: K }, f),
            (d = parseInt((K / f) * 100)),
            G.html(d + '%'),
            h.val(d),
            h.change());
        });
      });
    },
  });
})(jQuery);
var Z = {
    label: {
      edittype: 'label',
      name: '\u6587\u5b57',
      style: {
        text: '\u6587\u5b57',
        color: '#ffffff',
        opacity: 1,
        font_family: '\u6977\u4f53',
        font_size: 30,
        border: !0,
        border_color: '#000000',
        border_width: 3,
        background: !1,
        background_color: '#000000',
        background_opacity: 0.5,
        font_weight: 'normal',
        font_style: 'normal',
        scaleByDistance: !1,
        scaleByDistance_far: 1e6,
        scaleByDistance_farValue: 0.1,
        scaleByDistance_near: 1e3,
        scaleByDistance_nearValue: 1,
        distanceDisplayCondition: !1,
        distanceDisplayCondition_far: 1e4,
        distanceDisplayCondition_near: 0,
      },
      attr: { id: '', name: '', remark: '' },
    },
    point: {
      edittype: 'point',
      name: '\u70b9\u519b\u6807',
      style: {
        symbolSize: 0.2,
        pixelSize: 0.2,
        textx: 0.2,
        texty: 0.2,
        textcolor: '#ff0000',
        font_size: 30,
        color: '#ff0000',
        opacity: 1,
        outline: !0,
        outlineColor: '#ffffff',
        outlineOpacity: 1,
        outlineWidth: 2,
        scaleByDistance: !1,
        scaleByDistance_far: 1e6,
        scaleByDistance_farValue: 0.1,
        scaleByDistance_near: 1e3,
        scaleByDistance_nearValue: 1,
        distanceDisplayCondition: !1,
        distanceDisplayCondition_far: 1e4,
        distanceDisplayCondition_near: 0,
      },
      attr: { id: '', name: '', remark: '' },
    },
    imagepoint: {
      edittype: 'imagepoint',
      name: '\u56fe\u6807\u70b9\u6807\u8bb0',
      style: {
        image: '',
        opacity: 1,
        scale: 1,
        rotation: 0,
        scaleByDistance: !1,
        scaleByDistance_far: 1e6,
        scaleByDistance_farValue: 0.1,
        scaleByDistance_near: 1e3,
        scaleByDistance_nearValue: 1,
        distanceDisplayCondition: !1,
        distanceDisplayCondition_far: 1e4,
        distanceDisplayCondition_near: 0,
      },
      attr: { id: '', name: '', remark: '' },
    },
    model: {
      edittype: 'model',
      name: '\u6a21\u578b',
      style: {
        modelUrl: '',
        scale: 1,
        heading: 0,
        pitch: 0,
        roll: 0,
        fill: !1,
        color: '#3388ff',
        opacity: 1,
        silhouette: !1,
        silhouetteColor: '#ffffff',
        silhouetteSize: 2,
        silhouetteAlpha: 0.8,
      },
      attr: { id: '', name: '', remark: '' },
    },
    polyline: {
      edittype: 'polyline',
      name: '\u7ebf',
      position: { minCount: 2 },
      style: {
        lineType: 'solid',
        color: '#3388ff',
        width: 4,
        clampToGround: !1,
        outline: !1,
        outlineColor: '#ffffff',
        outlineWidth: 2,
        opacity: 1,
      },
      attr: { id: '', name: '', remark: '' },
    },
    polylineVolume: {
      edittype: 'polylineVolume',
      name: '\u7ba1\u9053\u7ebf',
      position: { height: !0, minCount: 2 },
      style: {
        color: '#00FF00',
        radius: 10,
        shape: 'pipeline',
        outline: !1,
        outlineColor: '#ffffff',
        opacity: 1,
      },
      attr: { id: '', name: '', remark: '' },
    },
    polygon: {
      edittype: 'polygon',
      name: '\u9762',
      position: { height: !0, minCount: 3 },
      style: {
        color: '#3388ff',
        opacity: 0.6,
        outline: !0,
        outlineColor: '#ffffff',
        outlineOpacity: 1,
        clampToGround: !1,
      },
      attr: { id: '', name: '', remark: '' },
    },
    polygon_clampToGround: {
      edittype: 'polygon_clampToGround',
      name: '\u8d34\u5730\u9762',
      position: { height: !1, minCount: 3 },
      style: {
        color: '#ffff00',
        opacity: 0.6,
        outline: !0,
        outlineColor: '#ffffff',
        outlineOpacity: 1,
        clampToGround: !0,
      },
      attr: { id: '', name: '', remark: '' },
    },
    extrudedPolygon: {
      edittype: 'extrudedPolygon',
      name: '\u62c9\u4f38\u9762',
      position: { height: !0, minCount: 3 },
      style: {
        color: '#00FF00',
        opacity: 0.6,
        outline: !0,
        outlineColor: '#ffffff',
        outlineOpacity: 1,
        extrudedHeight: 100,
        perPositionHeight: !0,
      },
      attr: { id: '', name: '', remark: '' },
    },
    rectangle: {
      edittype: 'rectangle',
      name: '\u77e9\u5f62',
      position: { height: !1, minCount: 2, maxCount: 2 },
      style: { height: 0, color: '#3388ff', rotation: 0, opacity: 0.6, clampToGround: !1 },
      attr: { id: '', name: '', remark: '' },
    },
    rectangle_clampToGround: {
      edittype: 'rectangle_clampToGround',
      name: '\u8d34\u5730\u77e9\u5f62',
      position: { height: !1, minCount: 2, maxCount: 2 },
      style: { color: '#ffff00', rotation: 0, opacity: 0.6, clampToGround: !0 },
      attr: { id: '', name: '', remark: '' },
    },
    rectangleImg: {
      edittype: 'rectangleImg',
      name: '\u8d34\u5730\u56fe\u7247',
      position: { height: !1, minCount: 2, maxCount: 2 },
      style: { image: '', rotation: 0, opacity: 1, clampToGround: !0 },
      attr: { id: '', name: '', remark: '' },
    },
    extrudedRectangle: {
      edittype: 'extrudedRectangle',
      name: '\u62c9\u4f38\u77e9\u5f62',
      position: { height: !1, minCount: 2, maxCount: 2 },
      style: {
        color: '#00FF00',
        outline: !0,
        outlineColor: '#ffffff',
        rotation: 0,
        opacity: 0.6,
        extrudedHeight: 40,
        height: 0,
      },
      attr: { id: '', name: '', remark: '' },
    },
    ellipse: {
      edittype: 'ellipse',
      name: '\u692d\u5706',
      position: { height: !1 },
      style: {
        semiMinorAxis: 500,
        semiMajorAxis: 500,
        height: 0,
        opacity: 0.6,
        fill: !0,
        color: '#3388ff',
        outline: !0,
        outlineColor: '#ffffff',
        rotation: 0,
        clampToGround: !1,
      },
      attr: { id: '', name: '', remark: '' },
    },
    ellipse_clampToGround: {
      edittype: 'ellipse_clampToGround',
      name: '\u692d\u5706',
      position: { height: !1 },
      style: {
        semiMinorAxis: 500,
        semiMajorAxis: 500,
        opacity: 0.6,
        fill: !0,
        color: '#ffff00',
        outline: !0,
        outlineColor: '#ffffff',
        rotation: 0,
        clampToGround: !0,
      },
      attr: { id: '', name: '', remark: '' },
    },
    extrudedEllipse: {
      edittype: 'extrudedEllipse',
      name: '\u5706\u67f1\u4f53',
      position: { height: !1 },
      style: {
        semiMinorAxis: 100,
        semiMajorAxis: 100,
        opacity: 0.6,
        fill: !0,
        color: '#00FF00',
        outline: !0,
        outlineColor: '#ffffff',
        extrudedHeight: 100,
        height: 0,
        rotation: 0,
      },
      attr: { id: '', name: '', remark: '' },
    },
    ellipsoid: {
      edittype: 'ellipsoid',
      name: '\u7403\u4f53',
      style: {
        extentRadii: 100,
        widthRadii: 100,
        heightRadii: 100,
        color: '#00FF00',
        outline: !0,
        outlineColor: '#ffffff',
        fill: !0,
        opacity: 0.6,
      },
      attr: { id: '', name: '', remark: '' },
    },
    wall: {
      edittype: 'wall',
      name: '\u5899\u4f53',
      position: { height: !0, minCount: 2 },
      style: {
        color: '#00FF00',
        outline: !0,
        outlineColor: '#ffffff',
        opacity: 0.6,
        extrudedHeight: 40,
      },
      attr: { id: '', name: '', remark: '' },
    },
  },
  thisWidget = parent.g_helpob,
  g_symidnames = '\u5e38\u7528\u7ebf\u9762 \u5355\u4f4d\u4e0e\u4eba\u5458-\u519b\u8b66\u5175\u79cd\u3001\u4e13\u4e1a\u5175/\u6307\u6325\u673a\u6784/\u7ea7\u522b\u4e0e\u4eba\u5458 \u88c5\u5907\u4e0e\u8bbe\u65bd-\u8f7b\u6b66\u5668\u4e0e\u9632\u7206\u88c5\u5907/\u706b\u70ae\u4e0e\u793c\u70ae/\u5bfc\u5f39 \u88c5\u5907\u4e0e\u8bbe\u65bd-\u6267\u52e4\u3001\u5904\u7a81\u4f5c\u6218\u8f66\u8f86\u4e0e\u6307\u6325\u8f66\u8f86/\u8230\u3001\u8247\u3001\u8239 \u88c5\u5907\u4e0e\u8bbe\u65bd-\u822a\u7a7a\u5668/\u822a\u5929\u5668 \u88c5\u5907\u4e0e\u8bbe\u65bd-\u6267\u52e4\u88c5\u5907\u4e0e\u8bbe\u65bd/\u4fa6\u5bdf\u60c5\u62a5\u88c5\u5907\u4e0e\u8bbe\u65bd/\u673a\u8981\u88c5\u5907\u4e0e\u8bbe\u65bd \u88c5\u5907\u4e0e\u8bbe\u65bd-\u901a\u4fe1\u3001\u6307\u6325\u4fe1\u606f\u7cfb\u7edf\u88c5\u5907\u4e0e\u8bbe\u65bd \u88c5\u5907\u4e0e\u8bbe\u65bd-\u96f7\u8fbe/\u6c34\u58f0\u3001\u58f0\u6d4b\u88c5\u5907\u4e0e\u8bbe\u65bd/\u7535\u5b50\u5bf9\u6297\u3001\u7f51\u7edc\u6218\u88c5\u5907\u4e0e\u8bbe\u65bd \u88c5\u5907\u4e0e\u8bbe\u65bd-\u5de5\u7a0b\u88c5\u5907\u4e0e\u8bbe\u65bd \u88c5\u5907\u4e0e\u8bbe\u65bd-\u9632\u5316\u88c5\u5907\u4e0e\u8bbe\u65bd/\u6d4b\u7ed8\u5bfc\u822a\u3001\u6c14\u8c61\u6c34\u6587\u88c5\u5907\u4e0e\u8bbe\u65bd/\u540e\u52e4\u88c5\u5907\u4e0e\u8bbe\u65bd/\u8206\u8bba\u6218\u3001\u5fc3\u7406\u6218\u3001\u6cd5\u5f8b\u6218\u88c5\u5907\u4e0e\u8bbe\u65bd \u6267\u52e4\u90e8\u7f72\u4e0e\u884c\u52a8-\u6267\u52e4\u76ee\u6807\uff08\u5bf9\u8c61\uff09/\u6267\u52e4\u90e8\u7f72/\u6267\u52e4\u884c\u52a8 \u5904\u7f6e\uff08\u4f5c\u6218\uff09\u90e8\u7f72\u4e0e\u884c\u52a8-\u5904\u7a81\u3001\u53cd\u6050\u6016\u884c\u52a8\u5bf9\u8c61/\u5904\u7f6e\uff08\u4f5c\u6218\uff09\u90e8\u7f72/\u5904\u7f6e\uff08\u4f5c\u6218\uff09\u884c\u52a8 \u62a2\u9669\u6551\u707e\u90e8\u7f72\u4e0e\u884c\u52a8-\u62a2\u6551\u6551\u707e\u884c\u52a8\u5bf9\u8c61/\u62a2\u6551\u6551\u707e\u90e8\u7f72/\u62a2\u9669\u6551\u707e\u884c\u52a8 \u540e\u52e4\u3001\u88c5\u5907\u4fdd\u969c\u90e8\u7f72\u4e0e\u884c\u52a8-\u540e\u52e4\u3001\u88c5\u5907\u4fdd\u969c\u90e8\u7f72 \u8206\u8bba\u6218\u3001\u5fc3\u7406\u6218\u3001\u6cd5\u5f8b\u6218\u90e8\u7f72\u4e0e\u884c\u52a8-\u8206\u8bba\u6218\u3001\u5fc3\u7406\u6218\u3001\u6cd5\u5f8b\u6218\u90e8\u7f72/\u8206\u8bba\u6218\u3001\u5fc3\u7406\u6218\u3001\u6cd5\u5f8b\u6218\u884c\u52a8 \u6d77\u519b\u3001\u7a7a\u519b\u3001\u7b2c\u4e8c\u70ae\u5175\u3001\u822a\u5929\u529b\u91cf\u90e8\u7f72\u4e0e\u884c\u52a8-\u6d77\u519b\u90e8\u7f72\u4e0e\u884c\u52a8/\u7a7a\u519b\u90e8\u7f72\u4e0e\u884c\u52a8/\u7b2c\u4e8c\u70ae\u5175\u90e8\u7f72\u4e0e\u884c\u52a8/\u822a\u5929\u529b\u91cf\u90e8\u7f72\u4e0e\u884c\u52a8/\u6d77\u519b\u90e8\u7f72\u4e0e\u884c\u52a8\uff08\u7ebf\uff09 \u4eba\u6c11\u9632\u7a7a\u90e8\u7f72\u4e0e\u884c\u52a8 \u5904\u7f6e\uff08\u4f5c\u6218\uff09\u90e8\u7f72\u4e0e\u884c\u52a8-\u884c\u519b\u3001\u8f93\u9001\u3001\u4fa6\u5bdf\u3001\u8b66\u6212/\u5904\u7f6e\uff08\u4f5c\u6218\uff09\u884c\u52a8\uff08\u7ebf\uff09/\u5904\u7a81\u3001\u53cd\u6050\u6016\u884c\u52a8\u5bf9\u8c61\uff08\u7ebf\uff09/\u884c\u519b\u3001\u8f93\u9001\u3001\u4fa6\u5bdf\u3001\u8b66\u6212\uff08\u7ebf\uff09/\u5904\u7f6e\uff08\u4f5c\u6218\uff09\u90e8\u7f72\uff08\u7ebf\uff09 \u5e38\u7528\u90e8\uff08\u5206\uff09\u961f \u88c5\u5907\u4e0e\u8bbe\u65bd-\u6267\u52e4\u88c5\u5907\u4e0e\u8bbe\u65bd\uff08\u7ebf\uff09/\u5de5\u7a0b\u88c5\u5907\u4e0e\u8bbe\u65bd\uff08\u7ebf\uff09 \u6267\u52e4\u90e8\u7f72\u4e0e\u884c\u52a8-\u6267\u52e4\u884c\u52a8\uff08\u7ebf\uff09'.split(
    ' '
  ),
  g_symidpages = [
    [
      937,
      804,
      930,
      959,
      779,
      974,
      960,
      929,
      58,
      1184,
      935,
      831,
      430,
      834,
      742,
      845,
      812,
      1032,
      769,
      774,
      925,
    ],
    [
      1,
      2,
      3,
      4,
      5,
      6,
      8,
      7,
      9,
      1,
      11,
      12,
      12,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      12,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      52,
      55,
      58,
      53,
      54,
      56,
      57,
      59,
      60,
      61,
      62,
      63,
      64,
      65,
      66,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
    ],
    [
      76,
      77,
      78,
      79,
      80,
      81,
      82,
      83,
      84,
      85,
      86,
      87,
      88,
      90,
      91,
      92,
      93,
      94,
      95,
      96,
      97,
      98,
      99,
      100,
      101,
      102,
      104,
      105,
      108,
      109,
      110,
      103,
      106,
      107,
      112,
      113,
      114,
      115,
      116,
      117,
      118,
      119,
      120,
      121,
      122,
      123,
      124,
      125,
      126,
      127,
      128,
      129,
    ],
    [
      131,
      132,
      133,
      134,
      135,
      136,
      137,
      138,
      139,
      140,
      141,
      142,
      143,
      144,
      145,
      146,
      147,
      148,
      149,
      150,
      151,
      152,
      153,
      154,
      155,
      156,
      157,
      158,
      159,
      160,
      161,
      162,
      163,
      164,
      165,
      166,
      167,
      168,
      150,
      170,
      171,
      172,
      173,
      174,
      175,
      176,
      177,
      178,
      179,
      180,
      181,
      182,
      183,
      184,
      185,
      186,
      187,
      188,
      189,
      190,
      191,
      192,
      193,
      194,
      195,
      196,
      198,
      199,
      200,
      201,
      202,
      203,
      204,
      205,
      206,
      207,
      208,
      209,
      210,
      211,
      212,
      213,
      192,
      192,
      192,
      193,
      193,
      193,
      212,
      197,
    ],
    [
      215,
      216,
      217,
      218,
      219,
      220,
      221,
      222,
      223,
      224,
      225,
      226,
      227,
      228,
      229,
      230,
      231,
      232,
      233,
      234,
      235,
      236,
      237,
      238,
      239,
      240,
      241,
      242,
      243,
      244,
      245,
      246,
      247,
      248,
      249,
      250,
      251,
      252,
      253,
      262,
      263,
      268,
      264,
      256,
      258,
      265,
      266,
      257,
      267,
      261,
      260,
      255,
      259,
    ],
    [
      270,
      271,
      275,
      276,
      277,
      276,
      278,
      280,
      280,
      281,
      275,
      279,
      284,
      285,
      286,
      287,
      288,
      287,
      287,
      289,
      290,
      291,
      292,
      293,
      294,
      295,
      296,
      297,
      298,
      299,
      300,
      301,
      301,
      302,
      302,
      302,
      302,
      303,
      303,
      304,
      305,
      306,
      307,
      308,
      309,
      310,
      311,
      301,
      301,
      301,
      314,
      315,
      313,
    ],
    [
      366,
      381,
      343,
      384,
      351,
      361,
      358,
      320,
      350,
      373,
      382,
      333,
      317,
      318,
      330,
      375,
      376,
      377,
      381,
      356,
      383,
      372,
      371,
      370,
      378,
      334,
      336,
      332,
      325,
      319,
      368,
      369,
      344,
      384,
      322,
      384,
      346,
      342,
      337,
      338,
      321,
      352,
      340,
      374,
      357,
      326,
      339,
      355,
      381,
      328,
      360,
      362,
      386,
      359,
      324,
      327,
      384,
      354,
      329,
      349,
      380,
      335,
      341,
      348,
      347,
      345,
      363,
      331,
      379,
      344,
      353,
      323,
      367,
      365,
      364,
      385,
    ],
    [
      388,
      388,
      391,
      396,
      395,
      393,
      392,
      389,
      400,
      401,
      402,
      399,
      398,
      409,
      407,
      424,
      413,
      408,
      406,
      405,
      404,
      416,
      423,
      410,
      422,
      421,
      418,
      417,
      419,
      420,
      415,
      411,
      412,
      414,
    ],
    [
      427,
      431,
      432,
      433,
      434,
      435,
      435,
      435,
      435,
      435,
      437,
      438,
      439,
      439,
      440,
      441,
      442,
      443,
      444,
      445,
      446,
      447,
      452,
      453,
      454,
      455,
      456,
      457,
      458,
      459,
      460,
      473,
      474,
      479,
      479,
      479,
      481,
      485,
      486,
      487,
      488,
      489,
      500,
      501,
      502,
      503,
      504,
      505,
      506,
      507,
      508,
      509,
      510,
      511,
      512,
      513,
      514,
      515,
      516,
      517,
      518,
      519,
      520,
      521,
      521,
      428,
      430,
      435,
      436,
      435,
      435,
      437,
      437,
      438,
      438,
      520,
      520,
      520,
      521,
      521,
      521,
      521,
      521,
      521,
      521,
      521,
      438,
      439,
    ],
    [
      536,
      537,
      538,
      539,
      540,
      541,
      542,
      543,
      544,
      548,
      549,
      550,
      551,
      552,
      554,
      553,
      555,
      556,
      557,
      558,
      564,
      582,
      581,
      565,
      585,
      560,
      561,
      575,
      571,
      566,
      576,
      572,
      573,
      587,
      583,
      588,
      579,
      574,
      580,
      562,
      563,
      584,
      586,
      567,
      570,
      568,
      569,
      591,
      594,
      590,
      595,
      593,
      592,
      596,
    ],
    [
      751,
      751,
      752,
      605,
      625,
      618,
      622,
      599,
      612,
      640,
      625,
      604,
      621,
      634,
      633,
      625,
      621,
      625,
      625,
      598,
      599,
      643,
      643,
      642,
      635,
      611,
      609,
      610,
      636,
      612,
      643,
      618,
      625,
      612,
      599,
      601,
      608,
      622,
      612,
      625,
      637,
      643,
      641,
      638,
      638,
      612,
      625,
      622,
      664,
      645,
      645,
      645,
      672,
      645,
      669,
      671,
      666,
      659,
      674,
      659,
      672,
      645,
      645,
      668,
      645,
      645,
      645,
      663,
      670,
      645,
      667,
      674,
      645,
      645,
      659,
      645,
      661,
      645,
      665,
      662,
    ],
    [
      704,
      716,
      678,
      705,
      735,
      728,
      702,
      702,
      685,
      686,
      698,
      710,
      687,
      688,
      723,
      727,
      725,
      726,
      684,
      724,
      698,
      710,
      705,
      717,
      703,
      714,
      659,
      758,
      768,
      761,
      746,
      745,
      784,
      782,
      787,
      742,
      757,
      766,
      742,
      742,
      765,
      756,
      750,
      748,
      749,
      754,
      761,
      757,
      752,
      743,
      744,
      762,
      762,
      765,
    ],
    [
      888,
      852,
      834,
      884,
      872,
      873,
      871,
      844,
      869,
      866,
      868,
      867,
      876,
      874,
      878,
      847,
      843,
      846,
      895,
      896,
      879,
      880,
      877,
      852,
      870,
      842,
      891,
      883,
      899,
      852,
      859,
      860,
      838,
      839,
      840,
      837,
      875,
      893,
      849,
      885,
      841,
      835,
      852,
      848,
      852,
      889,
      882,
      886,
      898,
      887,
      851,
      894,
      845,
      836,
      852,
      897,
      881,
      890,
      901,
      900,
      902,
      892,
      852,
      850,
      933,
      934,
      935,
      936,
      937,
      941,
      946,
      949,
      950,
      951,
      952,
      953,
      954,
      955,
      993,
      994,
      995,
      998,
      996,
      999,
      1005,
      1006,
      1008,
      1009,
      1010,
      1011,
      1012,
      1050,
      1060,
      1061,
      1062,
      1063,
      1064,
      1065,
      1066,
      1067,
      1068,
      1069,
      1072,
      1070,
      1070,
    ],
    [
      1073,
      1074,
      1075,
      1076,
      1077,
      1078,
      1079,
      1080,
      1081,
      1082,
      1083,
      1084,
      1085,
      1086,
      1087,
      1090,
      1089,
      1091,
      1092,
      1094,
      1082,
      1082,
      1085,
    ],
    [
      1121,
      1122,
      1129,
      1128,
      1131,
      1149,
      1150,
      1151,
      1150,
      1153,
      1154,
      1155,
      1156,
      1157,
      1158,
      1159,
      1160,
      1161,
      1162,
      1163,
      1164,
      1165,
      1166,
      1167,
      1168,
      1169,
      1170,
      1171,
      1172,
      1173,
      1174,
      1175,
      1176,
      1177,
      1178,
      1179,
      1179,
      1181,
      1182,
      1183,
      1184,
      1185,
      1186,
      1187,
    ],
    [
      1213,
      1217,
      1205,
      1208,
      1222,
      1218,
      1211,
      1210,
      1212,
      1216,
      1220,
      1221,
      1206,
      1215,
      1214,
      1203,
      1209,
      1204,
      1207,
      1219,
      1230,
      1229,
      1227,
      1226,
      1250,
      1247,
      1244,
      1233,
      1232,
      1249,
      1237,
      1239,
      1252,
      1253,
      1251,
      1248,
      1236,
      1235,
      1234,
      1245,
      1246,
      1256,
      1238,
      1294,
      1270,
      1274,
      1280,
      1277,
      1287,
      1292,
      1285,
      1281,
      1295,
      1293,
      1282,
      1297,
      1298,
      1290,
      1273,
      1269,
      1278,
      1268,
      1279,
      1276,
      1271,
      1296,
      1286,
      1283,
      1284,
      865,
      861,
      910,
    ],
    [1313, 1314, 1315, 1316, 1319, 1317, 1318, 1308, 1310, 1309, 1311, 1312],
    [
      1329,
      1323,
      1324,
      1325,
      1322,
      1327,
      1326,
      1331,
      832,
      818,
      820,
      821,
      823,
      817,
      831,
      818,
      822,
      272,
      282,
      448,
      449,
      461,
      462,
      463,
      464,
      465,
      467,
      471,
      475,
      477,
      494,
      499,
      472,
      472,
      472,
      769,
      770,
      770,
      773,
      774,
      775,
      778,
      779,
      788,
    ],
    [1350, 1351, 1349, 1348, 1347, 1341, 1352, 1344, 1342, 1354, 1345, 1343, 1353, 1346],
    [
      1367,
      1371,
      1382,
      1373,
      1377,
      1377,
      1371,
      1367,
      1374,
      1371,
      1377,
      1376,
      1375,
      1373,
      1381,
      1383,
      1384,
      1385,
      1377,
      925,
      929,
      930,
      932,
      942,
      943,
      944,
      959,
      960,
      966,
      967,
      968,
      1e3,
    ],
    [804, 805, 806, 807, 808, 809, 812, 814, 814],
  ],
  g_curpageidx = 0,
  g_strJson =
    '{"label":{"name":"\u6587\u5b57","style":[{"name":"text","label":"\u5185\u5bb9","type":"textarea","defval":"\u6587\u5b57"},{"name":"color","label":"\u989c\u8272","type":"color","defval":"#ffffff"},{"name":"opacity","label":"\u900f\u660e\u5ea6","type":"slider","defval":1},{"name":"font_family","label":"\u5b57\u4f53","type":"combobox","defval":"\u6977\u4f53","data":[{"text":"\u5fae\u8f6f\u96c5\u9ed1","value":"\u5fae\u8f6f\u96c5\u9ed1"},{"text":"\u5b8b\u4f53","value":"\u5b8b\u4f53"},{"text":"\u6977\u4f53","value":"\u6977\u4f53"},{"text":"\u96b6\u4e66","value":"\u96b6\u4e66"},{"text":"\u9ed1\u4f53","value":"\u9ed1\u4f53"}]},{"name":"font_size","label":"\u5b57\u4f53\u5927\u5c0f","type":"number","defval":30},{"name":"border","label":"\u662f\u5426\u886c\u8272","type":"radio","defval":true,"impact":["border_color","border_width","border_style"]},{"name":"border_color","label":"\u886c\u8272\u989c\u8272","type":"color","defval":"#000000"},{"name":"border_width","label":"\u886c\u8272\u5bbd\u5ea6","type":"number","defval":3},{"name":"background","label":"\u662f\u5426\u80cc\u666f","type":"radio","defval":false,"impact":["background_color","background_opacity"]},{"name":"background_color","label":"\u80cc\u666f\u989c\u8272","type":"color","defval":"#000000"},{"name":"background_opacity","label":"\u80cc\u666f\u900f\u660e\u5ea6","type":"slider","defval":0.5},{"name":"font_weight","label":"\u662f\u5426\u52a0\u7c97","type":"combobox","defval":"normal","data":[{"text":"\u662f","value":"bold"},{"text":"\u5426","value":"normal"}]},{"name":"font_style","label":"\u662f\u5426\u659c\u4f53","type":"combobox","defval":"normal","data":[{"text":"\u662f","value":"italic"},{"text":"\u5426","value":"normal"}]},{"name":"scaleByDistance","label":"\u662f\u5426\u6309\u89c6\u8ddd\u7f29\u653e","type":"radio","defval":false,"impact":["scaleByDistance_far","scaleByDistance_farValue","scaleByDistance_near","scaleByDistance_nearValue"]},{"name":"scaleByDistance_far","label":"\u4e0a\u9650","type":"number","defval":1000000},{"name":"scaleByDistance_farValue","label":"\u6bd4\u4f8b\u503c","type":"number","defval":0.1},{"name":"scaleByDistance_near","label":"\u4e0b\u9650","type":"number","defval":1000},{"name":"scaleByDistance_nearValue","label":"\u6bd4\u4f8b\u503c","type":"number","defval":1},{"name":"distanceDisplayCondition","label":"\u662f\u5426\u6309\u89c6\u8ddd\u663e\u793a","type":"radio","defval":false,"impact":["distanceDisplayCondition_far","distanceDisplayCondition_near"]},{"name":"distanceDisplayCondition_far","label":"\u6700\u5927\u8ddd\u79bb","type":"number","defval":10000},{"name":"distanceDisplayCondition_near","label":"\u6700\u5c0f\u8ddd\u79bb","type":"number","defval":0}],"attr":[{"name":"id","label":"\u4e3b\u952e","type":"hidden","defval":""},{"name":"name","label":"\u540d\u79f0","type":"text","defval":""},{"name":"remark","label":"\u5907\u6ce8","type":"textarea","defval":""}]},"point":{"name":"\u70b9\u7b26\u53f7","style":[{"name":"symbolSize","label":"\u7b26\u53f7\u5927\u5c0f","type":"slider","defval":0.2},{"name":"color","label":"\u989c\u8272","type":"color","defval":"#3388ff"},{"name":"text","label":"\u5185\u5bb9","type":"textarea","defval":"\u6587\u5b57"},{"name":"textcolor","label":"\u5b57\u4f53\u989c\u8272","type":"color","defval":"#ffffff"},{"name":"font_size","label":"\u5b57\u4f53\u5927\u5c0f","type":"number","defval":30},{"name":"textx","label":"\u6587\u5b57\u4f4d\u7f6eX","type":"slider","defval":0.2},{"name":"texty","label":"\u6587\u5b57\u4f4d\u7f6eY","type":"slider","defval":0.2},{"name":"opacity","label":"\u900f\u660e\u5ea6","type":"slider","defval":1},{"name":"outline","label":"\u662f\u5426\u8fb9\u6846","type":"radio","defval":true,"impact":["outlineColor","outlineOpacity","outlineWidth"]},{"name":"outlineColor","label":"\u8fb9\u6846\u989c\u8272","type":"color","defval":"#ffffff"},{"name":"outlineOpacity","label":"\u8fb9\u6846\u900f\u660e\u5ea6","type":"slider","defval":0.6},{"name":"outlineWidth","label":"\u8fb9\u6846\u5bbd\u5ea6","type":"number","defval":2},{"name":"scaleByDistance","label":"\u662f\u5426\u6309\u89c6\u8ddd\u7f29\u653e","type":"radio","defval":false,"impact":["scaleByDistance_far","scaleByDistance_farValue","scaleByDistance_near","scaleByDistance_nearValue"]},{"name":"scaleByDistance_far","label":"\u4e0a\u9650","type":"number","defval":1000000},{"name":"scaleByDistance_farValue","label":"\u6bd4\u4f8b\u503c","type":"number","defval":0.1},{"name":"scaleByDistance_near","label":"\u4e0b\u9650","type":"number","defval":1000},{"name":"scaleByDistance_nearValue","label":"\u6bd4\u4f8b\u503c","type":"number","defval":1},{"name":"distanceDisplayCondition","label":"\u662f\u5426\u6309\u89c6\u8ddd\u663e\u793a","type":"radio","defval":false,"impact":["distanceDisplayCondition_far","distanceDisplayCondition_near"]},{"name":"distanceDisplayCondition_far","label":"\u6700\u5927\u8ddd\u79bb","type":"number","defval":10000},{"name":"distanceDisplayCondition_near","label":"\u6700\u5c0f\u8ddd\u79bb","type":"number","defval":0}],"attr":[{"name":"id","label":"\u4e3b\u952e","type":"hidden","defval":""},{"name":"name","label":"\u540d\u79f0","type":"text","defval":""},{"name":"remark","label":"\u5907\u6ce8","type":"textarea","defval":""}]},"polyline":{"name":"\u7ebf","position":{"minCount":2},"style":[{"name":"lineType","label":"\u7ebf\u578b","type":"combobox","defval":"solid","data":[{"text":"\u5b9e\u7ebf","value":"solid"},{"text":"\u865a\u7ebf","value":"dash"},{"text":"\u5149\u6655","value":"glow"},{"text":"\u7bad\u5934","value":"arrow"}]},{"name":"color","label":"\u989c\u8272","type":"color","defval":"#3388ff"},{"name":"width","label":"\u7ebf\u5bbd","type":"number","defval":4},{"name":"clampToGround","label":"\u662f\u5426\u8d34\u5730","type":"radio","defval":false},{"name":"outline","label":"\u662f\u5426\u886c\u8272","type":"radio","defval":false,"impact":["outlineColor","outlineWidth"]},{"name":"outlineColor","label":"\u886c\u8272\u989c\u8272","type":"color","defval":"#ffffff"},{"name":"outlineWidth","label":"\u886c\u8272\u5bbd\u5ea6","type":"number","defval":2},{"name":"opacity","label":"\u900f\u660e\u5ea6","type":"slider","defval":1}],"attr":[{"name":"id","label":"\u4e3b\u952e","type":"hidden","defval":""},{"name":"name","label":"\u540d\u79f0","type":"text","defval":""},{"name":"remark","label":"\u5907\u6ce8","type":"textarea","defval":""}]},"polygon":{"name":"\u9762","position":{"height":true,"minCount":3},"style":[{"name":"fill","label":"\u662f\u5426\u586b\u5145","type":"radio","defval":true,"impact":["color","opacity"]},{"name":"color","label":"\u989c\u8272","type":"color","defval":"#3388ff"},{"name":"opacity","label":"\u900f\u660e\u5ea6","type":"slider","defval":0.6},{"name":"outline","label":"\u662f\u5426\u8fb9\u6846","type":"radio","defval":true,"impact":["outlineWidth","outlineColor","outlineOpacity"]},{"name":"outlineWidth","label":"\u8fb9\u6846\u5bbd\u5ea6","type":"number","defval":1},{"name":"outlineColor","label":"\u8fb9\u6846\u989c\u8272","type":"color","defval":"#ffffff"},{"name":"outlineOpacity","label":"\u8fb9\u6846\u900f\u660e\u5ea6","type":"slider","defval":0.6},{"name":"clampToGround","label":"\u662f\u5426\u8d34\u5730","type":"hidden","defval":false}],"attr":[{"name":"id","label":"\u4e3b\u952e","type":"hidden","defval":""},{"name":"name","label":"\u540d\u79f0","type":"text","defval":""},{"name":"remark","label":"\u5907\u6ce8","type":"textarea","defval":""}]}}';
function initWidgetView(d) {
  (thisWidget = d).config && thisWidget.config.style && $('body').addClass(thisWidget.config.style);
  $('#btn_plot_delall').click(function() {
    thisWidget.deleteAll();
  });
  $('#btnDelete').click(function(d) {
    thisWidget.deleteCurrentEntity();
    tab2plot();
  });
  $('#btnCenter').click(function(d) {
    thisWidget.centerCurrentEntity();
  });
  var f = !0;
  $('#btn_plot_isedit').click(function() {
    (f = !f)
      ? ($(this).removeClass('active'),
        $(this)
          .children()
          .removeClass('fa-lock')
          .addClass('fa-unlock'))
      : ($(this).addClass('active'),
        $(this)
          .children()
          .removeClass('fa-unlock')
          .addClass('fa-lock'));
    thisWidget.hasEdit(f);
  });
  plotFile.initEvent();
  plotEdit.initEvent();
  plotEdit.loadConfig();
}
var plotFile = {
    initEvent: function() {
      var d = this;
      $('#btn_plot_openfile').click(function() {
        $('#input_plot_file').click();
      });
      $('#btn_plot_openfile2').click(function() {
        $('#input_plot_file').click();
      });
      $('#btn_plot_delall').click(function() {
        parent.g_helpob.removeAll();
      });
      $('#btn_plot_savefile').click(function() {
        var d = parent.g_helpob.saveSymbols();
        haoutil.file.downloadFile('\u6807\u7ed8.json', JSON.stringify(d));
      });
      $('#input_plot_file').change(function(f) {
        f = this.files[0];
        var h = f.name;
        'json' != h.substring(h.lastIndexOf('.') + 1, h.length).toLowerCase()
          ? alert(
              '\u6587\u4ef6\u7c7b\u578b\u4e0d\u5408\u6cd5,\u8bf7\u9009\u62e9json\u683c\u5f0f\u6807\u6ce8\u6587\u4ef6\uff01'
            )
          : (void d.clearPlotFile(),
            window.FileReader &&
              ((h = new FileReader()),
              h.readAsText(f, 'UTF-8'),
              (h.onloadend = function(f) {
                parent.g_helpob.readPtSymbol(this.result);
                d.clearPlotFile();
              })));
      });
    },
    clearPlotFile: function() {
      window.addEventListener
        ? (document.getElementById('input_plot_file').value = '')
        : (document.getElementById('input_plot_file').outerHTML += '');
    },
  },
  plotlist = {
    bindSelList: function() {
      for (var d = this, f = $('#sel_plot_list'), h, k = '', q = 0; q < g_symidnames.length; q++)
        k +=
          '<option value="' +
          q +
          '">' +
          g_symidnames[q] +
          '(' +
          g_symidpages[q].length +
          ')</option>';
      null == h && (h = 0);
      d.showPlotList2(h);
      f.attr('data-value', h);
      null != h &&
        (f.attr('data-value', h),
        f.html(k),
        f.select(),
        f.change(function() {
          var f = $(this).attr('data-value');
          d.showPlotList2(f);
        }));
    },
    _listData: null,
    showPlotList2: function(d) {
      g_curpageidx = this._listData = d;
      displayGlyphArray(g_symidpages[d]);
    },
    _lastLi: null,
    startPlot: function(d, f) {
      f = $(f);
      f.addClass('markon');
      this._lastLi && this._lastLi.removeClass('markon');
      this._lastLi = f;
      d = this._listData[d];
      f = haoutil.system.clone(plotEdit.defval[d.edittype || d.type] || {});
      if (d.style) for (var h in d.style) f.style[h] = d.style[h];
      if (d.attr) for (h in d.attr) f.attr[h] = d.attr[h];
      f.type = d.type;
      f.name = f.name || d.name;
      thisWidget.startDraw(f);
    },
    plotEnd: function() {
      this._lastLi && this._lastLi.removeClass('markon');
    },
  },
  plotEdit = {
    hasEditSylte: !0,
    config: {},
    defval: {},
    initEvent: function() {
      this.hasEditSylte || $('#attr_style_view').hide();
      $('#plot_latlngs_allheight').bind('input propertychange', function() {
        $('#plot_latlngs_addheight').val('');
        var d = Number($(this).val());
        isNaN(d) && (d = 1);
        var f = [];
        $('.plot_latlngs').each(function() {
          'height' == $(this).attr('data-type')
            ? ($(this).val(d), f.push(d))
            : f.push(Number($(this).val()));
        });
        thisWidget.updateGeo2map(f, !0);
      });
      $('#plot_latlngs_addheight').bind('input propertychange', function() {
        $('#plot_latlngs_allheight').val('');
        var d = Number($(this).val());
        isNaN(d) && (d = 1);
        var f = [];
        $('.plot_latlngs').each(function() {
          if ('height' == $(this).attr('data-type')) {
            var h = Number($(this).attr('oldvalue'));
            $(this).val(h + d);
            f.push(h + d);
          } else f.push(Number($(this).val()));
        });
        thisWidget.updateGeo2map(f, !0);
      });
    },
    loadConfig: function() {
      var d = JSON.parse(g_strJson),
        f;
      for (f in (this.config = d)) {
        for (var h = {}, k = 0; k < d[f].style.length; k++) h[(w = d[f].style[k]).name] = w.defval;
        var q = {};
        for (k = 0; k < d[f].attr.length; k++) {
          var w;
          q[(w = d[f].attr[k]).name] = w.defval;
        }
        this.defval[f] = {
          edittype: f,
          name: d[f].name,
          position: d[f].position,
          style: h,
          attr: q,
        };
      }
      plotlist.bindSelList();
    },
    _last_attr: null,
    startEditing: function(d, f) {
      this._last_attr = d;
      var h = this.config[d.edittype] || {};
      f && this.updateLatlngsHtml(f, h.position);
      f = [];
      if (this.hasEditSylte) {
        for (
          var k = 'plot_attr_style_',
            q =
              '<tr><td class="nametd">\u7c7b\u578b\uff1a</td><td>' +
              (h.name || d.name) +
              '</td></tr>',
            w = 0;
          w < h.style.length;
          w++
        )
          if ('hidden' != (G = h.style[w]).type) {
            var v = G.name,
              F = d.style[v];
            (I = this.getAttrInput(k, v, F, G)).fun &&
              (f.push({ parname: k, name: v, value: F, edit: G, fun: I.fun }),
              (q +=
                '<tr  id="' +
                k +
                'tr_' +
                v +
                '" > <td class="nametd">' +
                G.label +
                '</td>  <td>' +
                I.html +
                '</td>  </tr>'));
          }
        $('#talbe_style').html(q);
      }
      k = 'plot_attr_attr_';
      q = '';
      for (w = 0; w < h.attr.length; w++) {
        var G;
        if ('hidden' != (G = h.attr[w]).type) {
          var I;
          v = G.name;
          F = d.attr[v];
          (I = this.getAttrInput(k, v, F, G)).fun &&
            f.push({ parname: k, name: v, value: F, edit: G, fun: I.fun });
          q +=
            '<tr  id="' +
            k +
            'tr_' +
            v +
            '" > <td class="nametd">' +
            G.label +
            '</td>  <td>' +
            I.html +
            '</td>  </tr>';
        }
      }
      $('#talbe_attr').html(q);
      for (w = 0; w < f.length; w++) (d = f[w]), d.fun(d.parname, d.name, d.value, d.edit);
      tab2attr();
    },
    lastCfg: null,
    updateLatlngsHtml: function(d, f) {
      this.lastCfg = f = f || this.lastCfg || {};
      $('#plot_latlngs_addheight').val('');
      $('#plot_latlngs_allheight').val('');
      $('#view_updateheight').hide();
      f.hasOwnProperty('height') || (f.height = !0);
      var h = '';
      if (d && 0 != d.length)
        if (1 == d.length) {
          var k = (F = d[0])[0],
            q = F[1];
          F = 3 == F.length ? F[2] : 0;
          h +=
            ' <div class="mp_attr" style=" margin-top: 10px;"><table> <tr> <td class="nametd">\u7ecf\u5ea6\uff1a</td> <td><input type="number" class="mp_input plot_latlngs" data-type="jd" value="' +
            k +
            '"></td></tr><tr>  <td class="nametd">\u7eac\u5ea6\uff1a</td> <td><input type="number" class="mp_input plot_latlngs" data-type="wd" value="' +
            q +
            '"></td></tr>';
          f.height &&
            (h +=
              '<tr><td class="nametd">\u9ad8\u7a0b\uff1a</td> <td><input type="number" class="mp_input plot_latlngs" data-type="height" value="' +
              F +
              '" oldvalue="' +
              F +
              '"></td></tr>');
          h += ' </table> </div>';
        } else {
          f.height && $('#view_updateheight').show();
          var w = '';
          d.length > (f.minCount || 3) &&
            (w = '<i class="fa fa-trash-o latlng-del" title="\u5220\u9664\u70b9" ></i>');
          for (var v = 0; v < d.length; v++) {
            k = (F = d[v])[0];
            q = F[1];
            F = 3 == F.length ? F[2] : 0;
            var F,
              G = '';
            (null == f.maxCount || d.length < f.maxCount) &&
              (G =
                '<i class="fa  fa-plus-square-o latlng-install" title="\u63d2\u5165\u70b9" data-index="' +
                v +
                '" ></i>&nbsp;&nbsp;');
            h +=
              '<div><div class="open"><i class="tree_icon">-</i>\u7b2c' +
              (v + 1) +
              '\u70b9 <label style="width:100px;">&nbsp;</label>    ' +
              G +
              w +
              ' </div><div class="mp_attr"><table><tr> <td class="nametd">\u7ecf\u5ea6\uff1a</td> <td><input  type="number" class="mp_input plot_latlngs" data-type="jd" data-index="' +
              v +
              '" value="' +
              k +
              '"></td>  </tr> <tr>  <td class="nametd">\u7eac\u5ea6\uff1a</td> <td><input  type="number" class="mp_input plot_latlngs" data-type="wd" data-index="' +
              v +
              '" value="' +
              q +
              '"></td> </tr> ';
            f.height &&
              (h +=
                '<tr>  <td class="nametd">\u9ad8\u7a0b\uff1a</td> <td><input  type="number" class="mp_input plot_latlngs" data-type="height" data-index="' +
                v +
                '" value="' +
                F +
                '" oldvalue="' +
                F +
                '"></td> </tr> ');
            h += ' </table> </div> </div>';
          }
        }
      $('#view_latlngs').html(h);
      $('#view_latlngs .open').click(changeOpenShowHide);
      var I = this;
      $('#view_latlngs .latlng-del').click(function() {
        $(this)
          .parent()
          .parent()
          .remove();
        var d = [],
          f = !1;
        $('.plot_latlngs').each(function() {
          d.push(Number($(this).val()));
          'height' === $(this).attr('data-type') && (f = !0);
        });
        thisWidget.updateGeo2map(d, f);
        var h = [];
        if (f) for (var k = 0; k < d.length; k += 3) h.push([d[k], d[k + 1], d[k + 2]]);
        else for (k = 0; k < d.length; k += 2) h.push([d[k], d[k + 1]]);
        I.updateLatlngsHtml(h);
      });
      $('#view_latlngs .latlng-install').click(function() {
        var d = Number($(this).attr('data-index')),
          f = [],
          h = !1;
        $('.plot_latlngs').each(function() {
          f.push(Number($(this).val()));
          'height' === $(this).attr('data-type') && (h = !0);
        });
        var k = [];
        if (h) for (var q = 0; q < f.length; q += 3) k.push([f[q], f[q + 1], f[q + 2]]);
        else for (q = 0; q < f.length; q += 2) k.push([f[q], f[q + 1]]);
        var F = k[d],
          w = d == k.length - 1 ? k[0] : k[d + 1];
        q = Number(((F[0] + w[0]) / 2).toFixed(6));
        var v = Number(((F[1] + w[1]) / 2).toFixed(6));
        h
          ? ((F = Number(((F[2] + w[2]) / 2).toFixed(1))),
            k.splice(d + 1, 0, [q, v, F]),
            f.splice(3 * (d + 1), 0, q, v, F))
          : (k.splice(d + 1, 0, [q, v]), f.splice(3 * (d + 1), 0, q, v));
        I.updateLatlngsHtml(k);
        thisWidget.updateGeo2map(f, h);
      });
      $('.plot_latlngs').bind('input propertychange', function() {
        var d = [],
          f = !1;
        $('.plot_latlngs').each(function() {
          d.push(Number($(this).val()));
          'height' === $(this).attr('data-type') && (f = !0);
        });
        thisWidget.updateGeo2map(d, f);
      });
    },
    stopEditing: function() {
      tab2plot();
      $('#talbe_style').html('');
      $('#talbe_attr').html('');
      this._last_attr = null;
    },
    getAttrInput: function(d, f, h, k) {
      (null != h && null != h) || (h = '');
      var q = this,
        w = '',
        v = null;
      switch (k.type) {
        default:
        case 'label':
          w = h;
          break;
        case 'text':
          w = '<input id="' + d + f + '" type="text" value="' + h + '"   class="mp_input" />';
          v = function(d, f, h, k) {
            $('#' + d + f).on('input propertychange', function(h) {
              h = $(this).val();
              q.updateAttr(d, f, h);
            });
          };
          break;
        case 'textarea':
          w =
            '<textarea  id="' +
            d +
            f +
            '"     class="mp_input" style="height:50px;resize: none;" >' +
            (h = h.replace(/<br \/>/gm, '\n')) +
            '</textarea>';
          v = function(d, f, h, k) {
            $('#' + d + f).on('input propertychange', function(h) {
              h = $(this).val();
              0 == h.length && (h = '\u6587\u5b57');
              h = h.replace(/\n/g, '<br />');
              q.updateAttr(d, f, h);
            });
          };
          break;
        case 'number':
          w = '<input id="' + d + f + '" type="number" value="' + h + '"    class="mp_input"/>';
          v = function(d, f, h, k) {
            $('#' + d + f).on('input propertychange', function(h) {
              h = Number($(this).val());
              q.updateAttr(d, f, h);
            });
          };
          break;
        case 'combobox':
          w = '<select id="' + d + f + '" class="mp_select"    data-value="' + h + '" >';
          for (h = 0; h < k.data.length; h++)
            (d = k.data[h]), (w += '<option value="' + d.value + '">' + d.text + '</option>');
          w += '</select>';
          v = function(d, f, h, k) {
            $('#' + d + f).select();
            $('#' + d + f).change(function() {
              var h = $(this).attr('data-value');
              q.updateAttr(d, f, h);
            });
          };
          break;
        case 'radio':
          k = d + f;
          w =
            '  <div class="radio radio-info radio-inline">                                <input type="radio" id="' +
            k +
            '_1" value="1"  name="' +
            k +
            '"  ' +
            (h ? 'checked="checked"' : '') +
            '>                                <label for="' +
            k +
            '_1"> \u662f</label>                            </div>                            <div class="radio radio-info radio-inline">                                <input type="radio" id="' +
            k +
            '_2" value="2" name="' +
            k +
            '" ' +
            (h ? '' : 'checked="checked"') +
            ' ">                                <label for="' +
            k +
            '_2"> \u5426 </label>                            </div>';
          v = function(d, f, h, k) {
            $('input:radio[name="' + d + f + '"]').change(function() {
              var h = '1' == $(this).val();
              q.updateAttr(d, f, h);
              q.changeViewByAttr(d, k.impact, h);
            });
            q.changeViewByAttr(d, k.impact, h);
          };
          break;
        case 'color':
          w =
            '<input id="' +
            d +
            f +
            '"  class="mp_input" style="width: 100%;"  value="' +
            h +
            '" />';
          v = function(d, f, h, k) {
            $('#' + d + f).minicolors({
              position: 'bottom right',
              control: 'saturation',
              change: function(h, k) {
                q.updateAttr(d, f, h);
              },
            });
          };
          break;
        case 'slider':
          w = '<input id="' + d + f + '"  type="text" value="' + 100 * h + '" />';
          v = function(d, f, h, k) {
            h = 0.7 * $('.mp_tab_card').width() - 30;
            $('#' + d + f).progress(h);
            $('#' + d + f).change(function() {
              var h = Number($(this).val()) / 100;
              q.updateAttr(d, f, h);
            });
          };
          break;
        case 'window':
          (w =
            '<input id="' +
            d +
            f +
            '" type="text" value="' +
            h +
            '" readonly   class="mp_input" />'),
            (v = function(d, f, h, k) {
              $('#' + d + f).on('click', function(k) {
                thisWidget.showEditAttrWindow({
                  data: q._last_attr,
                  parname: d,
                  attrName: f,
                  attrVal: h,
                });
              });
              $('#' + d + f).on('input propertychange', function(h) {
                h = $(this).val();
                q.updateAttr(d, f, h);
              });
            });
      }
      return { html: w, fun: v };
    },
    changeViewByAttr: function(d, f, h) {
      if (f && 0 < f.length)
        for (var k = 0; k < f.length; k++) {
          var q = f[k];
          h ? $('#' + d + 'tr_' + q).show() : $('#' + d + 'tr_' + q).hide();
        }
    },
    updateAttr: function(d, f, h) {
      switch (d) {
        case 'plot_attr_style_':
          this._last_attr.style[f] = h;
          break;
        case 'plot_attr_attr_':
          this._last_attr.attr[f] = h;
      }
      thisWidget.updateAttribute(this._last_attr);
    },
  };
plotFile.initEvent();
plotEdit.initEvent();
function showEditProperty(d, f, h) {
  var k = getGidFromKeyid(f.gid);
  1 == d
    ? ((f = Z.point),
      (f.style.text = h.text),
      (f.style.symbolSize = (h.symbolSize - 40) / 300),
      (f.style.textx = h.textx / 1600),
      (f.style.texty = h.texty / 1600),
      (f.style.font_size = h.font_size),
      (f.style.textcolor = h.textcolor),
      plotEdit.startEditing(f),
      displayGlyph2(document.getElementById('g_id'), k, h))
    : 2 == d
    ? (plotEdit.startEditing(Z.polyline), displayGlyph2(document.getElementById('g_id'), k, h))
    : 3 == d
    ? ((d = Z.polygon),
      null != f && ((d.style.fill = f.fill), (d.style.color = f.color)),
      plotEdit.startEditing(d),
      displayGlyph2(document.getElementById('g_id'), k, h))
    : 4 == d &&
      (plotEdit.startEditing(Z.label), displayGlyph2(document.getElementById('g_id'), k, h));
}
!(function(d, f) {
  'object' == typeof exports && 'undefined' != typeof module
    ? f(exports)
    : 'function' == typeof define && define.amd
    ? define(['exports'], f)
    : f((d.opentype = {}));
})(this, function(d) {
  function f() {
    this.table = new Uint16Array(16);
    this.trans = new Uint16Array(288);
  }
  function h(a, b) {
    this.source = a;
    this.bitcount = this.tag = this.sourceIndex = 0;
    this.dest = b;
    this.destLen = 0;
    this.ltree = new f();
    this.dtree = new f();
  }
  function k(a, b, c, e) {
    var g;
    for (g = 0; g < c; ++g) a[g] = 0;
    for (g = 0; g < 30 - c; ++g) a[g + c] = (g / c) | 0;
    c = e;
    for (g = 0; 30 > g; ++g) (b[g] = c), (c += 1 << a[g]);
  }
  function q(a, b, c, e) {
    var g, r;
    for (g = 0; 16 > g; ++g) a.table[g] = 0;
    for (g = 0; g < e; ++g) a.table[b[c + g]]++;
    for (g = r = a.table[0] = 0; 16 > g; ++g) ($a[g] = r), (r += a.table[g]);
    for (g = 0; g < e; ++g) b[c + g] && (a.trans[$a[b[c + g]]++] = g);
  }
  function w(a, b, c) {
    if (!b) return c;
    for (; 24 > a.bitcount; ) (a.tag |= a.source[a.sourceIndex++] << a.bitcount), (a.bitcount += 8);
    var e = a.tag & (65535 >>> (16 - b));
    return (a.tag >>>= b), (a.bitcount -= b), e + c;
  }
  function v(a, b) {
    for (; 24 > a.bitcount; ) (a.tag |= a.source[a.sourceIndex++] << a.bitcount), (a.bitcount += 8);
    for (
      var c = 0, e = 0, g = 0, r = a.tag;
      (e = 2 * e + (1 & r)), (r >>>= 1), ++g, (c += b.table[g]), 0 <= (e -= b.table[g]);

    );
    return (a.tag = r), (a.bitcount -= g), b.trans[c + e];
  }
  function F(a, b, c) {
    for (;;) {
      var e;
      var g = v(a, b);
      if (256 === g) return 0;
      if (256 > g) a.dest[a.destLen++] = g;
      else {
        var r = w(a, Ha[(g -= 257)], Ia[g]);
        g = v(a, c);
        for (e = g = a.destLen - w(a, ab[g], bb[g]); e < g + r; ++e)
          a.dest[a.destLen++] = a.dest[e];
      }
    }
  }
  function G(a, b, c, e, g) {
    return (
      Math.pow(1 - g, 3) * a +
      3 * Math.pow(1 - g, 2) * g * b +
      3 * (1 - g) * Math.pow(g, 2) * c +
      Math.pow(g, 3) * e
    );
  }
  function I() {
    this.y2 = this.x2 = this.y1 = this.x1 = Number.NaN;
  }
  function J() {
    this.commands = [];
    this.fill = 'black';
    this.stroke = null;
    this.strokeWidth = 1;
  }
  function K(a) {
    throw Error(a);
  }
  function ma(a, b) {
    a || K(b);
  }
  function N(a) {
    return function() {
      return a;
    };
  }
  function M(a, b, c) {
    for (var e = 0; e < b.length; e += 1) {
      var g = b[e];
      this[g.name] = g.value;
    }
    if (((this.tableName = a), (this.fields = b), c))
      for (a = Object.keys(c), b = 0; b < a.length; b += 1)
        (e = a[b]), (g = c[e]), void 0 !== this[e] && (this[e] = g);
  }
  function na(a, b, c) {
    void 0 === c && (c = b.length);
    var e = Array(b.length + 1);
    e[0] = { name: a + 'Count', type: 'USHORT', value: c };
    for (c = 0; c < b.length; c++) e[c + 1] = { name: a + c, type: 'USHORT', value: b[c] };
    return e;
  }
  function Ga(a, b, c) {
    var e = b.length,
      g = Array(e + 1);
    g[0] = { name: a + 'Count', type: 'USHORT', value: e };
    for (var r = 0; r < e; r++) g[r + 1] = { name: a + r, type: 'TABLE', value: c(b[r], r) };
    return g;
  }
  function sa(a, b, c) {
    var e = b.length,
      g = [];
    g[0] = { name: a + 'Count', type: 'USHORT', value: e };
    for (a = 0; a < e; a++) g = g.concat(c(b[a], a));
    return g;
  }
  function cb(a) {
    1 === a.format
      ? M.call(
          this,
          'coverageTable',
          [{ name: 'coverageFormat', type: 'USHORT', value: 1 }].concat(na('glyph', a.glyphs))
        )
      : z.assert(!1, "Can't create coverage table format 2 yet.");
  }
  function db(a) {
    M.call(
      this,
      'scriptListTable',
      sa('scriptRecord', a, function(a, c) {
        var b = a.script,
          g = b.defaultLangSys;
        return (
          z.assert(
            !!g,
            'Unable to write GSUB: script ' + a.tag + ' has no default language system.'
          ),
          [
            { name: 'scriptTag' + c, type: 'TAG', value: a.tag },
            {
              name: 'script' + c,
              type: 'TABLE',
              value: new M(
                'scriptTable',
                [
                  {
                    name: 'defaultLangSys',
                    type: 'TABLE',
                    value: new M(
                      'defaultLangSys',
                      [
                        { name: 'lookupOrder', type: 'USHORT', value: 0 },
                        { name: 'reqFeatureIndex', type: 'USHORT', value: g.reqFeatureIndex },
                      ].concat(na('featureIndex', g.featureIndexes))
                    ),
                  },
                ].concat(
                  sa('langSys', b.langSysRecords, function(a, b) {
                    var c = a.langSys;
                    return [
                      { name: 'langSysTag' + b, type: 'TAG', value: a.tag },
                      {
                        name: 'langSys' + b,
                        type: 'TABLE',
                        value: new M(
                          'langSys',
                          [
                            { name: 'lookupOrder', type: 'USHORT', value: 0 },
                            { name: 'reqFeatureIndex', type: 'USHORT', value: c.reqFeatureIndex },
                          ].concat(na('featureIndex', c.featureIndexes))
                        ),
                      },
                    ];
                  })
                )
              ),
            },
          ]
        );
      })
    );
  }
  function eb(a) {
    M.call(
      this,
      'featureListTable',
      sa('featureRecord', a, function(a, c) {
        var b = a.feature;
        return [
          { name: 'featureTag' + c, type: 'TAG', value: a.tag },
          {
            name: 'feature' + c,
            type: 'TABLE',
            value: new M(
              'featureTable',
              [{ name: 'featureParams', type: 'USHORT', value: b.featureParams }].concat(
                na('lookupListIndex', b.lookupListIndexes)
              )
            ),
          },
        ];
      })
    );
  }
  function fb(a, b) {
    M.call(
      this,
      'lookupListTable',
      Ga('lookup', a, function(a) {
        var c = b[a.lookupType];
        return (
          z.assert(!!c, 'Unable to write GSUB lookup type ' + a.lookupType + ' tables.'),
          new M(
            'lookupTable',
            [
              { name: 'lookupType', type: 'USHORT', value: a.lookupType },
              { name: 'lookupFlag', type: 'USHORT', value: a.lookupFlag },
            ].concat(Ga('subtable', a.subtables, c))
          )
        );
      })
    );
  }
  function gb(a, b) {
    return a.getUint8(b);
  }
  function ta(a, b) {
    return a.getUint16(b, !1);
  }
  function Ja(a, b) {
    return a.getUint32(b, !1);
  }
  function hb(a, b) {
    return a.getInt16(b, !1) + a.getUint16(b + 2, !1) / 65535;
  }
  function l(a, b) {
    this.data = a;
    this.offset = b;
    this.relativeOffset = 0;
  }
  function ib(a) {
    this.font = a;
  }
  function jb(a) {
    this.cmap = a;
  }
  function ua(a, b) {
    this.encoding = a;
    this.charset = b;
  }
  function Ka(a) {
    switch (a.version) {
      case 1:
        this.names = ea.slice();
        break;
      case 2:
        this.names = Array(a.numberOfGlyphs);
        for (var b = 0; b < a.numberOfGlyphs; b++)
          a.glyphNameIndex[b] < ea.length
            ? (this.names[b] = ea[a.glyphNameIndex[b]])
            : (this.names[b] = a.names[a.glyphNameIndex[b] - ea.length]);
        break;
      case 2.5:
        this.names = Array(a.numberOfGlyphs);
        for (b = 0; b < a.numberOfGlyphs; b++) this.names[b] = ea[b + a.glyphNameIndex[b]];
        break;
      default:
        this.names = [];
    }
  }
  function O(a) {
    this.bindConstructorValues(a);
  }
  function va(a, b, c) {
    Object.defineProperty(a, b, {
      get: function() {
        return a.path, a[c];
      },
      set: function(b) {
        a[c] = b;
      },
      enumerable: !0,
      configurable: !0,
    });
  }
  function La(a, b) {
    if (((this.font = a), (this.glyphs = {}), Array.isArray(b)))
      for (a = 0; a < b.length; a++) this.glyphs[a] = b[a];
    this.length = (b && b.length) || 0;
  }
  function kb(a, b) {
    if (a === b) return !0;
    if (Array.isArray(a) && Array.isArray(b)) {
      if (a.length !== b.length) return !1;
      for (var c = 0; c < a.length; c += 1) if (!kb(a[c], b[c])) return !1;
      return !0;
    }
    return !1;
  }
  function Ma(a) {
    return 1240 > a.length ? 107 : 33900 > a.length ? 1131 : 32768;
  }
  function aa(a, b, c) {
    var e = [],
      g = [];
    var r = y.getCard16(a, b);
    if (0 !== r) {
      var d = y.getByte(a, b + 2);
      var f = b + (r + 1) * d + 2;
      for (var m = b + 3, D = 0; D < r + 1; D += 1) e.push(y.getOffset(a, m, d)), (m += d);
      r = f + e[r];
    } else r = b + 2;
    for (d = 0; d < e.length - 1; d += 1)
      (m = y.getBytes(a, f + e[d], f + e[d + 1])), c && (m = c(m)), g.push(m);
    return { objects: g, startOffset: b, endOffset: r };
  }
  function xc(a, b) {
    if (28 === b) return (a.parseByte() << 8) | a.parseByte();
    if (29 === b)
      return (a.parseByte() << 24) | (a.parseByte() << 16) | (a.parseByte() << 8) | a.parseByte();
    if (30 === b) {
      b = '';
      for (
        var c = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'E', 'E-', null, '-'];
        ;

      ) {
        var e = a.parseByte(),
          g = e >> 4;
        e &= 15;
        if (15 === g) break;
        if (((b += c[g]), 15 === e)) break;
        b += c[e];
      }
      return parseFloat(b);
    }
    if (32 <= b && 246 >= b) return b - 139;
    if (247 <= b && 250 >= b) return 256 * (b - 247) + a.parseByte() + 108;
    if (251 <= b && 254 >= b) return 256 * -(b - 251) - a.parseByte() - 108;
    throw Error('Invalid b0 ' + b);
  }
  function lb(a, b, c) {
    var e = new y.Parser(a, void 0 !== b ? b : 0);
    b = [];
    var g = [];
    for (c = void 0 !== c ? c : a.length; e.relativeOffset < c; )
      (a = e.parseByte()),
        21 >= a
          ? (12 === a && (a = 1200 + e.parseByte()), b.push([a, g]), (g = []))
          : g.push(xc(e, a));
    c = {};
    for (a = 0; a < b.length; a += 1) {
      e = b[a][0];
      g = b[a][1];
      if (((g = 1 === g.length ? g[0] : g), c.hasOwnProperty(e) && !isNaN(c[e])))
        throw Error('Object ' + c + ' already has key ' + e);
      c[e] = g;
    }
    return c;
  }
  function oa(a, b) {
    return 390 >= b ? wa[b] : a[b - 391];
  }
  function mb(a, b, c) {
    for (var e, g = {}, r = 0; r < b.length; r += 1) {
      var d = b[r];
      if (Array.isArray(d.type)) {
        var f = [];
        f.length = d.type.length;
        for (var m = 0; m < d.type.length; m++)
          void 0 === (e = void 0 !== a[d.op] ? a[d.op][m] : void 0) &&
            (e = void 0 !== d.value && void 0 !== d.value[m] ? d.value[m] : null),
            'SID' === d.type[m] && (e = oa(c, e)),
            (f[m] = e);
        g[d.name] = f;
      } else
        void 0 === (e = a[d.op]) && (e = void 0 !== d.value ? d.value : null),
          'SID' === d.type && (e = oa(c, e)),
          (g[d.name] = e);
    }
    return g;
  }
  function nb(a, b, c, e) {
    return mb(lb(a, b, c), ob, e);
  }
  function pb(a, b, c, e) {
    for (var g, r, d = [], f = 0; f < c.length; f += 1) {
      var m = new DataView(new Uint8Array(c[f]).buffer);
      m = ((r = e), mb(lb((g = m), 0, g.byteLength), qb, r));
      m._subrs = [];
      m._subrsBias = 0;
      var D = m.private[0],
        p = m.private[1];
      if (0 !== D && 0 !== p) {
        D = nb(a, p + b, D, e);
        if (
          ((m._defaultWidthX = D.defaultWidthX),
          (m._nominalWidthX = D.nominalWidthX),
          0 !== D.subrs)
        )
          (p = aa(a, p + D.subrs + b)), (m._subrs = p.objects), (m._subrsBias = Ma(m._subrs));
        m._privateDict = D;
      }
      d.push(m);
    }
    return d;
  }
  function yc(a, b, c) {
    function e(a, b) {
      l && D.closePath();
      D.moveTo(a, b);
      l = !0;
    }
    function g() {
      0 != p.length % 2 && !k && (y = p.shift() + v);
      h += p.length >> 1;
      p.length = 0;
      k = !0;
    }
    var r,
      d,
      f,
      m,
      D = new J(),
      p = [],
      h = 0,
      k = !1,
      l = !1,
      C = 0,
      x = 0;
    if (a.isCIDFont) {
      var q = a.tables.cff.topDict._fdArray[a.tables.cff.topDict._fdSelect[b.index]];
      var u = q._subrs;
      var w = q._subrsBias;
      var t = q._defaultWidthX;
      var v = q._nominalWidthX;
    } else (u = a.tables.cff.topDict._subrs), (w = a.tables.cff.topDict._subrsBias), (t = a.tables.cff.topDict._defaultWidthX), (v = a.tables.cff.topDict._nominalWidthX);
    var y = t;
    return (
      (function sb(c) {
        for (var n, T, rb, q, E, xa, t, Q, A, P, B, z = 0; z < c.length; )
          switch (((E = c[z]), (z += 1), E)) {
            case 1:
            case 3:
              g();
              break;
            case 4:
              1 < p.length && !k && ((y = p.shift() + v), (k = !0));
              x += p.pop();
              e(C, x);
              break;
            case 5:
              for (; 0 < p.length; ) (C += p.shift()), (x += p.shift()), D.lineTo(C, x);
              break;
            case 6:
              for (; 0 < p.length && ((C += p.shift()), D.lineTo(C, x), 0 !== p.length); )
                (x += p.shift()), D.lineTo(C, x);
              break;
            case 7:
              for (; 0 < p.length && ((x += p.shift()), D.lineTo(C, x), 0 !== p.length); )
                (C += p.shift()), D.lineTo(C, x);
              break;
            case 8:
              for (; 0 < p.length; )
                (r = C + p.shift()),
                  (d = x + p.shift()),
                  (f = r + p.shift()),
                  (m = d + p.shift()),
                  (C = f + p.shift()),
                  (x = m + p.shift()),
                  D.curveTo(r, d, f, m, C, x);
              break;
            case 10:
              E = p.pop() + w;
              (xa = u[E]) && sb(xa);
              break;
            case 11:
              return;
            case 12:
              switch (((E = c[z]), (z += 1), E)) {
                case 35:
                  r = C + p.shift();
                  d = x + p.shift();
                  f = r + p.shift();
                  m = d + p.shift();
                  E = f + p.shift();
                  t = m + p.shift();
                  Q = E + p.shift();
                  A = t + p.shift();
                  P = Q + p.shift();
                  B = A + p.shift();
                  C = P + p.shift();
                  x = B + p.shift();
                  p.shift();
                  D.curveTo(r, d, f, m, E, t);
                  D.curveTo(Q, A, P, B, C, x);
                  break;
                case 34:
                  r = C + p.shift();
                  d = x;
                  f = r + p.shift();
                  m = d + p.shift();
                  E = f + p.shift();
                  t = m;
                  Q = E + p.shift();
                  A = m;
                  P = Q + p.shift();
                  B = x;
                  C = P + p.shift();
                  D.curveTo(r, d, f, m, E, t);
                  D.curveTo(Q, A, P, B, C, x);
                  break;
                case 36:
                  r = C + p.shift();
                  d = x + p.shift();
                  f = r + p.shift();
                  m = d + p.shift();
                  E = f + p.shift();
                  t = m;
                  Q = E + p.shift();
                  A = m;
                  P = Q + p.shift();
                  B = A + p.shift();
                  C = P + p.shift();
                  D.curveTo(r, d, f, m, E, t);
                  D.curveTo(Q, A, P, B, C, x);
                  break;
                case 37:
                  r = C + p.shift();
                  d = x + p.shift();
                  f = r + p.shift();
                  m = d + p.shift();
                  E = f + p.shift();
                  t = m + p.shift();
                  Q = E + p.shift();
                  A = t + p.shift();
                  P = Q + p.shift();
                  B = A + p.shift();
                  Math.abs(P - C) > Math.abs(B - x) ? (C = P + p.shift()) : (x = B + p.shift());
                  D.curveTo(r, d, f, m, E, t);
                  D.curveTo(Q, A, P, B, C, x);
                  break;
                default:
                  console.log('Glyph ' + b.index + ': unknown operator 1200' + E), (p.length = 0);
              }
              break;
            case 14:
              0 < p.length && !k && ((y = p.shift() + v), (k = !0));
              l && (D.closePath(), (l = !1));
              break;
            case 18:
              g();
              break;
            case 19:
            case 20:
              g();
              z += (h + 7) >> 3;
              break;
            case 21:
              2 < p.length && !k && ((y = p.shift() + v), (k = !0));
              x += p.pop();
              e((C += p.pop()), x);
              break;
            case 22:
              1 < p.length && !k && ((y = p.shift() + v), (k = !0));
              e((C += p.pop()), x);
              break;
            case 23:
              g();
              break;
            case 24:
              for (; 2 < p.length; )
                (r = C + p.shift()),
                  (d = x + p.shift()),
                  (f = r + p.shift()),
                  (m = d + p.shift()),
                  (C = f + p.shift()),
                  (x = m + p.shift()),
                  D.curveTo(r, d, f, m, C, x);
              C += p.shift();
              x += p.shift();
              D.lineTo(C, x);
              break;
            case 25:
              for (; 6 < p.length; ) (C += p.shift()), (x += p.shift()), D.lineTo(C, x);
              r = C + p.shift();
              d = x + p.shift();
              f = r + p.shift();
              m = d + p.shift();
              C = f + p.shift();
              x = m + p.shift();
              D.curveTo(r, d, f, m, C, x);
              break;
            case 26:
              for (p.length % 2 && (C += p.shift()); 0 < p.length; )
                (r = C),
                  (d = x + p.shift()),
                  (f = r + p.shift()),
                  (m = d + p.shift()),
                  (C = f),
                  (x = m + p.shift()),
                  D.curveTo(r, d, f, m, C, x);
              break;
            case 27:
              for (p.length % 2 && (x += p.shift()); 0 < p.length; )
                (r = C + p.shift()),
                  (d = x),
                  (f = r + p.shift()),
                  (m = d + p.shift()),
                  (C = f + p.shift()),
                  (x = m),
                  D.curveTo(r, d, f, m, C, x);
              break;
            case 28:
              n = c[z];
              T = c[z + 1];
              p.push(((n << 24) | (T << 16)) >> 16);
              z += 2;
              break;
            case 29:
              E = p.pop() + a.gsubrsBias;
              (xa = a.gsubrs[E]) && sb(xa);
              break;
            case 30:
              for (
                ;
                0 < p.length &&
                ((r = C),
                (d = x + p.shift()),
                (f = r + p.shift()),
                (m = d + p.shift()),
                (C = f + p.shift()),
                (x = m + (1 === p.length ? p.shift() : 0)),
                D.curveTo(r, d, f, m, C, x),
                0 !== p.length);

              )
                (r = C + p.shift()),
                  (d = x),
                  (f = r + p.shift()),
                  (m = d + p.shift()),
                  (x = m + p.shift()),
                  (C = f + (1 === p.length ? p.shift() : 0)),
                  D.curveTo(r, d, f, m, C, x);
              break;
            case 31:
              for (
                ;
                0 < p.length &&
                ((r = C + p.shift()),
                (d = x),
                (f = r + p.shift()),
                (m = d + p.shift()),
                (x = m + p.shift()),
                (C = f + (1 === p.length ? p.shift() : 0)),
                D.curveTo(r, d, f, m, C, x),
                0 !== p.length);

              )
                (r = C),
                  (d = x + p.shift()),
                  (f = r + p.shift()),
                  (m = d + p.shift()),
                  (C = f + p.shift()),
                  (x = m + (1 === p.length ? p.shift() : 0)),
                  D.curveTo(r, d, f, m, C, x);
              break;
            default:
              32 > E
                ? console.log('Glyph ' + b.index + ': unknown operator ' + E)
                : 247 > E
                ? p.push(E - 139)
                : 251 > E
                ? ((n = c[z]), (z += 1), p.push(256 * (E - 247) + n + 108))
                : 255 > E
                ? ((n = c[z]), (z += 1), p.push(256 * -(E - 251) - n - 108))
                : ((n = c[z]),
                  (T = c[z + 1]),
                  (rb = c[z + 2]),
                  (q = c[z + 3]),
                  (z += 4),
                  p.push(((n << 24) | (T << 16) | (rb << 8) | q) / 65536));
          }
      })(c),
      (b.advanceWidth = y),
      D
    );
  }
  function tb(a, b) {
    var c,
      e = wa.indexOf(a);
    return (
      0 <= (e = b.indexOf(a)) ? (c = e + wa.length) : ((c = wa.length + b.length), b.push(a)), c
    );
  }
  function ub(a, b, c) {
    for (var e = {}, g = 0; g < a.length; g += 1) {
      var d = a[g],
        n = b[d.name];
      void 0 === n ||
        kb(n, d.value) ||
        ('SID' === d.type && (n = tb(n, c)), (e[d.op] = { name: d.name, type: d.type, value: n }));
    }
    return e;
  }
  function vb(a, b) {
    var c = new A.Record('Top DICT', [{ name: 'dict', type: 'DICT', value: {} }]);
    return (c.dict = ub(qb, a, b)), c;
  }
  function wb(a) {
    var b = new A.Record('Top DICT INDEX', [{ name: 'topDicts', type: 'INDEX', value: [] }]);
    return (b.topDicts = [{ name: 'topDict_0', type: 'TABLE', value: a }]), b;
  }
  function xb(a, b, c) {
    switch (a) {
      case 0:
        return 'utf-16';
      case 1:
        return zc[c] || Ac[b];
      case 3:
        if (1 === b || 10 === b) return 'utf-16';
    }
  }
  function Na(a) {
    var b = {},
      c;
    for (c in a) b[a[c]] = parseInt(c);
    return b;
  }
  function yb(a, b, c, e, g, d) {
    return new A.Record('NameRecord', [
      { name: 'platformID', type: 'USHORT', value: a },
      { name: 'encodingID', type: 'USHORT', value: b },
      { name: 'languageID', type: 'USHORT', value: c },
      { name: 'nameID', type: 'USHORT', value: e },
      { name: 'length', type: 'USHORT', value: g },
      { name: 'offset', type: 'USHORT', value: d },
    ]);
  }
  function zb(a, b) {
    a: {
      var c = a.length;
      var e = b.length - c + 1,
        g = 0;
      b: for (; g < e; g++)
        for (; g < e; ) {
          for (var d = 0; d < c; d++) if (b[g + d] !== a[d]) continue b;
          c = g;
          break a;
        }
      c = -1;
    }
    if (0 > c) for (c = b.length, e = 0, g = a.length; e < g; ++e) b.push(a[e]);
    return c;
  }
  function Oa(a) {
    for (; 0 != a.length % 4; ) a.push(0);
    for (var b = 0, c = 0; c < a.length; c += 4)
      b += (a[c] << 24) + (a[c + 1] << 16) + (a[c + 2] << 8) + a[c + 3];
    return b % Math.pow(2, 32);
  }
  function Ab(a, b, c, e) {
    return new A.Record('Table Record', [
      { name: 'tag', type: 'TAG', value: void 0 !== a ? a : '' },
      { name: 'checkSum', type: 'ULONG', value: void 0 !== b ? b : 0 },
      { name: 'offset', type: 'ULONG', value: void 0 !== c ? c : 0 },
      { name: 'length', type: 'ULONG', value: void 0 !== e ? e : 0 },
    ]);
  }
  function Bb(a) {
    var b = new A.Table('sfnt', [
      { name: 'version', type: 'TAG', value: 'OTTO' },
      { name: 'numTables', type: 'USHORT', value: 0 },
      { name: 'searchRange', type: 'USHORT', value: 0 },
      { name: 'entrySelector', type: 'USHORT', value: 0 },
      { name: 'rangeShift', type: 'USHORT', value: 0 },
    ]);
    b.tables = a;
    b.numTables = a.length;
    var c = Math.pow(2, (Math.log(b.numTables) / Math.log(2)) | 0);
    b.searchRange = 16 * c;
    b.entrySelector = (Math.log(c) / Math.log(2)) | 0;
    b.rangeShift = 16 * b.numTables - b.searchRange;
    c = [];
    for (var e = [], g = b.sizeOf() + Ab().sizeOf() * b.numTables; 0 != g % 4; )
      (g += 1), e.push({ name: 'padding', type: 'BYTE', value: 0 });
    for (var d = 0; d < a.length; d += 1) {
      var n = a[d];
      z.argument(4 === n.tableName.length, 'Table name' + n.tableName + ' is invalid.');
      var f = n.sizeOf(),
        m = Ab(n.tableName, Oa(n.encode()), g, f);
      c.push({ name: m.tag + ' Table Record', type: 'RECORD', value: m });
      e.push({ name: n.tableName + ' table', type: 'RECORD', value: n });
      g += f;
      for (z.argument(!isNaN(g), 'Something went wrong calculating the offset.'); 0 != g % 4; )
        (g += 1), e.push({ name: 'padding', type: 'BYTE', value: 0 });
    }
    return (
      c.sort(function(a, b) {
        return a.value.tag > b.value.tag ? 1 : -1;
      }),
      (b.fields = b.fields.concat(c)),
      (b.fields = b.fields.concat(e)),
      b
    );
  }
  function Cb(a, b, c) {
    for (var e = 0; e < b.length; e += 1) {
      var g = a.charToGlyphIndex(b[e]);
      if (0 < g) return a.glyphs.get(g).getMetrics();
    }
    return c;
  }
  function Pa(a, b) {
    for (var c = 0, e = a.length - 1; c <= e; ) {
      var g = (c + e) >>> 1,
        d = a[g].tag;
      if (d === b) return g;
      d < b ? (c = g + 1) : (e = g - 1);
    }
    return -c - 1;
  }
  function Db(a, b) {
    for (var c = 0, e = a.length - 1; c <= e; ) {
      var g = (c + e) >>> 1,
        d = a[g];
      if (d === b) return g;
      d < b ? (c = g + 1) : (e = g - 1);
    }
    return -c - 1;
  }
  function Eb(a, b) {
    for (var c, e = 0, g = a.length - 1; e <= g; ) {
      var d = (e + g) >>> 1,
        n = (c = a[d]).start;
      if (n === b) return c;
      n < b ? (e = d + 1) : (g = d - 1);
    }
    if (0 < e) return b > (c = a[e - 1]).end ? 0 : c;
  }
  function ya(a, b) {
    this.font = a;
    this.tableName = b;
  }
  function za(a) {
    ya.call(this, a, 'gpos');
  }
  function U(a) {
    ya.call(this, a, 'gsub');
  }
  function Fb(a, b, c) {
    a = a.subtables;
    for (var e = 0; e < a.length; e++) {
      var g = a[e];
      if (g.substFormat === b) return g;
    }
    if (c) return a.push(c), c;
  }
  function Gb(a) {
    for (var b = new ArrayBuffer(a.length), c = new Uint8Array(b), e = 0; e < a.length; ++e)
      c[e] = a[e];
    return b;
  }
  function ha(a, b) {
    if (!a) throw b;
  }
  function Hb(a, b, c, e, g) {
    var d;
    return (
      0 < (b & e)
        ? ((d = a.parseByte()), 0 == (b & g) && (d = -d), (d = c + d))
        : (d = 0 < (b & g) ? c : c + a.parseShort()),
      d
    );
  }
  function Bc(a, b, c) {
    var e, g;
    b = new y.Parser(b, c);
    if (
      ((a.numberOfContours = b.parseShort()),
      (a._xMin = b.parseShort()),
      (a._yMin = b.parseShort()),
      (a._xMax = b.parseShort()),
      (a._yMax = b.parseShort()),
      0 < a.numberOfContours)
    ) {
      var d = (a.endPointIndices = []);
      for (e = 0; e < a.numberOfContours; e += 1) d.push(b.parseUShort());
      a.instructionLength = b.parseUShort();
      a.instructions = [];
      for (e = 0; e < a.instructionLength; e += 1) a.instructions.push(b.parseByte());
      c = d[d.length - 1] + 1;
      e = [];
      for (var n = 0; n < c; n += 1)
        if (((g = b.parseByte()), e.push(g), 0 < (8 & g)))
          for (var f = b.parseByte(), m = 0; m < f; m += 1) e.push(g), (n += 1);
      if ((z.argument(e.length === c, 'Bad flags.'), 0 < d.length)) {
        f = [];
        if (0 < c) {
          for (m = 0; m < c; m += 1)
            (g = e[m]),
              ((n = {}).onCurve = !!(1 & g)),
              (n.lastPointOfContour = 0 <= d.indexOf(m)),
              f.push(n);
          for (m = d = 0; m < c; m += 1) (g = e[m]), ((n = f[m]).x = Hb(b, g, d, 2, 16)), (d = n.x);
          for (m = d = 0; m < c; m += 1) (g = e[m]), ((n = f[m]).y = Hb(b, g, d, 4, 32)), (d = n.y);
        }
        a.points = f;
      } else a.points = [];
    } else if (0 === a.numberOfContours) a.points = [];
    else {
      a.isComposite = !0;
      a.points = [];
      a.components = [];
      for (g = !0; g; )
        (e = b.parseUShort()),
          (g = {
            glyphIndex: b.parseUShort(),
            xScale: 1,
            scale01: 0,
            scale10: 0,
            yScale: 1,
            dx: 0,
            dy: 0,
          }),
          0 < (1 & e)
            ? 0 < (2 & e)
              ? ((g.dx = b.parseShort()), (g.dy = b.parseShort()))
              : (g.matchedPoints = [b.parseUShort(), b.parseUShort()])
            : 0 < (2 & e)
            ? ((g.dx = b.parseChar()), (g.dy = b.parseChar()))
            : (g.matchedPoints = [b.parseByte(), b.parseByte()]),
          0 < (8 & e)
            ? (g.xScale = g.yScale = b.parseF2Dot14())
            : 0 < (64 & e)
            ? ((g.xScale = b.parseF2Dot14()), (g.yScale = b.parseF2Dot14()))
            : 0 < (128 & e) &&
              ((g.xScale = b.parseF2Dot14()),
              (g.scale01 = b.parseF2Dot14()),
              (g.scale10 = b.parseF2Dot14()),
              (g.yScale = b.parseF2Dot14())),
          a.components.push(g),
          (g = !!(32 & e));
      if (256 & e)
        for (
          a.instructionLength = b.parseUShort(), a.instructions = [], e = 0;
          e < a.instructionLength;
          e += 1
        )
          a.instructions.push(b.parseByte());
    }
  }
  function Qa(a, b) {
    for (var c = [], e = 0; e < a.length; e += 1) {
      var g = a[e];
      c.push({
        x: b.xScale * g.x + b.scale01 * g.y + b.dx,
        y: b.scale10 * g.x + b.yScale * g.y + b.dy,
        onCurve: g.onCurve,
        lastPointOfContour: g.lastPointOfContour,
      });
    }
    return c;
  }
  function Ib(a) {
    var b = new J();
    if (!a) return b;
    for (var c = [], e = [], g = 0; g < a.length; g += 1) {
      var d = a[g];
      e.push(d);
      d.lastPointOfContour && (c.push(e), (e = []));
    }
    a = (z.argument(0 === e.length, 'There are still points left in the current contour.'), c);
    for (c = 0; c < a.length; ++c) {
      e = a[c];
      d = e[e.length - 1];
      var n = e[0];
      d.onCurve
        ? b.moveTo(d.x, d.y)
        : n.onCurve
        ? b.moveTo(n.x, n.y)
        : b.moveTo(0.5 * (d.x + n.x), 0.5 * (d.y + n.y));
      for (var f = 0; f < e.length; ++f)
        if (((g = d), (d = n), (n = e[(f + 1) % e.length]), d.onCurve)) b.lineTo(d.x, d.y);
        else {
          var m = n;
          g.onCurve || { x: 0.5 * (d.x + g.x), y: 0.5 * (d.y + g.y) };
          n.onCurve || (m = { x: 0.5 * (d.x + n.x), y: 0.5 * (d.y + n.y) });
          b.quadraticCurveTo(d.x, d.y, m.x, m.y);
        }
      b.closePath();
    }
    return b;
  }
  function Cc(a, b) {
    if (b.isComposite)
      for (var c = 0; c < b.components.length; c += 1) {
        var e = b.components[c],
          g = a.get(e.glyphIndex);
        if ((g.getPath(), g.points)) {
          if (void 0 === e.matchedPoints) g = Qa(g.points, e);
          else {
            if (
              e.matchedPoints[0] > b.points.length - 1 ||
              e.matchedPoints[1] > g.points.length - 1
            )
              throw Error('Matched points out of range in ' + b.name);
            var d = b.points[e.matchedPoints[0]],
              n = g.points[e.matchedPoints[1]];
            e = {
              xScale: e.xScale,
              scale01: e.scale01,
              scale10: e.scale10,
              yScale: e.yScale,
              dx: 0,
              dy: 0,
            };
            n = Qa([n], e)[0];
            e.dx = d.x - n.x;
            e.dy = d.y - n.y;
            g = Qa(g.points, e);
          }
          b.points = b.points.concat(g);
        }
      }
    return Ib(b.points);
  }
  function Jb(a) {
    this.font = a;
    this.getCommands = function(a) {
      return Kb.getPath(a).commands;
    };
    this._fpgmState = this._prepState = void 0;
    this._errorState = 0;
  }
  function Dc(a) {
    return a;
  }
  function Lb(a) {
    return Math.sign(a) * Math.round(Math.abs(a));
  }
  function Ec(a) {
    return (Math.sign(a) * Math.round(Math.abs(2 * a))) / 2;
  }
  function Fc(a) {
    return Math.sign(a) * (Math.round(Math.abs(a) + 0.5) - 0.5);
  }
  function Gc(a) {
    return Math.sign(a) * Math.ceil(Math.abs(a));
  }
  function Hc(a) {
    return Math.sign(a) * Math.floor(Math.abs(a));
  }
  function pa(a, b) {
    this.x = a;
    this.y = b;
    this.axis = void 0;
    this.slope = b / a;
    this.normalSlope = -a / b;
    Object.freeze(this);
  }
  function qa(a, b) {
    var c = Math.sqrt(a * a + b * b);
    return (b /= c), 1 === (a /= c) && 0 === b ? V : 0 === a && 1 === b ? X : new pa(a, b);
  }
  function Y(a, b, c, e) {
    this.x = this.xo = Math.round(64 * a) / 64;
    this.y = this.yo = Math.round(64 * b) / 64;
    this.lastPointOfContour = c;
    this.onCurve = e;
    this.nextPointOnContour = this.prevPointOnContour = void 0;
    this.yTouched = this.xTouched = !1;
    Object.preventExtensions(this);
  }
  function ba(a, b) {
    switch (((this.env = a), (this.stack = []), (this.prog = b), a)) {
      case 'glyf':
        (this.zp0 = this.zp1 = this.zp2 = 1), (this.rp0 = this.rp1 = this.rp2 = 0);
      case 'prep':
        (this.fv = this.pv = this.dpv = V), (this.round = Lb);
    }
  }
  function Aa(a) {
    a = a.tZone = Array(a.gZone.length);
    for (var b = 0; b < a.length; b++) a[b] = new Y(0, 0);
  }
  function Mb(a, b) {
    var c,
      e = a.prog,
      g = a.ip,
      d = 1;
    do
      if (88 === (c = e[++g])) d++;
      else if (89 === c) d--;
      else if (64 === c) g += e[g + 1] + 1;
      else if (65 === c) g += 2 * e[g + 1] + 1;
      else if (176 <= c && 183 >= c) g += c - 176 + 1;
      else if (184 <= c && 191 >= c) g += 2 * (c - 184 + 1);
      else if (b && 1 === d && 27 === c) break;
    while (0 < d);
    a.ip = g;
  }
  function Nb(a, b) {
    d.DEBUG && console.log(b.step, 'SVTCA[' + a.axis + ']');
    b.fv = b.pv = b.dpv = a;
  }
  function Ob(a, b) {
    d.DEBUG && console.log(b.step, 'SPVTCA[' + a.axis + ']');
    b.pv = b.dpv = a;
  }
  function Pb(a, b) {
    d.DEBUG && console.log(b.step, 'SFVTCA[' + a.axis + ']');
    b.fv = a;
  }
  function Qb(a, b) {
    var c,
      e,
      g = b.stack,
      r = g.pop();
    g = g.pop();
    var n = b.z2[r],
      f = b.z1[g];
    d.DEBUG && console.log('SPVTL[' + a + ']', r, g);
    a ? ((c = n.y - f.y), (e = f.x - n.x)) : ((c = f.x - n.x), (e = f.y - n.y));
    b.pv = b.dpv = qa(c, e);
  }
  function Rb(a, b) {
    var c,
      e,
      g = b.stack,
      r = g.pop();
    g = g.pop();
    var n = b.z2[r],
      f = b.z1[g];
    d.DEBUG && console.log('SFVTL[' + a + ']', r, g);
    a ? ((c = n.y - f.y), (e = f.x - n.x)) : ((c = f.x - n.x), (e = f.y - n.y));
    b.fv = qa(c, e);
  }
  function Ra(a) {
    d.DEBUG && console.log(a.step, 'POP[]');
    a.stack.pop();
  }
  function Sb(a, b) {
    var c = b.stack.pop(),
      e = b.z0[c],
      g = b.fv,
      r = b.pv;
    d.DEBUG && console.log(b.step, 'MDAP[' + a + ']', c);
    var n = r.distance(e, ra);
    a && (n = b.round(n));
    g.setRelative(e, ra, n, r);
    g.touch(e);
    b.rp0 = b.rp1 = c;
  }
  function Tb(a, b) {
    var c,
      e,
      g = b.z2,
      r = g.length - 2;
    d.DEBUG && console.log(b.step, 'IUP[' + a.axis + ']');
    for (var n = 0; n < r; n++)
      (b = g[n]),
        a.touched(b) ||
          ((c = b.prevTouched(a)) !== b &&
            (c === (e = b.nextTouched(a)) && a.setRelative(b, b, a.distance(c, c, !1, !0), a, !0),
            a.interpolate(b, c, e, a)));
  }
  function Ub(a, b) {
    for (
      var c = b.stack,
        e = (a ? b.z0 : b.z1)[a ? b.rp1 : b.rp2],
        g = b.fv,
        r = b.pv,
        n = b.loop,
        f = b.z2;
      n--;

    ) {
      var m = c.pop(),
        h = f[m],
        p = r.distance(e, e, !1, !0);
      g.setRelative(h, h, p, r);
      g.touch(h);
      d.DEBUG &&
        console.log(
          b.step,
          (1 < b.loop ? 'loop ' + (b.loop - n) + ': ' : '') + 'SHP[' + (a ? 'rp1' : 'rp2') + ']',
          m
        );
    }
    b.loop = 1;
  }
  function Vb(a, b) {
    var c = (a ? b.z0 : b.z1)[a ? b.rp1 : b.rp2],
      e = b.fv,
      g = b.pv,
      r = b.stack.pop(),
      n = b.z2[b.contours[r]],
      f = n;
    d.DEBUG && console.log(b.step, 'SHC[' + a + ']', r);
    for (
      a = g.distance(c, c, !1, !0);
      f !== c && e.setRelative(f, f, a, g), (f = f.nextPointOnContour) !== n;

    );
  }
  function Wb(a, b) {
    var c = (a ? b.z0 : b.z1)[a ? b.rp1 : b.rp2];
    var e = b.fv,
      g = b.pv,
      r = b.stack.pop();
    switch ((d.DEBUG && console.log(b.step, 'SHZ[' + a + ']', r), r)) {
      case 0:
        a = b.tZone;
        break;
      case 1:
        a = b.gZone;
        break;
      default:
        throw Error('Invalid zone');
    }
    b = g.distance(c, c, !1, !0);
    r = a.length - 2;
    for (var n = 0; n < r; n++) (c = a[n]), e.setRelative(c, c, b, g);
  }
  function Xb(a, b) {
    var c = b.stack,
      e = c.pop() / 64;
    c = c.pop();
    var g = b.z1[c],
      r = b.fv;
    r.setRelative(g, b.z0[b.rp0], e, b.pv);
    r.touch(g);
    d.DEBUG && console.log(b.step, 'MSIRP[' + a + ']', e, c);
    b.rp1 = b.rp0;
    b.rp2 = c;
    a && (b.rp0 = c);
  }
  function Yb(a, b) {
    var c = b.stack,
      e = c.pop();
    c = c.pop();
    var g = b.z0[c],
      r = b.fv,
      n = b.pv,
      f = b.cvt[e];
    d.DEBUG && console.log(b.step, 'MIAP[' + a + ']', e, '(', f, ')', c);
    e = n.distance(g, ra);
    a && (Math.abs(e - f) < b.cvCutIn && (e = f), (e = b.round(e)));
    r.setRelative(g, ra, e, n);
    0 === b.zp0 && ((g.xo = g.x), (g.yo = g.y));
    r.touch(g);
    b.rp0 = b.rp1 = c;
  }
  function Zb(a, b) {
    var c = b.stack,
      e = c.pop(),
      g = b.z2[e];
    d.DEBUG && console.log(b.step, 'GC[' + a + ']', e);
    c.push(64 * b.dpv.distance(g, ra, a, !1));
  }
  function $b(a, b) {
    var c = b.stack,
      e = c.pop();
    c = c.pop();
    var g = b.dpv.distance(b.z0[c], b.z1[e], a, a);
    d.DEBUG && console.log(b.step, 'MD[' + a + ']', e, c, '->', g);
    b.stack.push(Math.round(64 * g));
  }
  function Sa(a, b) {
    var c = b.stack,
      e = c.pop(),
      g = b.fv,
      r = b.pv,
      n = b.ppem,
      f = b.deltaBase + 16 * (a - 1),
      m = b.deltaShift,
      h = b.z0;
    d.DEBUG && console.log(b.step, 'DELTAP[' + a + ']', e, c);
    for (a = 0; a < e; a++) {
      var p = c.pop(),
        k = c.pop();
      f + ((240 & k) >> 4) === n &&
        ((k = (15 & k) - 8),
        0 <= k && k++,
        d.DEBUG && console.log(b.step, 'DELTAPFIX', p, 'by', k * m),
        (p = h[p]),
        g.setRelative(p, p, k * m, r));
    }
  }
  function Ba(a, b) {
    a = b.stack;
    var c = a.pop();
    d.DEBUG && console.log(b.step, 'ROUND[]');
    a.push(64 * b.round(c / 64));
  }
  function Ta(a, b) {
    var c = b.stack,
      e = c.pop(),
      g = b.ppem,
      r = b.deltaBase + 16 * (a - 1),
      n = b.deltaShift;
    d.DEBUG && console.log(b.step, 'DELTAC[' + a + ']', e, c);
    for (a = 0; a < e; a++) {
      var f = c.pop(),
        m = c.pop();
      r + ((240 & m) >> 4) === g &&
        ((m = (15 & m) - 8),
        0 <= m && m++,
        (m *= n),
        d.DEBUG && console.log(b.step, 'DELTACFIX', f, 'by', m),
        (b.cvt[f] += m));
    }
  }
  function ac(a, b) {
    var c,
      e,
      g = b.stack,
      r = g.pop();
    g = g.pop();
    var n = b.z2[r],
      f = b.z1[g];
    d.DEBUG && console.log(b.step, 'SDPVTL[' + a + ']', r, g);
    a ? ((c = n.y - f.y), (e = f.x - n.x)) : ((c = f.x - n.x), (e = f.y - n.y));
    b.dpv = qa(c, e);
  }
  function ca(a, b) {
    var c = b.stack,
      e = b.prog,
      g = b.ip;
    d.DEBUG && console.log(b.step, 'PUSHB[' + a + ']');
    for (var r = 0; r < a; r++) c.push(e[++g]);
    b.ip = g;
  }
  function da(a, b) {
    var c = b.ip,
      e = b.prog,
      g = b.stack;
    d.DEBUG && console.log(b.ip, 'PUSHW[' + a + ']');
    for (var r = 0; r < a; r++) {
      var n = (e[++c] << 8) | e[++c];
      32768 & n && (n = -(1 + (65535 ^ n)));
      g.push(n);
    }
    b.ip = c;
  }
  function t(a, b, c, e, g, r) {
    var n, f;
    var m = r.stack;
    var h = a && m.pop(),
      p = m.pop(),
      k = r.z0[r.rp0],
      l = r.z1[p],
      E = r.minDis,
      q = r.fv,
      x = r.dpv;
    var u = 0 <= (n = m = x.distance(l, k, !0, !0)) ? 1 : -1;
    n = Math.abs(n);
    a && ((f = r.cvt[h]), e && Math.abs(n - f) < r.cvCutIn && (n = f));
    c && n < E && (n = E);
    e && (n = r.round(n));
    q.setRelative(l, k, u * n, x);
    q.touch(l);
    d.DEBUG &&
      console.log(
        r.step,
        (a ? 'MIRP[' : 'MDRP[') +
          (b ? 'M' : 'm') +
          (c ? '>' : '_') +
          (e ? 'R' : '_') +
          (0 === g ? 'Gr' : 1 === g ? 'Bl' : 2 === g ? 'Wh' : '') +
          ']',
        a ? h + '(' + r.cvt[h] + ',' + f + ')' : '',
        p,
        '(d =',
        m,
        '->',
        u * n,
        ')'
      );
    r.rp1 = r.rp0;
    r.rp2 = p;
    b && (r.rp0 = p);
  }
  function H(a) {
    (a = a || {}).empty ||
      (ha(a.familyName, 'When creating a new Font object, familyName is required.'),
      ha(a.styleName, 'When creating a new Font object, styleName is required.'),
      ha(a.unitsPerEm, 'When creating a new Font object, unitsPerEm is required.'),
      ha(a.ascender, 'When creating a new Font object, ascender is required.'),
      ha(a.descender, 'When creating a new Font object, descender is required.'),
      ha(0 > a.descender, 'Descender should be negative (e.g. -512).'),
      (this.names = {
        fontFamily: { en: a.familyName || ' ' },
        fontSubfamily: { en: a.styleName || ' ' },
        fullName: { en: a.fullName || a.familyName + ' ' + a.styleName },
        postScriptName: { en: a.postScriptName || (a.familyName + a.styleName).replace(/\s/g, '') },
        designer: { en: a.designer || ' ' },
        designerURL: { en: a.designerURL || ' ' },
        manufacturer: { en: a.manufacturer || ' ' },
        manufacturerURL: { en: a.manufacturerURL || ' ' },
        license: { en: a.license || ' ' },
        licenseURL: { en: a.licenseURL || ' ' },
        version: { en: a.version || 'Version 0.1' },
        description: { en: a.description || ' ' },
        copyright: { en: a.copyright || ' ' },
        trademark: { en: a.trademark || ' ' },
      }),
      (this.unitsPerEm = a.unitsPerEm || 1e3),
      (this.ascender = a.ascender),
      (this.descender = a.descender),
      (this.createdTimestamp = a.createdTimestamp),
      (this.tables = {
        os2: {
          usWeightClass: a.weightClass || this.usWeightClasses.MEDIUM,
          usWidthClass: a.widthClass || this.usWidthClasses.MEDIUM,
          fsSelection: a.fsSelection || this.fsSelectionValues.REGULAR,
        },
      }));
    this.supported = !0;
    this.glyphs = new ia.GlyphSet(this, a.glyphs || []);
    this.encoding = new ib(this);
    this.position = new za(this);
    this.substitution = new U(this);
    this.tables = this.tables || {};
    Object.defineProperty(this, 'hinting', {
      get: function() {
        return this._hinting
          ? this._hinting
          : 'truetype' === this.outlinesFormat
          ? (this._hinting = new Jb(this))
          : void 0;
      },
    });
  }
  function bc(a, b) {
    var c = JSON.stringify(a),
      e = 256,
      g;
    for (g in b) {
      var d = parseInt(g);
      if (d && !(256 > d)) {
        if (JSON.stringify(b[g]) === c) return d;
        e <= d && (e = d + 1);
      }
    }
    return (b[e] = a), e;
  }
  function Ic(a, b, c, e) {
    e = [
      { name: 'nameID_' + a, type: 'USHORT', value: bc(b.name, e) },
      { name: 'flags_' + a, type: 'USHORT', value: 0 },
    ];
    for (var g = 0; g < c.length; ++g) {
      var d = c[g].tag;
      e.push({ name: 'axis_' + a + ' ' + d, type: 'FIXED', value: b.coordinates[d] << 16 });
    }
    return e;
  }
  function Jc(a, b, c, e) {
    var g = {};
    a = new y.Parser(a, b);
    g.name = e[a.parseUShort()] || {};
    a.skip('uShort', 1);
    g.coordinates = {};
    for (e = 0; e < c.length; ++e) g.coordinates[c[e].tag] = a.parseFixed();
    return g;
  }
  function Kc(a, b) {
    require('fs').readFile(a, function(a, e) {
      if (a) return b(a.message);
      b(null, Gb(e));
    });
  }
  function Lc(a, b) {
    var c = new XMLHttpRequest();
    c.open('get', a, !0);
    c.responseType = 'arraybuffer';
    c.onload = function() {
      return c.response ? b(null, c.response) : b('Font could not be loaded: ' + c.statusText);
    };
    c.onerror = function() {
      b('Font could not be loaded');
    };
    c.send();
  }
  function cc(a, b) {
    for (var c = [], e = 12, g = 0; g < b; g += 1) {
      var d = y.getTag(a, e),
        n = y.getULong(a, e + 4),
        f = y.getULong(a, e + 8),
        m = y.getULong(a, e + 12);
      c.push({ tag: d, checksum: n, offset: f, length: m, compression: !1 });
      e += 16;
    }
    return c;
  }
  function L(a, b) {
    if ('WOFF' === b.compression) {
      var c = new Uint8Array(a.buffer, b.offset + 2, b.compressedLength - 2);
      a = new Uint8Array(b.length);
      c = new h(c, a);
      do {
        var e = c;
        e.bitcount-- || ((e.tag = e.source[e.sourceIndex++]), (e.bitcount = 7));
        var g = 1 & e.tag;
        switch (((e = ((e.tag >>>= 1), g)), w(c, 2, 0))) {
          case 0:
            var d;
            for (g = c; 8 < g.bitcount; ) g.sourceIndex--, (g.bitcount -= 8);
            if (
              (d = 256 * (d = g.source[g.sourceIndex + 1]) + g.source[g.sourceIndex]) !==
              (65535 & ~(256 * g.source[g.sourceIndex + 3] + g.source[g.sourceIndex + 2]))
            )
              g = -3;
            else {
              for (g.sourceIndex += 4; d; --d) g.dest[g.destLen++] = g.source[g.sourceIndex++];
              g = ((g.bitcount = 0), 0);
            }
            break;
          case 1:
            g = F(c, dc, ec);
            break;
          case 2:
            var n,
              f = c,
              m = c.ltree,
              D = c.dtree;
            d = w(f, 5, 257);
            g = w(f, 5, 1);
            var p = w(f, 4, 4);
            for (n = 0; 19 > n; ++n) W[n] = 0;
            for (n = 0; n < p; ++n) {
              var k = w(f, 3, 0);
              W[Mc[n]] = k;
            }
            q(fc, W, 0, 19);
            for (n = 0; n < d + g; )
              switch (((p = v(f, fc)), p)) {
                case 16:
                  k = W[n - 1];
                  for (p = w(f, 2, 3); p; --p) W[n++] = k;
                  break;
                case 17:
                  for (p = w(f, 3, 3); p; --p) W[n++] = 0;
                  break;
                case 18:
                  for (p = w(f, 7, 11); p; --p) W[n++] = 0;
                  break;
                default:
                  W[n++] = p;
              }
            q(m, W, 0, d);
            q(D, W, d, g);
            g = F(c, c.ltree, c.dtree);
            break;
          default:
            g = -3;
        }
        if (0 !== g) throw Error('Data error');
      } while (!e);
      c.destLen < c.dest.length &&
        ('function' == typeof c.dest.slice
          ? c.dest.slice(0, c.destLen)
          : c.dest.subarray(0, c.destLen));
      if (a.byteLength !== b.length)
        throw Error(
          'Decompression error: ' + b.tag + " decompressed length doesn't match recorded length"
        );
      return { data: new DataView(a.buffer, 0), offset: 0 };
    }
    return { data: a, offset: b.offset };
  }
  function Ua(a) {
    var b = new H({ empty: !0 });
    a = new DataView(a, 0);
    var c = [];
    var e = y.getTag(a, 0);
    if (e === String.fromCharCode(0, 1, 0, 0) || 'true' === e || 'typ1' === e)
      (b.outlinesFormat = 'truetype'), (c = cc(a, (e = y.getUShort(a, 4))));
    else if ('OTTO' === e) (b.outlinesFormat = 'cff'), (c = cc(a, (e = y.getUShort(a, 4))));
    else {
      if ('wOFF' !== e) throw Error('Unsupported OpenType signature ' + e);
      c = y.getTag(a, 4);
      if (c === String.fromCharCode(0, 1, 0, 0)) b.outlinesFormat = 'truetype';
      else {
        if ('OTTO' !== c) throw Error('Unsupported OpenType flavor ' + e);
        b.outlinesFormat = 'cff';
      }
      c = (function(a, b) {
        for (var c = [], e = 44, g = 0; g < b; g += 1) {
          var d = y.getTag(a, e),
            f = y.getULong(a, e + 4),
            r = y.getULong(a, e + 8),
            n = y.getULong(a, e + 12);
          c.push({
            tag: d,
            offset: f,
            compression: r < n && 'WOFF',
            compressedLength: r,
            length: n,
          });
          e += 20;
        }
        return c;
      })(a, (e = y.getUShort(a, 12)));
    }
    for (var g = 0; g < e; g += 1) {
      var d = c[g];
      var n = void 0;
      switch (d.tag) {
        case 'cmap':
          n = L(a, d);
          b.tables.cmap = gc.parse(n.data, n.offset);
          b.encoding = new jb(b.tables.cmap);
          break;
        case 'cvt ':
          n = L(a, d);
          n = new y.Parser(n.data, n.offset);
          b.tables.cvt = n.parseShortList(d.length / 2);
          break;
        case 'fvar':
          var f = d;
          break;
        case 'fpgm':
          n = L(a, d);
          n = new y.Parser(n.data, n.offset);
          b.tables.fpgm = n.parseByteList(d.length);
          break;
        case 'head':
          n = L(a, d);
          b.tables.head = hc.parse(n.data, n.offset);
          b.unitsPerEm = b.tables.head.unitsPerEm;
          var m = b.tables.head.indexToLocFormat;
          break;
        case 'hhea':
          n = L(a, d);
          b.tables.hhea = ic.parse(n.data, n.offset);
          b.ascender = b.tables.hhea.ascender;
          b.descender = b.tables.hhea.descender;
          b.numberOfHMetrics = b.tables.hhea.numberOfHMetrics;
          break;
        case 'hmtx':
          var h = d;
          break;
        case 'ltag':
          n = L(a, d);
          var p = jc.parse(n.data, n.offset);
          break;
        case 'maxp':
          n = L(a, d);
          b.tables.maxp = kc.parse(n.data, n.offset);
          b.numGlyphs = b.tables.maxp.numGlyphs;
          break;
        case 'name':
          var k = d;
          break;
        case 'OS/2':
          n = L(a, d);
          b.tables.os2 = Va.parse(n.data, n.offset);
          break;
        case 'post':
          n = L(a, d);
          b.tables.post = lc.parse(n.data, n.offset);
          b.glyphNames = new Ka(b.tables.post);
          break;
        case 'prep':
          n = L(a, d);
          n = new y.Parser(n.data, n.offset);
          b.tables.prep = n.parseByteList(d.length);
          break;
        case 'glyf':
          var l = d;
          break;
        case 'loca':
          var E = d;
          break;
        case 'CFF ':
          var q = d;
          break;
        case 'kern':
          var x = d;
          break;
        case 'GPOS':
          var u = d;
          break;
        case 'GSUB':
          var t = d;
          break;
        case 'meta':
          var w = d;
      }
    }
    k = L(a, k);
    if (((b.tables.name = mc.parse(k.data, k.offset, p)), (b.names = b.tables.name), l && E))
      (m = 0 === m),
        (E = L(a, E)),
        (E = Nc.parse(E.data, E.offset, b.numGlyphs, m)),
        (l = L(a, l)),
        (b.glyphs = Kb.parse(l.data, l.offset, E, b));
    else {
      if (!q) throw Error("Font doesn't contain TrueType or CFF outlines.");
      l = L(a, q);
      nc.parse(l.data, l.offset, b);
    }
    h = L(a, h);
    (oc.parse(h.data, h.offset, b.numberOfHMetrics, b.numGlyphs, b.glyphs),
    (function(a) {
      var b = a.tables.cmap.glyphIndexMap;
      for (var c = Object.keys(b), e = 0; e < c.length; e += 1) {
        var g = c[e];
        a.glyphs.get(b[g]).addUnicode(parseInt(g));
      }
      for (c = 0; c < a.glyphs.length; c += 1)
        (b = a.glyphs.get(c)),
          a.cffEncoding
            ? a.isCIDFont
              ? (b.name = 'gid' + c)
              : (b.name = a.cffEncoding.charset[c])
            : a.glyphNames.names && (b.name = a.glyphNames.glyphIndexToName(c));
    })(b),
    x)
      ? ((x = L(a, x)), (b.kerningPairs = Oc.parse(x.data, x.offset)))
      : (b.kerningPairs = {});
    u && ((u = L(a, u)), (b.tables.gpos = Pc.parse(u.data, u.offset)), b.position.init());
    t && ((t = L(a, t)), (b.tables.gsub = pc.parse(t.data, t.offset)));
    f && ((f = L(a, f)), (b.tables.fvar = Qc.parse(f.data, f.offset, b.names)));
    w && ((w = L(a, w)), (b.tables.meta = qc.parse(w.data, w.offset)), (b.metas = b.tables.meta));
    return b;
  }
  var Wa, Xa;
  String.prototype.codePointAt ||
    ((Wa = (function() {
      try {
        var a = {},
          b = Object.defineProperty,
          c = b(a, a, a) && b;
      } catch (e) {}
      return c;
    })()),
    (Xa = function(a) {
      if (null == this) throw TypeError();
      var b = String(this),
        c = b.length;
      a = a ? Number(a) : 0;
      if ((a != a && (a = 0), !(0 > a || c <= a))) {
        var e,
          g = b.charCodeAt(a);
        return 55296 <= g &&
          56319 >= g &&
          a + 1 < c &&
          56320 <= (e = b.charCodeAt(a + 1)) &&
          57343 >= e
          ? 1024 * (g - 55296) + e - 56320 + 65536
          : g;
      }
    }),
    Wa
      ? Wa(String.prototype, 'codePointAt', { value: Xa, configurable: !0, writable: !0 })
      : (String.prototype.codePointAt = Xa));
  var dc = new f(),
    ec = new f(),
    Ha = new Uint8Array(30),
    Ia = new Uint16Array(30),
    ab = new Uint8Array(30),
    bb = new Uint16Array(30),
    Mc = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]),
    fc = new f(),
    W = new Uint8Array(320),
    $a = new Uint16Array(16);
  !(function(a, b) {
    var c;
    for (c = 0; 7 > c; ++c) a.table[c] = 0;
    a.table[7] = 24;
    a.table[8] = 152;
    a.table[9] = 112;
    for (c = 0; 24 > c; ++c) a.trans[c] = 256 + c;
    for (c = 0; 144 > c; ++c) a.trans[24 + c] = c;
    for (c = 0; 8 > c; ++c) a.trans[168 + c] = 280 + c;
    for (c = 0; 112 > c; ++c) a.trans[176 + c] = 144 + c;
    for (c = 0; 5 > c; ++c) b.table[c] = 0;
    b.table[5] = 32;
    for (c = 0; 32 > c; ++c) b.trans[c] = c;
  })(dc, ec);
  k(Ha, Ia, 4, 3);
  k(ab, bb, 2, 1);
  Ha[28] = 0;
  Ia[28] = 258;
  I.prototype.isEmpty = function() {
    return isNaN(this.x1) || isNaN(this.y1) || isNaN(this.x2) || isNaN(this.y2);
  };
  I.prototype.addPoint = function(a, b) {
    'number' == typeof a &&
      ((isNaN(this.x1) || isNaN(this.x2)) && ((this.x1 = a), (this.x2 = a)),
      a < this.x1 && (this.x1 = a),
      a > this.x2 && (this.x2 = a));
    'number' == typeof b &&
      ((isNaN(this.y1) || isNaN(this.y2)) && ((this.y1 = b), (this.y2 = b)),
      b < this.y1 && (this.y1 = b),
      b > this.y2 && (this.y2 = b));
  };
  I.prototype.addX = function(a) {
    this.addPoint(a, null);
  };
  I.prototype.addY = function(a) {
    this.addPoint(null, a);
  };
  I.prototype.addBezier = function(a, b, c, e, g, d, f, h) {
    var r = [a, b];
    c = [c, e];
    g = [g, d];
    d = [f, h];
    this.addPoint(a, b);
    this.addPoint(f, h);
    for (a = 0; 1 >= a; a++)
      (b = 6 * r[a] - 12 * c[a] + 6 * g[a]),
        (f = -3 * r[a] + 9 * c[a] - 9 * g[a] + 3 * d[a]),
        (h = 3 * c[a] - 3 * r[a]),
        0 !== f
          ? ((h = Math.pow(b, 2) - 4 * h * f),
            0 > h ||
              ((e = (-b + Math.sqrt(h)) / (2 * f)),
              0 < e &&
                1 > e &&
                (0 === a && this.addX(G(r[a], c[a], g[a], d[a], e)),
                1 === a && this.addY(G(r[a], c[a], g[a], d[a], e))),
              (b = (-b - Math.sqrt(h)) / (2 * f)),
              0 < b &&
                1 > b &&
                (0 === a && this.addX(G(r[a], c[a], g[a], d[a], b)),
                1 === a && this.addY(G(r[a], c[a], g[a], d[a], b)))))
          : 0 !== b &&
            ((b = -h / b),
            0 < b &&
              1 > b &&
              (0 === a && this.addX(G(r[a], c[a], g[a], d[a], b)),
              1 === a && this.addY(G(r[a], c[a], g[a], d[a], b))));
  };
  I.prototype.addQuad = function(a, b, c, e, g, d) {
    c = a + (2 / 3) * (c - a);
    e = b + (2 / 3) * (e - b);
    this.addBezier(a, b, c, e, c + (1 / 3) * (g - a), e + (1 / 3) * (d - b), g, d);
  };
  J.prototype.moveTo = function(a, b) {
    this.commands.push({ type: 'M', x: a, y: b });
  };
  J.prototype.lineTo = function(a, b) {
    this.commands.push({ type: 'L', x: a, y: b });
  };
  J.prototype.curveTo = J.prototype.bezierCurveTo = function(a, b, c, e, g, d) {
    this.commands.push({ type: 'C', x1: a, y1: b, x2: c, y2: e, x: g, y: d });
  };
  J.prototype.quadTo = J.prototype.quadraticCurveTo = function(a, b, c, e) {
    this.commands.push({ type: 'Q', x1: a, y1: b, x: c, y: e });
  };
  J.prototype.close = J.prototype.closePath = function() {
    this.commands.push({ type: 'Z' });
  };
  J.prototype.extend = function(a) {
    if (a.commands) a = a.commands;
    else if (a instanceof I)
      return (
        this.moveTo(a.x1, a.y1),
        this.lineTo(a.x2, a.y1),
        this.lineTo(a.x2, a.y2),
        this.lineTo(a.x1, a.y2),
        void this.close()
      );
    Array.prototype.push.apply(this.commands, a);
  };
  J.prototype.getBoundingBox = function() {
    for (var a = new I(), b = 0, c = 0, e = 0, g = 0, d = 0; d < this.commands.length; d++) {
      var f = this.commands[d];
      switch (f.type) {
        case 'M':
          a.addPoint(f.x, f.y);
          b = e = f.x;
          c = g = f.y;
          break;
        case 'L':
          a.addPoint(f.x, f.y);
          e = f.x;
          g = f.y;
          break;
        case 'Q':
          a.addQuad(e, g, f.x1, f.y1, f.x, f.y);
          e = f.x;
          g = f.y;
          break;
        case 'C':
          a.addBezier(e, g, f.x1, f.y1, f.x2, f.y2, f.x, f.y);
          e = f.x;
          g = f.y;
          break;
        case 'Z':
          e = b;
          g = c;
          break;
        default:
          throw Error('Unexpected path command ' + f.type);
      }
    }
    return a.isEmpty() && a.addPoint(0, 0), a;
  };
  J.prototype.draw = function(a) {
    a.beginPath();
    for (var b = 0; b < this.commands.length; b += 1) {
      var c = this.commands[b];
      'M' === c.type
        ? a.moveTo(c.x, c.y)
        : 'L' === c.type
        ? a.lineTo(c.x, c.y)
        : 'C' === c.type
        ? a.bezierCurveTo(c.x1, c.y1, c.x2, c.y2, c.x, c.y)
        : 'Q' === c.type
        ? a.quadraticCurveTo(c.x1, c.y1, c.x, c.y)
        : 'Z' === c.type && a.closePath();
    }
    this.fill && ((a.fillStyle = this.fill), a.fill());
    this.stroke && ((a.strokeStyle = this.stroke), (a.lineWidth = this.strokeWidth), a.stroke());
  };
  J.prototype.toPathData = function(a) {
    function b() {
      for (var b, c = arguments, e = '', g = 0; g < arguments.length; g += 1) {
        var d = c[g];
        0 <= d && 0 < g && (e += ' ');
        e += ((b = d), Math.round(b) === b ? '' + Math.round(b) : b.toFixed(a));
      }
      return e;
    }
    a = void 0 !== a ? a : 2;
    for (var c = '', e = 0; e < this.commands.length; e += 1) {
      var g = this.commands[e];
      'M' === g.type
        ? (c += 'M' + b(g.x, g.y))
        : 'L' === g.type
        ? (c += 'L' + b(g.x, g.y))
        : 'C' === g.type
        ? (c += 'C' + b(g.x1, g.y1, g.x2, g.y2, g.x, g.y))
        : 'Q' === g.type
        ? (c += 'Q' + b(g.x1, g.y1, g.x, g.y))
        : 'Z' === g.type && (c += 'Z');
    }
    return c;
  };
  J.prototype.toSVG = function(a) {
    var b = '<path d="';
    return (
      (b += this.toPathData(a)),
      (b += '"'),
      this.fill &&
        'black' !== this.fill &&
        (null === this.fill ? (b += ' fill="none"') : (b += ' fill="' + this.fill + '"')),
      this.stroke && (b += ' stroke="' + this.stroke + '" stroke-width="' + this.strokeWidth + '"'),
      b + '/>'
    );
  };
  J.prototype.toDOMElement = function(a) {
    a = this.toPathData(a);
    var b = document.createElementNS('http://www.w3.org/2000/svg', 'path');
    return b.setAttribute('d', a), b;
  };
  var z = { fail: K, argument: ma, assert: ma },
    ja = {},
    u = {},
    B = {};
  u.BYTE = function(a) {
    return z.argument(0 <= a && 255 >= a, 'Byte value should be between 0 and 255.'), [a];
  };
  B.BYTE = N(1);
  u.CHAR = function(a) {
    return [a.charCodeAt(0)];
  };
  B.CHAR = N(1);
  u.CHARARRAY = function(a) {
    for (var b = [], c = 0; c < a.length; c += 1) b[c] = a.charCodeAt(c);
    return b;
  };
  B.CHARARRAY = function(a) {
    return a.length;
  };
  u.USHORT = function(a) {
    return [(a >> 8) & 255, 255 & a];
  };
  B.USHORT = N(2);
  u.SHORT = function(a) {
    return 32768 <= a && (a = -(65536 - a)), [(a >> 8) & 255, 255 & a];
  };
  B.SHORT = N(2);
  u.UINT24 = function(a) {
    return [(a >> 16) & 255, (a >> 8) & 255, 255 & a];
  };
  B.UINT24 = N(3);
  u.ULONG = function(a) {
    return [(a >> 24) & 255, (a >> 16) & 255, (a >> 8) & 255, 255 & a];
  };
  B.ULONG = N(4);
  u.LONG = function(a) {
    return (
      2147483648 <= a && (a = -(4294967296 - a)),
      [(a >> 24) & 255, (a >> 16) & 255, (a >> 8) & 255, 255 & a]
    );
  };
  B.LONG = N(4);
  u.FIXED = u.ULONG;
  B.FIXED = B.ULONG;
  u.FWORD = u.SHORT;
  B.FWORD = B.SHORT;
  u.UFWORD = u.USHORT;
  B.UFWORD = B.USHORT;
  u.LONGDATETIME = function(a) {
    return [0, 0, 0, 0, (a >> 24) & 255, (a >> 16) & 255, (a >> 8) & 255, 255 & a];
  };
  B.LONGDATETIME = N(8);
  u.TAG = function(a) {
    return (
      z.argument(4 === a.length, 'Tag should be exactly 4 ASCII characters.'),
      [a.charCodeAt(0), a.charCodeAt(1), a.charCodeAt(2), a.charCodeAt(3)]
    );
  };
  B.TAG = N(4);
  u.Card8 = u.BYTE;
  B.Card8 = B.BYTE;
  u.Card16 = u.USHORT;
  B.Card16 = B.USHORT;
  u.OffSize = u.BYTE;
  B.OffSize = B.BYTE;
  u.SID = u.USHORT;
  B.SID = B.USHORT;
  u.NUMBER = function(a) {
    return -107 <= a && 107 >= a
      ? [a + 139]
      : 108 <= a && 1131 >= a
      ? [247 + ((a -= 108) >> 8), 255 & a]
      : -1131 <= a && -108 >= a
      ? [251 + ((a = -a - 108) >> 8), 255 & a]
      : -32768 <= a && 32767 >= a
      ? u.NUMBER16(a)
      : u.NUMBER32(a);
  };
  B.NUMBER = function(a) {
    return u.NUMBER(a).length;
  };
  u.NUMBER16 = function(a) {
    return [28, (a >> 8) & 255, 255 & a];
  };
  B.NUMBER16 = N(3);
  u.NUMBER32 = function(a) {
    return [29, (a >> 24) & 255, (a >> 16) & 255, (a >> 8) & 255, 255 & a];
  };
  B.NUMBER32 = N(5);
  u.REAL = function(a) {
    var b = a.toString(),
      c = /\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(b);
    c &&
      ((b = parseFloat('1e' + ((c[2] ? +c[2] : 0) + c[1].length))),
      (b = (Math.round(a * b) / b).toString()));
    a = '';
    c = 0;
    for (var e = b.length; c < e; c += 1) {
      var g = b[c];
      a += 'e' === g ? ('-' === b[++c] ? 'c' : 'b') : '.' === g ? 'a' : '-' === g ? 'e' : g;
    }
    b = [30];
    c = 0;
    for (e = (a += 1 & a.length ? 'f' : 'ff').length; c < e; c += 2)
      b.push(parseInt(a.substr(c, 2), 16));
    return b;
  };
  B.REAL = function(a) {
    return u.REAL(a).length;
  };
  u.NAME = u.CHARARRAY;
  B.NAME = B.CHARARRAY;
  u.STRING = u.CHARARRAY;
  B.STRING = B.CHARARRAY;
  ja.UTF8 = function(a, b, c) {
    for (var e = [], g = 0; g < c; g++, b += 1) e[g] = a.getUint8(b);
    return String.fromCharCode.apply(null, e);
  };
  ja.UTF16 = function(a, b, c) {
    var e = [];
    c /= 2;
    for (var g = 0; g < c; g++, b += 2) e[g] = a.getUint16(b);
    return String.fromCharCode.apply(null, e);
  };
  u.UTF16 = function(a) {
    for (var b = [], c = 0; c < a.length; c += 1) {
      var e = a.charCodeAt(c);
      b[b.length] = (e >> 8) & 255;
      b[b.length] = 255 & e;
    }
    return b;
  };
  B.UTF16 = function(a) {
    return 2 * a.length;
  };
  var Ya = {
    'x-mac-croatian':
      '\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\u2020\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u0160\u2122\u00b4\u00a8\u2260\u017d\u00d8\u221e\u00b1\u2264\u2265\u2206\u00b5\u2202\u2211\u220f\u0161\u222b\u00aa\u00ba\u03a9\u017e\u00f8\u00bf\u00a1\u00ac\u221a\u0192\u2248\u0106\u00ab\u010c\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\u0110\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\uf8ff\u00a9\u2044\u20ac\u2039\u203a\u00c6\u00bb\u2013\u00b7\u201a\u201e\u2030\u00c2\u0107\u00c1\u010d\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\u0111\u00d2\u00da\u00db\u00d9\u0131\u02c6\u02dc\u00af\u03c0\u00cb\u02da\u00b8\u00ca\u00e6\u02c7',
    'x-mac-cyrillic':
      '\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041a\u041b\u041c\u041d\u041e\u041f\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042a\u042b\u042c\u042d\u042e\u042f\u2020\u00b0\u0490\u00a3\u00a7\u2022\u00b6\u0406\u00ae\u00a9\u2122\u0402\u0452\u2260\u0403\u0453\u221e\u00b1\u2264\u2265\u0456\u00b5\u0491\u0408\u0404\u0454\u0407\u0457\u0409\u0459\u040a\u045a\u0458\u0405\u00ac\u221a\u0192\u2248\u2206\u00ab\u00bb\u2026\u00a0\u040b\u045b\u040c\u045c\u0455\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u201e\u040e\u045e\u040f\u045f\u2116\u0401\u0451\u044f\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043a\u043b\u043c\u043d\u043e\u043f\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044a\u044b\u044c\u044d\u044e',
    'x-mac-gaelic':
      '\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\u2020\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u00a9\u2122\u00b4\u00a8\u2260\u00c6\u00d8\u1e02\u00b1\u2264\u2265\u1e03\u010a\u010b\u1e0a\u1e0b\u1e1e\u1e1f\u0120\u0121\u1e40\u00e6\u00f8\u1e41\u1e56\u1e57\u027c\u0192\u017f\u1e60\u00ab\u00bb\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\u2013\u2014\u201c\u201d\u2018\u2019\u1e61\u1e9b\u00ff\u0178\u1e6a\u20ac\u2039\u203a\u0176\u0177\u1e6b\u00b7\u1ef2\u1ef3\u204a\u00c2\u00ca\u00c1\u00cb\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\u2663\u00d2\u00da\u00db\u00d9\u0131\u00dd\u00fd\u0174\u0175\u1e84\u1e85\u1e80\u1e81\u1e82\u1e83',
    'x-mac-greek':
      '\u00c4\u00b9\u00b2\u00c9\u00b3\u00d6\u00dc\u0385\u00e0\u00e2\u00e4\u0384\u00a8\u00e7\u00e9\u00e8\u00ea\u00eb\u00a3\u2122\u00ee\u00ef\u2022\u00bd\u2030\u00f4\u00f6\u00a6\u20ac\u00f9\u00fb\u00fc\u2020\u0393\u0394\u0398\u039b\u039e\u03a0\u00df\u00ae\u00a9\u03a3\u03aa\u00a7\u2260\u00b0\u00b7\u0391\u00b1\u2264\u2265\u00a5\u0392\u0395\u0396\u0397\u0399\u039a\u039c\u03a6\u03ab\u03a8\u03a9\u03ac\u039d\u00ac\u039f\u03a1\u2248\u03a4\u00ab\u00bb\u2026\u00a0\u03a5\u03a7\u0386\u0388\u0153\u2013\u2015\u201c\u201d\u2018\u2019\u00f7\u0389\u038a\u038c\u038e\u03ad\u03ae\u03af\u03cc\u038f\u03cd\u03b1\u03b2\u03c8\u03b4\u03b5\u03c6\u03b3\u03b7\u03b9\u03be\u03ba\u03bb\u03bc\u03bd\u03bf\u03c0\u03ce\u03c1\u03c3\u03c4\u03b8\u03c9\u03c2\u03c7\u03c5\u03b6\u03ca\u03cb\u0390\u03b0\u00ad',
    'x-mac-icelandic':
      '\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\u00dd\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u00a9\u2122\u00b4\u00a8\u2260\u00c6\u00d8\u221e\u00b1\u2264\u2265\u00a5\u00b5\u2202\u2211\u220f\u03c0\u222b\u00aa\u00ba\u03a9\u00e6\u00f8\u00bf\u00a1\u00ac\u221a\u0192\u2248\u2206\u00ab\u00bb\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\u00ff\u0178\u2044\u20ac\u00d0\u00f0\u00de\u00fe\u00fd\u00b7\u201a\u201e\u2030\u00c2\u00ca\u00c1\u00cb\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\uf8ff\u00d2\u00da\u00db\u00d9\u0131\u02c6\u02dc\u00af\u02d8\u02d9\u02da\u00b8\u02dd\u02db\u02c7',
    'x-mac-inuit':
      '\u1403\u1404\u1405\u1406\u140a\u140b\u1431\u1432\u1433\u1434\u1438\u1439\u1449\u144e\u144f\u1450\u1451\u1455\u1456\u1466\u146d\u146e\u146f\u1470\u1472\u1473\u1483\u148b\u148c\u148d\u148e\u1490\u1491\u00b0\u14a1\u14a5\u14a6\u2022\u00b6\u14a7\u00ae\u00a9\u2122\u14a8\u14aa\u14ab\u14bb\u14c2\u14c3\u14c4\u14c5\u14c7\u14c8\u14d0\u14ef\u14f0\u14f1\u14f2\u14f4\u14f5\u1505\u14d5\u14d6\u14d7\u14d8\u14da\u14db\u14ea\u1528\u1529\u152a\u152b\u152d\u2026\u00a0\u152e\u153e\u1555\u1556\u1557\u2013\u2014\u201c\u201d\u2018\u2019\u1558\u1559\u155a\u155d\u1546\u1547\u1548\u1549\u154b\u154c\u1550\u157f\u1580\u1581\u1582\u1583\u1584\u1585\u158f\u1590\u1591\u1592\u1593\u1594\u1595\u1671\u1672\u1673\u1674\u1675\u1676\u1596\u15a0\u15a1\u15a2\u15a3\u15a4\u15a5\u15a6\u157c\u0141\u0142',
    'x-mac-ce':
      '\u00c4\u0100\u0101\u00c9\u0104\u00d6\u00dc\u00e1\u0105\u010c\u00e4\u010d\u0106\u0107\u00e9\u0179\u017a\u010e\u00ed\u010f\u0112\u0113\u0116\u00f3\u0117\u00f4\u00f6\u00f5\u00fa\u011a\u011b\u00fc\u2020\u00b0\u0118\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u00a9\u2122\u0119\u00a8\u2260\u0123\u012e\u012f\u012a\u2264\u2265\u012b\u0136\u2202\u2211\u0142\u013b\u013c\u013d\u013e\u0139\u013a\u0145\u0146\u0143\u00ac\u221a\u0144\u0147\u2206\u00ab\u00bb\u2026\u00a0\u0148\u0150\u00d5\u0151\u014c\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\u014d\u0154\u0155\u0158\u2039\u203a\u0159\u0156\u0157\u0160\u201a\u201e\u0161\u015a\u015b\u00c1\u0164\u0165\u00cd\u017d\u017e\u016a\u00d3\u00d4\u016b\u016e\u00da\u016f\u0170\u0171\u0172\u0173\u00dd\u00fd\u0137\u017b\u0141\u017c\u0122\u02c7',
    macintosh:
      '\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\u2020\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u00a9\u2122\u00b4\u00a8\u2260\u00c6\u00d8\u221e\u00b1\u2264\u2265\u00a5\u00b5\u2202\u2211\u220f\u03c0\u222b\u00aa\u00ba\u03a9\u00e6\u00f8\u00bf\u00a1\u00ac\u221a\u0192\u2248\u2206\u00ab\u00bb\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\u00ff\u0178\u2044\u20ac\u2039\u203a\ufb01\ufb02\u2021\u00b7\u201a\u201e\u2030\u00c2\u00ca\u00c1\u00cb\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\uf8ff\u00d2\u00da\u00db\u00d9\u0131\u02c6\u02dc\u00af\u02d8\u02d9\u02da\u00b8\u02dd\u02db\u02c7',
    'x-mac-romanian':
      '\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\u2020\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u00a9\u2122\u00b4\u00a8\u2260\u0102\u0218\u221e\u00b1\u2264\u2265\u00a5\u00b5\u2202\u2211\u220f\u03c0\u222b\u00aa\u00ba\u03a9\u0103\u0219\u00bf\u00a1\u00ac\u221a\u0192\u2248\u2206\u00ab\u00bb\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\u00ff\u0178\u2044\u20ac\u2039\u203a\u021a\u021b\u2021\u00b7\u201a\u201e\u2030\u00c2\u00ca\u00c1\u00cb\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\uf8ff\u00d2\u00da\u00db\u00d9\u0131\u02c6\u02dc\u00af\u02d8\u02d9\u02da\u00b8\u02dd\u02db\u02c7',
    'x-mac-turkish':
      '\u00c4\u00c5\u00c7\u00c9\u00d1\u00d6\u00dc\u00e1\u00e0\u00e2\u00e4\u00e3\u00e5\u00e7\u00e9\u00e8\u00ea\u00eb\u00ed\u00ec\u00ee\u00ef\u00f1\u00f3\u00f2\u00f4\u00f6\u00f5\u00fa\u00f9\u00fb\u00fc\u2020\u00b0\u00a2\u00a3\u00a7\u2022\u00b6\u00df\u00ae\u00a9\u2122\u00b4\u00a8\u2260\u00c6\u00d8\u221e\u00b1\u2264\u2265\u00a5\u00b5\u2202\u2211\u220f\u03c0\u222b\u00aa\u00ba\u03a9\u00e6\u00f8\u00bf\u00a1\u00ac\u221a\u0192\u2248\u2206\u00ab\u00bb\u2026\u00a0\u00c0\u00c3\u00d5\u0152\u0153\u2013\u2014\u201c\u201d\u2018\u2019\u00f7\u25ca\u00ff\u0178\u011e\u011f\u0130\u0131\u015e\u015f\u2021\u00b7\u201a\u201e\u2030\u00c2\u00ca\u00c1\u00cb\u00c8\u00cd\u00ce\u00cf\u00cc\u00d3\u00d4\uf8ff\u00d2\u00da\u00db\u00d9\uf8a0\u02c6\u02dc\u00af\u02d8\u02d9\u02da\u00b8\u02dd\u02db\u02c7',
  };
  ja.MACSTRING = function(a, b, c, e) {
    e = Ya[e];
    if (void 0 !== e) {
      for (var g = '', d = 0; d < c; d++) {
        var f = a.getUint8(b + d);
        g += 127 >= f ? String.fromCharCode(f) : e[127 & f];
      }
      return g;
    }
  };
  var Ca,
    Da = 'function' == typeof WeakMap && new WeakMap();
  u.MACSTRING = function(a, b) {
    a: {
      if (!Ca) for (c in ((Ca = {}), Ya)) Ca[c] = new String(c);
      var c = Ca[b];
      if (void 0 !== c) {
        if (Da) {
          var e = Da.get(c);
          if (void 0 !== e) {
            c = e;
            break a;
          }
        }
        b = Ya[b];
        if (void 0 !== b) {
          e = {};
          for (var g = 0; g < b.length; g++) e[b.charCodeAt(g)] = g + 128;
          c = (Da && Da.set(c, e), e);
          break a;
        }
      }
      c = void 0;
    }
    if (void 0 !== c) {
      b = [];
      for (e = 0; e < a.length; e++) {
        g = a.charCodeAt(e);
        if (128 <= g && void 0 === (g = c[g])) return;
        b[e] = g;
      }
      return b;
    }
  };
  B.MACSTRING = function(a, b) {
    a = u.MACSTRING(a, b);
    return void 0 !== a ? a.length : 0;
  };
  u.VARDELTAS = function(a) {
    for (var b = 0, c = []; b < a.length; ) {
      var e = a[b];
      if (0 === e) {
        e = b;
        b = 0;
        for (var g = a.length; e < g && 64 > b && 0 === a[e]; ) ++e, ++b;
        e = (c.push(128 | (b - 1)), e);
      } else if (-128 <= e && 127 >= e) {
        e = a;
        var d = b;
        b = c;
        var f = 0,
          h = e.length;
        for (g = d; g < h && 64 > f; ) {
          var m = e[g];
          if (!(-128 <= m && 127 >= m)) break;
          if (0 === m && g + 1 < h && 0 === e[g + 1]) break;
          ++g;
          ++f;
        }
        for (b.push(f - 1); d < g; ++d) b.push((e[d] + 256) & 255);
        e = g;
      } else {
        e = a;
        d = b;
        b = c;
        f = 0;
        h = e.length;
        for (g = d; g < h && 64 > f; ) {
          m = e[g];
          if (0 === m) break;
          if ((m = -128 <= m && 127 >= m && g + 1 < h)) (m = e[g + 1]), (m = -128 <= m && 127 >= m);
          if (m) break;
          ++g;
          ++f;
        }
        for (b.push(64 | (f - 1)); d < g; ++d)
          (f = e[d]), b.push(((f + 65536) >> 8) & 255, (f + 256) & 255);
        e = g;
      }
      b = e;
    }
    return c;
  };
  u.INDEX = function(a) {
    for (var b = 1, c = [b], e = [], g = 0; g < a.length; g += 1) {
      var d = u.OBJECT(a[g]);
      Array.prototype.push.apply(e, d);
      b += d.length;
      c.push(b);
    }
    if (0 === e.length) return [0, 0];
    g = [];
    b = (1 + Math.floor(Math.log(b) / Math.log(2)) / 8) | 0;
    d = [void 0, u.BYTE, u.USHORT, u.UINT24, u.ULONG][b];
    for (var f = 0; f < c.length; f += 1) {
      var h = d(c[f]);
      Array.prototype.push.apply(g, h);
    }
    return Array.prototype.concat(u.Card16(a.length), u.OffSize(b), g, e);
  };
  B.INDEX = function(a) {
    return u.INDEX(a).length;
  };
  u.DICT = function(a) {
    for (var b = [], c = Object.keys(a), e = c.length, g = 0; g < e; g += 1) {
      var d = parseInt(c[g], 0),
        f = a[d];
      b = (b = b.concat(u.OPERAND(f.value, f.type))).concat(u.OPERATOR(d));
    }
    return b;
  };
  B.DICT = function(a) {
    return u.DICT(a).length;
  };
  u.OPERATOR = function(a) {
    return 1200 > a ? [a] : [12, a - 1200];
  };
  u.OPERAND = function(a, b) {
    var c = [];
    if (Array.isArray(b))
      for (var e = 0; e < b.length; e += 1)
        z.argument(a.length === b.length, 'Not enough arguments given for type' + b),
          (c = c.concat(u.OPERAND(a[e], b[e])));
    else if ('SID' === b) c = c.concat(u.NUMBER(a));
    else if ('offset' === b) c = c.concat(u.NUMBER32(a));
    else if ('number' === b) c = c.concat(u.NUMBER(a));
    else {
      if ('real' !== b) throw Error('Unknown operand type ' + b);
      c = c.concat(u.REAL(a));
    }
    return c;
  };
  u.OP = u.BYTE;
  B.OP = B.BYTE;
  var Ea = 'function' == typeof WeakMap && new WeakMap();
  u.CHARSTRING = function(a) {
    if (Ea) {
      var b = Ea.get(a);
      if (void 0 !== b) return b;
    }
    b = [];
    for (var c = a.length, e = 0; e < c; e += 1) {
      var g = a[e];
      b = b.concat(u[g.type](g.value));
    }
    return Ea && Ea.set(a, b), b;
  };
  B.CHARSTRING = function(a) {
    return u.CHARSTRING(a).length;
  };
  u.OBJECT = function(a) {
    var b = u[a.type];
    return z.argument(void 0 !== b, 'No encoding function for type ' + a.type), b(a.value);
  };
  B.OBJECT = function(a) {
    var b = B[a.type];
    return z.argument(void 0 !== b, 'No sizeOf function for type ' + a.type), b(a.value);
  };
  u.TABLE = function(a) {
    for (var b = [], c = a.fields.length, e = [], g = [], d = 0; d < c; d += 1) {
      var f = a.fields[d],
        h = u[f.type];
      z.argument(
        void 0 !== h,
        'No encoding function for field type ' + f.type + ' (' + f.name + ')'
      );
      var m = a[f.name];
      void 0 === m && (m = f.value);
      h = h(m);
      'TABLE' === f.type
        ? (g.push(b.length), (b = b.concat([0, 0])), e.push(h))
        : (b = b.concat(h));
    }
    for (c = 0; c < e.length; c += 1)
      (d = g[c]),
        (f = b.length),
        z.argument(65536 > f, 'Table ' + a.tableName + ' too big.'),
        (b[d] = f >> 8),
        (b[d + 1] = 255 & f),
        (b = b.concat(e[c]));
    return b;
  };
  B.TABLE = function(a) {
    for (var b = 0, c = a.fields.length, e = 0; e < c; e += 1) {
      var g = a.fields[e],
        d = B[g.type];
      z.argument(void 0 !== d, 'No sizeOf function for field type ' + g.type + ' (' + g.name + ')');
      var f = a[g.name];
      void 0 === f && (f = g.value);
      b += d(f);
      'TABLE' === g.type && (b += 2);
    }
    return b;
  };
  u.RECORD = u.TABLE;
  B.RECORD = B.TABLE;
  u.LITERAL = function(a) {
    return a;
  };
  B.LITERAL = function(a) {
    return a.length;
  };
  M.prototype.encode = function() {
    return u.TABLE(this);
  };
  M.prototype.sizeOf = function() {
    return B.TABLE(this);
  };
  var A = {
      Table: M,
      Record: M,
      Coverage: ((cb.prototype = Object.create(M.prototype)).constructor = cb),
      ScriptList: ((db.prototype = Object.create(M.prototype)).constructor = db),
      FeatureList: ((eb.prototype = Object.create(M.prototype)).constructor = eb),
      LookupList: ((fb.prototype = Object.create(M.prototype)).constructor = fb),
      ushortList: na,
      tableList: Ga,
      recordList: sa,
    },
    Rc = { byte: 1, uShort: 2, short: 2, uLong: 4, fixed: 4, longDateTime: 8, tag: 4 };
  l.prototype.parseByte = function() {
    var a = this.data.getUint8(this.offset + this.relativeOffset);
    return (this.relativeOffset += 1), a;
  };
  l.prototype.parseChar = function() {
    var a = this.data.getInt8(this.offset + this.relativeOffset);
    return (this.relativeOffset += 1), a;
  };
  l.prototype.parseCard8 = l.prototype.parseByte;
  l.prototype.parseCard16 = l.prototype.parseUShort = function() {
    var a = this.data.getUint16(this.offset + this.relativeOffset);
    return (this.relativeOffset += 2), a;
  };
  l.prototype.parseSID = l.prototype.parseUShort;
  l.prototype.parseOffset16 = l.prototype.parseUShort;
  l.prototype.parseShort = function() {
    var a = this.data.getInt16(this.offset + this.relativeOffset);
    return (this.relativeOffset += 2), a;
  };
  l.prototype.parseF2Dot14 = function() {
    var a = this.data.getInt16(this.offset + this.relativeOffset) / 16384;
    return (this.relativeOffset += 2), a;
  };
  l.prototype.parseOffset32 = l.prototype.parseULong = function() {
    var a = Ja(this.data, this.offset + this.relativeOffset);
    return (this.relativeOffset += 4), a;
  };
  l.prototype.parseFixed = function() {
    var a = hb(this.data, this.offset + this.relativeOffset);
    return (this.relativeOffset += 4), a;
  };
  l.prototype.parseString = function(a) {
    var b = this.data,
      c = this.offset + this.relativeOffset,
      e = '';
    this.relativeOffset += a;
    for (var g = 0; g < a; g++) e += String.fromCharCode(b.getUint8(c + g));
    return e;
  };
  l.prototype.parseTag = function() {
    return this.parseString(4);
  };
  l.prototype.parseLongDateTime = function() {
    var a = Ja(this.data, this.offset + this.relativeOffset + 4);
    return (a -= 2082844800), (this.relativeOffset += 8), a;
  };
  l.prototype.parseVersion = function(a) {
    var b = ta(this.data, this.offset + this.relativeOffset),
      c = ta(this.data, this.offset + this.relativeOffset + 2);
    return (this.relativeOffset += 4), void 0 === a && (a = 4096), b + c / a / 10;
  };
  l.prototype.skip = function(a, b) {
    void 0 === b && (b = 1);
    this.relativeOffset += Rc[a] * b;
  };
  l.prototype.parseULongList = function(a) {
    void 0 === a && (a = this.parseULong());
    for (var b = Array(a), c = this.data, e = this.offset + this.relativeOffset, g = 0; g < a; g++)
      (b[g] = c.getUint32(e)), (e += 4);
    return (this.relativeOffset += 4 * a), b;
  };
  l.prototype.parseOffset16List = l.prototype.parseUShortList = function(a) {
    void 0 === a && (a = this.parseUShort());
    for (var b = Array(a), c = this.data, e = this.offset + this.relativeOffset, g = 0; g < a; g++)
      (b[g] = c.getUint16(e)), (e += 2);
    return (this.relativeOffset += 2 * a), b;
  };
  l.prototype.parseShortList = function(a) {
    for (var b = Array(a), c = this.data, e = this.offset + this.relativeOffset, g = 0; g < a; g++)
      (b[g] = c.getInt16(e)), (e += 2);
    return (this.relativeOffset += 2 * a), b;
  };
  l.prototype.parseByteList = function(a) {
    for (var b = Array(a), c = this.data, e = this.offset + this.relativeOffset, g = 0; g < a; g++)
      b[g] = c.getUint8(e++);
    return (this.relativeOffset += a), b;
  };
  l.prototype.parseList = function(a, b) {
    b || ((b = a), (a = this.parseUShort()));
    for (var c = Array(a), e = 0; e < a; e++) c[e] = b.call(this);
    return c;
  };
  l.prototype.parseList32 = function(a, b) {
    b || ((b = a), (a = this.parseULong()));
    for (var c = Array(a), e = 0; e < a; e++) c[e] = b.call(this);
    return c;
  };
  l.prototype.parseRecordList = function(a, b) {
    b || ((b = a), (a = this.parseUShort()));
    for (var c = Array(a), e = Object.keys(b), g = 0; g < a; g++) {
      for (var d = {}, f = 0; f < e.length; f++) {
        var h = e[f];
        d[h] = b[h].call(this);
      }
      c[g] = d;
    }
    return c;
  };
  l.prototype.parseRecordList32 = function(a, b) {
    b || ((b = a), (a = this.parseULong()));
    for (var c = Array(a), e = Object.keys(b), g = 0; g < a; g++) {
      for (var d = {}, f = 0; f < e.length; f++) {
        var h = e[f];
        d[h] = b[h].call(this);
      }
      c[g] = d;
    }
    return c;
  };
  l.prototype.parseStruct = function(a) {
    if ('function' == typeof a) return a.call(this);
    for (var b = Object.keys(a), c = {}, e = 0; e < b.length; e++) {
      var g = b[e];
      c[g] = a[g].call(this);
    }
    return c;
  };
  l.prototype.parseValueRecord = function(a) {
    if ((void 0 === a && (a = this.parseUShort()), 0 !== a)) {
      var b = {};
      return (
        1 & a && (b.xPlacement = this.parseShort()),
        2 & a && (b.yPlacement = this.parseShort()),
        4 & a && (b.xAdvance = this.parseShort()),
        8 & a && (b.yAdvance = this.parseShort()),
        16 & a && ((b.xPlaDevice = void 0), this.parseShort()),
        32 & a && ((b.yPlaDevice = void 0), this.parseShort()),
        64 & a && ((b.xAdvDevice = void 0), this.parseShort()),
        128 & a && ((b.yAdvDevice = void 0), this.parseShort()),
        b
      );
    }
  };
  l.prototype.parseValueRecordList = function() {
    for (var a = this.parseUShort(), b = this.parseUShort(), c = Array(b), e = 0; e < b; e++)
      c[e] = this.parseValueRecord(a);
    return c;
  };
  l.prototype.parsePointer = function(a) {
    var b = this.parseOffset16();
    if (0 < b) return new l(this.data, this.offset + b).parseStruct(a);
  };
  l.prototype.parsePointer32 = function(a) {
    var b = this.parseOffset32();
    if (0 < b) return new l(this.data, this.offset + b).parseStruct(a);
  };
  l.prototype.parseListOfLists = function(a) {
    for (
      var b = this.parseOffset16List(), c = b.length, e = this.relativeOffset, g = Array(c), d = 0;
      d < c;
      d++
    ) {
      var f = b[d];
      if (0 !== f)
        if (((this.relativeOffset = f), a)) {
          for (var h = this.parseOffset16List(), m = Array(h.length), k = 0; k < h.length; k++)
            (this.relativeOffset = f + h[k]), (m[k] = a.call(this));
          g[d] = m;
        } else g[d] = this.parseUShortList();
      else g[d] = void 0;
    }
    return (this.relativeOffset = e), g;
  };
  l.prototype.parseCoverage = function() {
    var a = this.offset + this.relativeOffset,
      b = this.parseUShort(),
      c = this.parseUShort();
    if (1 === b) return { format: 1, glyphs: this.parseUShortList(c) };
    if (2 === b) {
      a = Array(c);
      for (b = 0; b < c; b++)
        a[b] = { start: this.parseUShort(), end: this.parseUShort(), index: this.parseUShort() };
      return { format: 2, ranges: a };
    }
    throw Error('0x' + a.toString(16) + ': Coverage format must be 1 or 2.');
  };
  l.prototype.parseClassDef = function() {
    var a = this.offset + this.relativeOffset,
      b = this.parseUShort();
    if (1 === b)
      return { format: 1, startGlyph: this.parseUShort(), classes: this.parseUShortList() };
    if (2 === b)
      return {
        format: 2,
        ranges: this.parseRecordList({ start: l.uShort, end: l.uShort, classId: l.uShort }),
      };
    throw Error('0x' + a.toString(16) + ': ClassDef format must be 1 or 2.');
  };
  l.list = function(a, b) {
    return function() {
      return this.parseList(a, b);
    };
  };
  l.list32 = function(a, b) {
    return function() {
      return this.parseList32(a, b);
    };
  };
  l.recordList = function(a, b) {
    return function() {
      return this.parseRecordList(a, b);
    };
  };
  l.recordList32 = function(a, b) {
    return function() {
      return this.parseRecordList32(a, b);
    };
  };
  l.pointer = function(a) {
    return function() {
      return this.parsePointer(a);
    };
  };
  l.pointer32 = function(a) {
    return function() {
      return this.parsePointer32(a);
    };
  };
  l.tag = l.prototype.parseTag;
  l.byte = l.prototype.parseByte;
  l.uShort = l.offset16 = l.prototype.parseUShort;
  l.uShortList = l.prototype.parseUShortList;
  l.uLong = l.offset32 = l.prototype.parseULong;
  l.uLongList = l.prototype.parseULongList;
  l.struct = l.prototype.parseStruct;
  l.coverage = l.prototype.parseCoverage;
  l.classDef = l.prototype.parseClassDef;
  var rc = { reserved: l.uShort, reqFeatureIndex: l.uShort, featureIndexes: l.uShortList };
  l.prototype.parseScriptList = function() {
    return (
      this.parsePointer(
        l.recordList({
          tag: l.tag,
          script: l.pointer({
            defaultLangSys: l.pointer(rc),
            langSysRecords: l.recordList({ tag: l.tag, langSys: l.pointer(rc) }),
          }),
        })
      ) || []
    );
  };
  l.prototype.parseFeatureList = function() {
    return (
      this.parsePointer(
        l.recordList({
          tag: l.tag,
          feature: l.pointer({ featureParams: l.offset16, lookupListIndexes: l.uShortList }),
        })
      ) || []
    );
  };
  l.prototype.parseLookupList = function(a) {
    return (
      this.parsePointer(
        l.list(
          l.pointer(function() {
            var b = this.parseUShort();
            z.argument(1 <= b && 9 >= b, 'GPOS/GSUB lookup type ' + b + ' unknown.');
            var c = this.parseUShort(),
              e = 16 & c;
            return {
              lookupType: b,
              lookupFlag: c,
              subtables: this.parseList(l.pointer(a[b])),
              markFilteringSet: e ? this.parseUShort() : void 0,
            };
          })
        )
      ) || []
    );
  };
  l.prototype.parseFeatureVariationsList = function() {
    return (
      this.parsePointer32(function() {
        var a = this.parseUShort(),
          b = this.parseUShort();
        return (
          z.argument(1 === a && 1 > b, 'GPOS/GSUB feature variations table unknown.'),
          this.parseRecordList32({
            conditionSetOffset: l.offset32,
            featureTableSubstitutionOffset: l.offset32,
          })
        );
      }) || []
    );
  };
  var y = {
      getByte: gb,
      getCard8: gb,
      getUShort: ta,
      getCard16: ta,
      getShort: function(a, b) {
        return a.getInt16(b, !1);
      },
      getULong: Ja,
      getFixed: hb,
      getTag: function(a, b) {
        for (var c = '', e = b; e < b + 4; e += 1) c += String.fromCharCode(a.getInt8(e));
        return c;
      },
      getOffset: function(a, b, c) {
        for (var e = 0, g = 0; g < c; g += 1) (e <<= 8), (e += a.getUint8(b + g));
        return e;
      },
      getBytes: function(a, b, c) {
        for (var e = []; b < c; b += 1) e.push(a.getUint8(b));
        return e;
      },
      bytesToString: function(a) {
        for (var b = '', c = 0; c < a.length; c += 1) b += String.fromCharCode(a[c]);
        return b;
      },
      Parser: l,
    },
    gc = {
      parse: function(a, b) {
        var c = {};
        c.version = y.getUShort(a, b);
        z.argument(0 === c.version, 'cmap table version should be 0.');
        c.numTables = y.getUShort(a, b + 2);
        for (var e = -1, g = c.numTables - 1; 0 <= g; --g) {
          var d = y.getUShort(a, b + 4 + 8 * g),
            f = y.getUShort(a, b + 4 + 8 * g + 2);
          if (
            (3 === d && (0 === f || 1 === f || 10 === f)) ||
            (0 === d && (0 === f || 1 === f || 2 === f || 3 === f || 4 === f))
          ) {
            e = y.getULong(a, b + 4 + 8 * g + 4);
            break;
          }
        }
        if (-1 === e) throw Error('No valid cmap sub-tables found.');
        g = new y.Parser(a, b + e);
        if (((c.format = g.parseUShort()), 12 === c.format))
          !(function(a, b) {
            var c;
            b.parseUShort();
            a.length = b.parseULong();
            a.language = b.parseULong();
            a.groupCount = c = b.parseULong();
            a.glyphIndexMap = {};
            for (var e = 0; e < c; e += 1)
              for (var g = b.parseULong(), d = b.parseULong(), f = b.parseULong(); g <= d; g += 1)
                (a.glyphIndexMap[g] = f), f++;
          })(c, g);
        else {
          if (4 !== c.format)
            throw Error(
              'Only format 4 and 12 cmap tables are supported (found format ' + c.format + ').'
            );
          !(function(a, b, c, e, g) {
            var d;
            a.length = b.parseUShort();
            a.language = b.parseUShort();
            a.segCount = d = b.parseUShort() >> 1;
            b.skip('uShort', 3);
            a.glyphIndexMap = {};
            b = new y.Parser(c, e + g + 14);
            var f = new y.Parser(c, e + g + 16 + 2 * d),
              r = new y.Parser(c, e + g + 16 + 4 * d),
              n = new y.Parser(c, e + g + 16 + 6 * d);
            e = e + g + 16 + 8 * d;
            for (g = 0; g < d - 1; g += 1)
              for (
                var m = void 0,
                  h = b.parseUShort(),
                  p = f.parseUShort(),
                  k = r.parseShort(),
                  D = n.parseUShort(),
                  T = p;
                T <= h;
                T += 1
              )
                0 !== D
                  ? ((e = n.offset + n.relativeOffset - 2),
                    (e += D),
                    (e += 2 * (T - p)),
                    0 !== (m = y.getUShort(c, e)) && (m = (m + k) & 65535))
                  : (m = (T + k) & 65535),
                  (a.glyphIndexMap[T] = m);
          })(c, g, a, b, e);
        }
        return c;
      },
      make: function(a) {
        var b,
          c = !0;
        for (b = a.length - 1; 0 < b; --b)
          if (65535 < a.get(b).unicode) {
            console.log('Adding CMAP format 12 (needed!)');
            c = !1;
            break;
          }
        var e = [
          { name: 'version', type: 'USHORT', value: 0 },
          { name: 'numTables', type: 'USHORT', value: c ? 1 : 2 },
          { name: 'platformID', type: 'USHORT', value: 3 },
          { name: 'encodingID', type: 'USHORT', value: 1 },
          { name: 'offset', type: 'ULONG', value: c ? 12 : 20 },
        ];
        c ||
          (e = e.concat([
            { name: 'cmap12PlatformID', type: 'USHORT', value: 3 },
            { name: 'cmap12EncodingID', type: 'USHORT', value: 10 },
            { name: 'cmap12Offset', type: 'ULONG', value: 0 },
          ]));
        e = e.concat([
          { name: 'format', type: 'USHORT', value: 4 },
          { name: 'cmap4Length', type: 'USHORT', value: 0 },
          { name: 'language', type: 'USHORT', value: 0 },
          { name: 'segCountX2', type: 'USHORT', value: 0 },
          { name: 'searchRange', type: 'USHORT', value: 0 },
          { name: 'entrySelector', type: 'USHORT', value: 0 },
          { name: 'rangeShift', type: 'USHORT', value: 0 },
        ]);
        e = new A.Table('cmap', e);
        e.segments = [];
        for (b = 0; b < a.length; b += 1) {
          for (var g = a.get(b), d = 0; d < g.unicodes.length; d += 1) {
            var f = e;
            var h = g.unicodes[d];
            var m = b;
            f.segments.push({ end: h, start: h, delta: -(h - m), offset: 0, glyphIndex: m });
          }
          e.segments = e.segments.sort(function(a, b) {
            return a.start - b.start;
          });
        }
        e.segments.push({ end: 65535, start: 65535, delta: 1, offset: 0 });
        f = e.segments.length;
        h = 0;
        m = [];
        g = [];
        d = [];
        var k = [],
          p = [];
        a = [];
        for (b = 0; b < f; b += 1) {
          var l = e.segments[b];
          65535 >= l.end && 65535 >= l.start
            ? ((m = m.concat({ name: 'end_' + b, type: 'USHORT', value: l.end })),
              (g = g.concat({ name: 'start_' + b, type: 'USHORT', value: l.start })),
              (d = d.concat({ name: 'idDelta_' + b, type: 'SHORT', value: l.delta })),
              (k = k.concat({ name: 'idRangeOffset_' + b, type: 'USHORT', value: l.offset })),
              void 0 !== l.glyphId &&
                (p = p.concat({ name: 'glyph_' + b, type: 'USHORT', value: l.glyphId })))
            : (h += 1);
          c ||
            void 0 === l.glyphIndex ||
            (a = (a = (a = a.concat({
              name: 'cmap12Start_' + b,
              type: 'ULONG',
              value: l.start,
            })).concat({ name: 'cmap12End_' + b, type: 'ULONG', value: l.end })).concat({
              name: 'cmap12Glyph_' + b,
              type: 'ULONG',
              value: l.glyphIndex,
            }));
        }
        ((e.segCountX2 = 2 * (f - h)),
        (e.searchRange = 2 * Math.pow(2, Math.floor(Math.log(f - h) / Math.log(2)))),
        (e.entrySelector = Math.log(e.searchRange / 2) / Math.log(2)),
        (e.rangeShift = e.segCountX2 - e.searchRange),
        (e.fields = e.fields.concat(m)),
        e.fields.push({ name: 'reservedPad', type: 'USHORT', value: 0 }),
        (e.fields = e.fields.concat(g)),
        (e.fields = e.fields.concat(d)),
        (e.fields = e.fields.concat(k)),
        (e.fields = e.fields.concat(p)),
        (e.cmap4Length =
          2 * m.length + 16 + 2 * g.length + 2 * d.length + 2 * k.length + 2 * p.length),
        c) ||
          ((c = 16 + 4 * a.length),
          (e.cmap12Offset = 20 + e.cmap4Length),
          (e.fields = e.fields.concat([
            { name: 'cmap12Format', type: 'USHORT', value: 12 },
            { name: 'cmap12Reserved', type: 'USHORT', value: 0 },
            { name: 'cmap12Length', type: 'ULONG', value: c },
            { name: 'cmap12Language', type: 'ULONG', value: 0 },
            { name: 'cmap12nGroups', type: 'ULONG', value: a.length / 3 },
          ])),
          (e.fields = e.fields.concat(a)));
        return e;
      },
    },
    wa = '.notdef;space;exclam;quotedbl;numbersign;dollar;percent;ampersand;quoteright;parenleft;parenright;asterisk;plus;comma;hyphen;period;slash;zero;one;two;three;four;five;six;seven;eight;nine;colon;semicolon;less;equal;greater;question;at;A;B;C;D;E;F;G;H;I;J;K;L;M;N;O;P;Q;R;S;T;U;V;W;X;Y;Z;bracketleft;backslash;bracketright;asciicircum;underscore;quoteleft;a;b;c;d;e;f;g;h;i;j;k;l;m;n;o;p;q;r;s;t;u;v;w;x;y;z;braceleft;bar;braceright;asciitilde;exclamdown;cent;sterling;fraction;yen;florin;section;currency;quotesingle;quotedblleft;guillemotleft;guilsinglleft;guilsinglright;fi;fl;endash;dagger;daggerdbl;periodcentered;paragraph;bullet;quotesinglbase;quotedblbase;quotedblright;guillemotright;ellipsis;perthousand;questiondown;grave;acute;circumflex;tilde;macron;breve;dotaccent;dieresis;ring;cedilla;hungarumlaut;ogonek;caron;emdash;AE;ordfeminine;Lslash;Oslash;OE;ordmasculine;ae;dotlessi;lslash;oslash;oe;germandbls;onesuperior;logicalnot;mu;trademark;Eth;onehalf;plusminus;Thorn;onequarter;divide;brokenbar;degree;thorn;threequarters;twosuperior;registered;minus;eth;multiply;threesuperior;copyright;Aacute;Acircumflex;Adieresis;Agrave;Aring;Atilde;Ccedilla;Eacute;Ecircumflex;Edieresis;Egrave;Iacute;Icircumflex;Idieresis;Igrave;Ntilde;Oacute;Ocircumflex;Odieresis;Ograve;Otilde;Scaron;Uacute;Ucircumflex;Udieresis;Ugrave;Yacute;Ydieresis;Zcaron;aacute;acircumflex;adieresis;agrave;aring;atilde;ccedilla;eacute;ecircumflex;edieresis;egrave;iacute;icircumflex;idieresis;igrave;ntilde;oacute;ocircumflex;odieresis;ograve;otilde;scaron;uacute;ucircumflex;udieresis;ugrave;yacute;ydieresis;zcaron;exclamsmall;Hungarumlautsmall;dollaroldstyle;dollarsuperior;ampersandsmall;Acutesmall;parenleftsuperior;parenrightsuperior;266 ff;onedotenleader;zerooldstyle;oneoldstyle;twooldstyle;threeoldstyle;fouroldstyle;fiveoldstyle;sixoldstyle;sevenoldstyle;eightoldstyle;nineoldstyle;commasuperior;threequartersemdash;periodsuperior;questionsmall;asuperior;bsuperior;centsuperior;dsuperior;esuperior;isuperior;lsuperior;msuperior;nsuperior;osuperior;rsuperior;ssuperior;tsuperior;ff;ffi;ffl;parenleftinferior;parenrightinferior;Circumflexsmall;hyphensuperior;Gravesmall;Asmall;Bsmall;Csmall;Dsmall;Esmall;Fsmall;Gsmall;Hsmall;Ismall;Jsmall;Ksmall;Lsmall;Msmall;Nsmall;Osmall;Psmall;Qsmall;Rsmall;Ssmall;Tsmall;Usmall;Vsmall;Wsmall;Xsmall;Ysmall;Zsmall;colonmonetary;onefitted;rupiah;Tildesmall;exclamdownsmall;centoldstyle;Lslashsmall;Scaronsmall;Zcaronsmall;Dieresissmall;Brevesmall;Caronsmall;Dotaccentsmall;Macronsmall;figuredash;hypheninferior;Ogoneksmall;Ringsmall;Cedillasmall;questiondownsmall;oneeighth;threeeighths;fiveeighths;seveneighths;onethird;twothirds;zerosuperior;foursuperior;fivesuperior;sixsuperior;sevensuperior;eightsuperior;ninesuperior;zeroinferior;oneinferior;twoinferior;threeinferior;fourinferior;fiveinferior;sixinferior;seveninferior;eightinferior;nineinferior;centinferior;dollarinferior;periodinferior;commainferior;Agravesmall;Aacutesmall;Acircumflexsmall;Atildesmall;Adieresissmall;Aringsmall;AEsmall;Ccedillasmall;Egravesmall;Eacutesmall;Ecircumflexsmall;Edieresissmall;Igravesmall;Iacutesmall;Icircumflexsmall;Idieresissmall;Ethsmall;Ntildesmall;Ogravesmall;Oacutesmall;Ocircumflexsmall;Otildesmall;Odieresissmall;OEsmall;Oslashsmall;Ugravesmall;Uacutesmall;Ucircumflexsmall;Udieresissmall;Yacutesmall;Thornsmall;Ydieresissmall;001.000;001.001;001.002;001.003;Black;Bold;Book;Light;Medium;Regular;Roman;Semibold'.split(
      ';'
    ),
    Sc = '                                space exclam quotedbl numbersign dollar percent ampersand quoteright parenleft parenright asterisk plus comma hyphen period slash zero one two three four five six seven eight nine colon semicolon less equal greater question at A B C D E F G H I J K L M N O P Q R S T U V W X Y Z bracketleft backslash bracketright asciicircum underscore quoteleft a b c d e f g h i j k l m n o p q r s t u v w x y z braceleft bar braceright asciitilde                                   exclamdown cent sterling fraction yen florin section currency quotesingle quotedblleft guillemotleft guilsinglleft guilsinglright fi fl  endash dagger daggerdbl periodcentered  paragraph bullet quotesinglbase quotedblbase quotedblright guillemotright ellipsis perthousand  questiondown  grave acute circumflex tilde macron breve dotaccent dieresis  ring cedilla  hungarumlaut ogonek caron emdash                 AE  ordfeminine     Lslash Oslash OE ordmasculine      ae    dotlessi   lslash oslash oe germandbls'.split(
      ' '
    ),
    Tc = '                                space exclamsmall Hungarumlautsmall  dollaroldstyle dollarsuperior ampersandsmall Acutesmall parenleftsuperior parenrightsuperior twodotenleader onedotenleader comma hyphen period fraction zerooldstyle oneoldstyle twooldstyle threeoldstyle fouroldstyle fiveoldstyle sixoldstyle sevenoldstyle eightoldstyle nineoldstyle colon semicolon commasuperior threequartersemdash periodsuperior questionsmall  asuperior bsuperior centsuperior dsuperior esuperior   isuperior   lsuperior msuperior nsuperior osuperior   rsuperior ssuperior tsuperior  ff fi fl ffi ffl parenleftinferior  parenrightinferior Circumflexsmall hyphensuperior Gravesmall Asmall Bsmall Csmall Dsmall Esmall Fsmall Gsmall Hsmall Ismall Jsmall Ksmall Lsmall Msmall Nsmall Osmall Psmall Qsmall Rsmall Ssmall Tsmall Usmall Vsmall Wsmall Xsmall Ysmall Zsmall colonmonetary onefitted rupiah Tildesmall                                   exclamdownsmall centoldstyle Lslashsmall   Scaronsmall Zcaronsmall Dieresissmall Brevesmall Caronsmall  Dotaccentsmall   Macronsmall   figuredash hypheninferior   Ogoneksmall Ringsmall Cedillasmall    onequarter onehalf threequarters questiondownsmall oneeighth threeeighths fiveeighths seveneighths onethird twothirds   zerosuperior onesuperior twosuperior threesuperior foursuperior fivesuperior sixsuperior sevensuperior eightsuperior ninesuperior zeroinferior oneinferior twoinferior threeinferior fourinferior fiveinferior sixinferior seveninferior eightinferior nineinferior centinferior dollarinferior periodinferior commainferior Agravesmall Aacutesmall Acircumflexsmall Atildesmall Adieresissmall Aringsmall AEsmall Ccedillasmall Egravesmall Eacutesmall Ecircumflexsmall Edieresissmall Igravesmall Iacutesmall Icircumflexsmall Idieresissmall Ethsmall Ntildesmall Ogravesmall Oacutesmall Ocircumflexsmall Otildesmall Odieresissmall OEsmall Oslashsmall Ugravesmall Uacutesmall Ucircumflexsmall Udieresissmall Yacutesmall Thornsmall Ydieresissmall'.split(
      ' '
    ),
    ea = '.notdef .null nonmarkingreturn space exclam quotedbl numbersign dollar percent ampersand quotesingle parenleft parenright asterisk plus comma hyphen period slash zero one two three four five six seven eight nine colon semicolon less equal greater question at A B C D E F G H I J K L M N O P Q R S T U V W X Y Z bracketleft backslash bracketright asciicircum underscore grave a b c d e f g h i j k l m n o p q r s t u v w x y z braceleft bar braceright asciitilde Adieresis Aring Ccedilla Eacute Ntilde Odieresis Udieresis aacute agrave acircumflex adieresis atilde aring ccedilla eacute egrave ecircumflex edieresis iacute igrave icircumflex idieresis ntilde oacute ograve ocircumflex odieresis otilde uacute ugrave ucircumflex udieresis dagger degree cent sterling section bullet paragraph germandbls registered copyright trademark acute dieresis notequal AE Oslash infinity plusminus lessequal greaterequal yen mu partialdiff summation product pi integral ordfeminine ordmasculine Omega ae oslash questiondown exclamdown logicalnot radical florin approxequal Delta guillemotleft guillemotright ellipsis nonbreakingspace Agrave Atilde Otilde OE oe endash emdash quotedblleft quotedblright quoteleft quoteright divide lozenge ydieresis Ydieresis fraction currency guilsinglleft guilsinglright fi fl daggerdbl periodcentered quotesinglbase quotedblbase perthousand Acircumflex Ecircumflex Aacute Edieresis Egrave Iacute Icircumflex Idieresis Igrave Oacute Ocircumflex apple Ograve Uacute Ucircumflex Ugrave dotlessi circumflex tilde macron breve dotaccent ring cedilla hungarumlaut ogonek caron Lslash lslash Scaron scaron Zcaron zcaron brokenbar Eth eth Yacute yacute Thorn thorn minus multiply onesuperior twosuperior threesuperior onehalf onequarter threequarters franc Gbreve gbreve Idotaccent Scedilla scedilla Cacute cacute Ccaron ccaron dcroat'.split(
      ' '
    );
  ib.prototype.charToGlyphIndex = function(a) {
    a = a.codePointAt(0);
    var b = this.font.glyphs;
    if (b)
      for (var c = 0; c < b.length; c += 1)
        for (var e = b.get(c), g = 0; g < e.unicodes.length; g += 1)
          if (e.unicodes[g] === a) return c;
    return null;
  };
  jb.prototype.charToGlyphIndex = function(a) {
    return this.cmap.glyphIndexMap[a.codePointAt(0)] || 0;
  };
  ua.prototype.charToGlyphIndex = function(a) {
    a = a.codePointAt(0);
    return this.charset.indexOf(this.encoding[a]);
  };
  Ka.prototype.nameToGlyphIndex = function(a) {
    return this.names.indexOf(a);
  };
  Ka.prototype.glyphIndexToName = function(a) {
    return this.names[a];
  };
  var fa = {
    line: function(a, b, c, e, g) {
      a.beginPath();
      a.moveTo(b, c);
      a.lineTo(e, g);
      a.stroke();
    },
  };
  O.prototype.bindConstructorValues = function(a) {
    var b, c;
    this.index = a.index || 0;
    this.name = a.name || null;
    this.unicode = a.unicode || void 0;
    this.unicodes = a.unicodes || void 0 !== a.unicode ? [a.unicode] : [];
    a.xMin && (this.xMin = a.xMin);
    a.yMin && (this.yMin = a.yMin);
    a.xMax && (this.xMax = a.xMax);
    a.yMax && (this.yMax = a.yMax);
    a.advanceWidth && (this.advanceWidth = a.advanceWidth);
    Object.defineProperty(
      this,
      'path',
      ((b = a.path),
      (c = b || new J()),
      {
        configurable: !0,
        get: function() {
          return 'function' == typeof c && (c = c()), c;
        },
        set: function(a) {
          c = a;
        },
      })
    );
  };
  O.prototype.addUnicode = function(a) {
    0 === this.unicodes.length && (this.unicode = a);
    this.unicodes.push(a);
  };
  O.prototype.getBoundingBox = function() {
    return this.path.getBoundingBox();
  };
  O.prototype.getPath = function(a, b, c, e, g) {
    var d;
    a = void 0 !== a ? a : 0;
    b = void 0 !== b ? b : 0;
    c = void 0 !== c ? c : 72;
    e || (e = {});
    var f = e.xScale,
      h = e.yScale;
    (e.hinting && g && g.hinting && (d = this.path && g.hinting.exec(this, c)), d)
      ? ((e = g.hinting.getCommands(d)), (a = Math.round(a)), (b = Math.round(b)), (f = h = 1))
      : ((e = this.path.commands),
        (c *= 1 / this.path.unitsPerEm),
        void 0 === f && (f = c),
        void 0 === h && (h = c));
    c = new J();
    for (g = 0; g < e.length; g += 1)
      (d = e[g]),
        'M' === d.type
          ? c.moveTo(a + d.x * f, b + -d.y * h)
          : 'L' === d.type
          ? c.lineTo(a + d.x * f, b + -d.y * h)
          : 'Q' === d.type
          ? c.quadraticCurveTo(a + d.x1 * f, b + -d.y1 * h, a + d.x * f, b + -d.y * h)
          : 'C' === d.type
          ? c.curveTo(
              a + d.x1 * f,
              b + -d.y1 * h,
              a + d.x2 * f,
              b + -d.y2 * h,
              a + d.x * f,
              b + -d.y * h
            )
          : 'Z' === d.type && c.closePath();
    return c;
  };
  O.prototype.getContours = function() {
    if (void 0 === this.points) return [];
    for (var a = [], b = [], c = 0; c < this.points.length; c += 1) {
      var e = this.points[c];
      b.push(e);
      e.lastPointOfContour && (a.push(b), (b = []));
    }
    return z.argument(0 === b.length, 'There are still points left in the current contour.'), a;
  };
  O.prototype.getMetrics = function() {
    for (var a = this.path.commands, b = [], c = [], e = 0; e < a.length; e += 1) {
      var d = a[e];
      'Z' !== d.type && (b.push(d.x), c.push(d.y));
      ('Q' !== d.type && 'C' !== d.type) || (b.push(d.x1), c.push(d.y1));
      'C' === d.type && (b.push(d.x2), c.push(d.y2));
    }
    a = {
      xMin: Math.min.apply(null, b),
      yMin: Math.min.apply(null, c),
      xMax: Math.max.apply(null, b),
      yMax: Math.max.apply(null, c),
      leftSideBearing: this.leftSideBearing,
    };
    return (
      isFinite(a.xMin) || (a.xMin = 0),
      isFinite(a.xMax) || (a.xMax = this.advanceWidth),
      isFinite(a.yMin) || (a.yMin = 0),
      isFinite(a.yMax) || (a.yMax = 0),
      (a.rightSideBearing = this.advanceWidth - a.leftSideBearing - (a.xMax - a.xMin)),
      a
    );
  };
  O.prototype.draw = function(a, b, c, e, d) {
    this.getPath(b, c, e, d).draw(a);
  };
  O.prototype.drawPoints = function(a, b, c, e) {
    function d(b, c, e, d) {
      var g = 2 * Math.PI;
      a.beginPath();
      for (var f = 0; f < b.length; f += 1)
        a.moveTo(c + b[f].x * d, e + b[f].y * d),
          a.arc(c + b[f].x * d, e + b[f].y * d, 2, 0, g, !1);
      a.closePath();
      a.fill();
    }
    b = void 0 !== b ? b : 0;
    c = void 0 !== c ? c : 0;
    e = (1 / this.path.unitsPerEm) * (void 0 !== e ? e : 24);
    for (var f = [], n = [], h = this.path, m = 0; m < h.commands.length; m += 1) {
      var k = h.commands[m];
      void 0 !== k.x && f.push({ x: k.x, y: -k.y });
      void 0 !== k.x1 && n.push({ x: k.x1, y: -k.y1 });
      void 0 !== k.x2 && n.push({ x: k.x2, y: -k.y2 });
    }
    a.fillStyle = 'blue';
    d(f, b, c, e);
    a.fillStyle = 'red';
    d(n, b, c, e);
  };
  O.prototype.drawMetrics = function(a, b, c, e) {
    b = void 0 !== b ? b : 0;
    c = void 0 !== c ? c : 0;
    e = (1 / this.path.unitsPerEm) * (void 0 !== e ? e : 24);
    a.lineWidth = 1;
    a.strokeStyle = 'black';
    fa.line(a, b, -1e4, b, 1e4);
    fa.line(a, -1e4, c, 1e4, c);
    var d = this.xMin || 0,
      f = this.yMin || 0,
      n = this.xMax || 0,
      h = this.yMax || 0,
      m = this.advanceWidth || 0;
    a.strokeStyle = 'blue';
    fa.line(a, b + d * e, -1e4, b + d * e, 1e4);
    fa.line(a, b + n * e, -1e4, b + n * e, 1e4);
    fa.line(a, -1e4, c + -f * e, 1e4, c + -f * e);
    fa.line(a, -1e4, c + -h * e, 1e4, c + -h * e);
    a.strokeStyle = 'green';
    fa.line(a, b + m * e, -1e4, b + m * e, 1e4);
  };
  La.prototype.get = function(a) {
    return (
      'function' == typeof this.glyphs[a] && (this.glyphs[a] = this.glyphs[a]()), this.glyphs[a]
    );
  };
  La.prototype.push = function(a, b) {
    this.glyphs[a] = b;
    this.length++;
  };
  var ia = {
      GlyphSet: La,
      glyphLoader: function(a, b) {
        return new O({ index: b, font: a });
      },
      ttfGlyphLoader: function(a, b, c, e, d, f) {
        return function() {
          var g = new O({ index: b, font: a });
          return (
            (g.path = function() {
              c(g, e, d);
              var b = f(a.glyphs, g);
              return (b.unitsPerEm = a.unitsPerEm), b;
            }),
            va(g, 'xMin', '_xMin'),
            va(g, 'xMax', '_xMax'),
            va(g, 'yMin', '_yMin'),
            va(g, 'yMax', '_yMax'),
            g
          );
        };
      },
      cffGlyphLoader: function(a, b, c, e) {
        return function() {
          var d = new O({ index: b, font: a });
          return (
            (d.path = function() {
              var b = c(a, d, e);
              return (b.unitsPerEm = a.unitsPerEm), b;
            }),
            d
          );
        };
      },
    },
    qb = [
      { name: 'version', op: 0, type: 'SID' },
      { name: 'notice', op: 1, type: 'SID' },
      { name: 'copyright', op: 1200, type: 'SID' },
      { name: 'fullName', op: 2, type: 'SID' },
      { name: 'familyName', op: 3, type: 'SID' },
      { name: 'weight', op: 4, type: 'SID' },
      { name: 'isFixedPitch', op: 1201, type: 'number', value: 0 },
      { name: 'italicAngle', op: 1202, type: 'number', value: 0 },
      { name: 'underlinePosition', op: 1203, type: 'number', value: -100 },
      { name: 'underlineThickness', op: 1204, type: 'number', value: 50 },
      { name: 'paintType', op: 1205, type: 'number', value: 0 },
      { name: 'charstringType', op: 1206, type: 'number', value: 2 },
      {
        name: 'fontMatrix',
        op: 1207,
        type: 'real real real real real real'.split(' '),
        value: [0.001, 0, 0, 0.001, 0, 0],
      },
      { name: 'uniqueId', op: 13, type: 'number' },
      {
        name: 'fontBBox',
        op: 5,
        type: ['number', 'number', 'number', 'number'],
        value: [0, 0, 0, 0],
      },
      { name: 'strokeWidth', op: 1208, type: 'number', value: 0 },
      { name: 'xuid', op: 14, type: [], value: null },
      { name: 'charset', op: 15, type: 'offset', value: 0 },
      { name: 'encoding', op: 16, type: 'offset', value: 0 },
      { name: 'charStrings', op: 17, type: 'offset', value: 0 },
      { name: 'private', op: 18, type: ['number', 'offset'], value: [0, 0] },
      { name: 'ros', op: 1230, type: ['SID', 'SID', 'number'] },
      { name: 'cidFontVersion', op: 1231, type: 'number', value: 0 },
      { name: 'cidFontRevision', op: 1232, type: 'number', value: 0 },
      { name: 'cidFontType', op: 1233, type: 'number', value: 0 },
      { name: 'cidCount', op: 1234, type: 'number', value: 8720 },
      { name: 'uidBase', op: 1235, type: 'number' },
      { name: 'fdArray', op: 1236, type: 'offset' },
      { name: 'fdSelect', op: 1237, type: 'offset' },
      { name: 'fontName', op: 1238, type: 'SID' },
    ],
    ob = [
      { name: 'subrs', op: 19, type: 'offset', value: 0 },
      { name: 'defaultWidthX', op: 20, type: 'number', value: 0 },
      { name: 'nominalWidthX', op: 21, type: 'number', value: 0 },
    ],
    nc = {
      parse: function(a, b, c) {
        c.tables.cff = {};
        var e,
          d = aa(
            a,
            aa(
              a,
              (((e = {}).formatMajor = y.getCard8(a, b)),
              (e.formatMinor = y.getCard8(a, b + 1)),
              (e.size = y.getCard8(a, b + 2)),
              (e.offsetSize = y.getCard8(a, b + 3)),
              (e.startOffset = b),
              (e.endOffset = b + 4),
              e).endOffset,
              y.bytesToString
            ).endOffset
          );
        e = aa(a, d.endOffset, y.bytesToString);
        var f = aa(a, e.endOffset);
        c.gsubrs = f.objects;
        c.gsubrsBias = Ma(c.gsubrs);
        d = pb(a, b, d.objects, e.objects);
        if (1 !== d.length)
          throw Error(
            "CFF table has too many fonts in 'FontSet' - count of fonts NameIndex.length = " +
              d.length
          );
        d = d[0];
        if (
          ((c.tables.cff.topDict = d)._privateDict &&
            ((c.defaultWidthX = d._privateDict.defaultWidthX),
            (c.nominalWidthX = d._privateDict.nominalWidthX)),
          void 0 !== d.ros[0] && void 0 !== d.ros[1] && (c.isCIDFont = !0),
          c.isCIDFont)
        ) {
          f = d.fdArray;
          var n = d.fdSelect;
          if (0 === f || 0 === n)
            throw Error(
              'Font is marked as a CID font, but FDArray and/or FDSelect information is missing'
            );
          var h = pb(a, b, aa(a, (f += b)).objects, e.objects);
          d._fdArray = h;
          d._fdSelect = (function(a, b, c, e) {
            var d,
              g = [];
            a = new y.Parser(a, b);
            b = a.parseCard8();
            if (0 === b)
              for (var f = 0; f < c; f++) {
                if (e <= (d = a.parseCard8()))
                  throw Error(
                    'CFF table CID Font FDSelect has bad FD index value ' +
                      d +
                      ' (FD count ' +
                      e +
                      ')'
                  );
                g.push(d);
              }
            else {
              if (3 !== b)
                throw Error('CFF Table CID Font FDSelect table has unsupported format ' + b);
              b = a.parseCard16();
              var n = a.parseCard16();
              if (0 !== n)
                throw Error('CFF Table CID Font FDSelect format 3 range has bad initial GID ' + n);
              for (var r = 0; r < b; r++) {
                if (((d = a.parseCard8()), (f = a.parseCard16()), e <= d))
                  throw Error(
                    'CFF table CID Font FDSelect has bad FD index value ' +
                      d +
                      ' (FD count ' +
                      e +
                      ')'
                  );
                if (c < f)
                  throw Error('CFF Table CID Font FDSelect format 3 range has bad GID ' + f);
                for (; n < f; n++) g.push(d);
                n = f;
              }
              if (f !== c)
                throw Error('CFF Table CID Font FDSelect format 3 range has bad final GID ' + f);
            }
            return g;
          })(a, n + b, c.numGlyphs, h.length);
        }
        f = b + d.private[1];
        n = nb(a, f, d.private[0], e.objects);
        ((c.defaultWidthX = n.defaultWidthX), (c.nominalWidthX = n.nominalWidthX), 0 !== n.subrs)
          ? ((f = aa(a, f + n.subrs)), (c.subrs = f.objects), (c.subrsBias = Ma(c.subrs)))
          : ((c.subrs = []), (c.subrsBias = 0));
        f = aa(a, b + d.charStrings);
        c.nGlyphs = f.objects.length;
        e = (function(a, b, c, e) {
          var d;
          a = new y.Parser(a, b);
          --c;
          b = ['.notdef'];
          var g = a.parseCard8();
          if (0 === g) for (d = 0; d < c; d += 1) (g = a.parseSID()), b.push(oa(e, g));
          else if (1 === g)
            for (; b.length <= c; ) {
              g = a.parseSID();
              d = a.parseCard8();
              for (var f = 0; f <= d; f += 1) b.push(oa(e, g)), (g += 1);
            }
          else {
            if (2 !== g) throw Error('Unknown charset format ' + g);
            for (; b.length <= c; )
              for (g = a.parseSID(), d = a.parseCard16(), f = 0; f <= d; f += 1)
                b.push(oa(e, g)), (g += 1);
          }
          return b;
        })(a, b + d.charset, c.nGlyphs, e.objects);
        0 === d.encoding
          ? (c.cffEncoding = new ua(Sc, e))
          : 1 === d.encoding
          ? (c.cffEncoding = new ua(Tc, e))
          : (c.cffEncoding = (function(a, b, c) {
              var e = {};
              a = new y.Parser(a, b);
              b = a.parseCard8();
              if (0 === b)
                for (var d = a.parseCard8(), g = 0; g < d; g += 1) e[(b = a.parseCard8())] = g;
              else {
                if (1 !== b) throw Error('Unknown encoding format ' + b);
                d = a.parseCard8();
                b = 1;
                for (g = 0; g < d; g += 1)
                  for (var f = a.parseCard8(), n = a.parseCard8(), r = f; r <= f + n; r += 1)
                    (e[r] = b), (b += 1);
              }
              return new ua(e, c);
            })(a, b + d.encoding, e));
        c.encoding = c.encoding || c.cffEncoding;
        c.glyphs = new ia.GlyphSet(c);
        for (a = 0; a < c.nGlyphs; a += 1)
          c.glyphs.push(a, ia.cffGlyphLoader(c, a, yc, f.objects[a]));
      },
      make: function(a, b) {
        var c = new A.Table('CFF ', [
            { name: 'header', type: 'RECORD' },
            { name: 'nameIndex', type: 'RECORD' },
            { name: 'topDictIndex', type: 'RECORD' },
            { name: 'stringIndex', type: 'RECORD' },
            { name: 'globalSubrIndex', type: 'RECORD' },
            { name: 'charsets', type: 'RECORD' },
            { name: 'charStringsIndex', type: 'RECORD' },
            { name: 'privateDict', type: 'RECORD' },
          ]),
          e = 1 / b.unitsPerEm;
        e = {
          version: b.version,
          fullName: b.fullName,
          familyName: b.familyName,
          weight: b.weightName,
          fontBBox: b.fontBBox || [0, 0, 0, 0],
          fontMatrix: [e, 0, 0, e, 0, 0],
          charset: 999,
          encoding: 0,
          charStrings: 999,
          private: [0, 999],
        };
        for (var d = [], f = 1; f < a.length; f += 1) {
          var n = a.get(f);
          d.push(n.name);
        }
        n = [];
        c.header = new A.Record('Header', [
          { name: 'major', type: 'Card8', value: 1 },
          { name: 'minor', type: 'Card8', value: 0 },
          { name: 'hdrSize', type: 'Card8', value: 4 },
          { name: 'major', type: 'Card8', value: 1 },
        ]);
        c.nameIndex = (function(a) {
          var b = new A.Record('Name INDEX', [{ name: 'names', type: 'INDEX', value: [] }]);
          b.names = [];
          for (var c = 0; c < a.length; c += 1)
            b.names.push({ name: 'name_' + c, type: 'NAME', value: a[c] });
          return b;
        })([b.postScriptName]);
        var h, m;
        b = vb(e, n);
        c.topDictIndex = wb(b);
        c.globalSubrIndex = new A.Record('Global Subr INDEX', [
          { name: 'subrs', type: 'INDEX', value: [] },
        ]);
        c.charsets = (function(a, b) {
          for (
            var c = new A.Record('Charsets', [{ name: 'format', type: 'Card8', value: 0 }]), e = 0;
            e < a.length;
            e += 1
          ) {
            var d = tb(a[e], b);
            c.fields.push({ name: 'glyph_' + e, type: 'SID', value: d });
          }
          return c;
        })(d, n);
        c.charStringsIndex = (function(a) {
          for (
            var b = new A.Record('CharStrings INDEX', [
                { name: 'charStrings', type: 'INDEX', value: [] },
              ]),
              c = 0;
            c < a.length;
            c += 1
          ) {
            var e = a.get(c);
            var d = [];
            var g = e.path;
            d.push({ name: 'width', type: 'NUMBER', value: e.advanceWidth });
            for (var f = 0, n = 0, r = 0; r < g.commands.length; r += 1) {
              var h = g.commands[r];
              'Q' === h.type &&
                (h = {
                  type: 'C',
                  x: h.x,
                  y: h.y,
                  x1: (1 / 3) * f + (2 / 3) * h.x1,
                  y1: (1 / 3) * n + (2 / 3) * h.y1,
                  x2: (1 / 3) * h.x + (2 / 3) * h.x1,
                  y2: (1 / 3) * h.y + (2 / 3) * h.y1,
                });
              if ('M' === h.type)
                (f = Math.round(h.x - f)),
                  (n = Math.round(h.y - n)),
                  d.push({ name: 'dx', type: 'NUMBER', value: f }),
                  d.push({ name: 'dy', type: 'NUMBER', value: n }),
                  d.push({ name: 'rmoveto', type: 'OP', value: 21 }),
                  (f = Math.round(h.x)),
                  (n = Math.round(h.y));
              else if ('L' === h.type)
                (f = Math.round(h.x - f)),
                  (n = Math.round(h.y - n)),
                  d.push({ name: 'dx', type: 'NUMBER', value: f }),
                  d.push({ name: 'dy', type: 'NUMBER', value: n }),
                  d.push({ name: 'rlineto', type: 'OP', value: 5 }),
                  (f = Math.round(h.x)),
                  (n = Math.round(h.y));
              else if ('C' === h.type) {
                var m = Math.round(h.x1 - f),
                  k = Math.round(h.y1 - n),
                  l = Math.round(h.x2 - h.x1),
                  D = Math.round(h.y2 - h.y1);
                f = Math.round(h.x - h.x2);
                n = Math.round(h.y - h.y2);
                d.push({ name: 'dx1', type: 'NUMBER', value: m });
                d.push({ name: 'dy1', type: 'NUMBER', value: k });
                d.push({ name: 'dx2', type: 'NUMBER', value: l });
                d.push({ name: 'dy2', type: 'NUMBER', value: D });
                d.push({ name: 'dx', type: 'NUMBER', value: f });
                d.push({ name: 'dy', type: 'NUMBER', value: n });
                d.push({ name: 'rrcurveto', type: 'OP', value: 8 });
                f = Math.round(h.x);
                n = Math.round(h.y);
              }
            }
            d = (d.push({ name: 'endchar', type: 'OP', value: 14 }), d);
            b.charStrings.push({ name: e.name, type: 'CHARSTRING', value: d });
          }
          return b;
        })(a);
        c.privateDict = ((h = {}),
        ((m = new A.Record('Private DICT', [{ name: 'dict', type: 'DICT', value: {} }])).dict = ub(
          ob,
          h,
          n
        )),
        m);
        c.stringIndex = (function(a) {
          var b = new A.Record('String INDEX', [{ name: 'strings', type: 'INDEX', value: [] }]);
          b.strings = [];
          for (var c = 0; c < a.length; c += 1)
            b.strings.push({ name: 'string_' + c, type: 'STRING', value: a[c] });
          return b;
        })(n);
        a =
          c.header.sizeOf() +
          c.nameIndex.sizeOf() +
          c.topDictIndex.sizeOf() +
          c.stringIndex.sizeOf() +
          c.globalSubrIndex.sizeOf();
        return (
          (e.charset = a),
          (e.encoding = 0),
          (e.charStrings = e.charset + c.charsets.sizeOf()),
          (e.private[1] = e.charStrings + c.charStringsIndex.sizeOf()),
          (b = vb(e, n)),
          (c.topDictIndex = wb(b)),
          c
        );
      },
    },
    hc = {
      parse: function(a, b) {
        var c = {};
        a = new y.Parser(a, b);
        return (
          (c.version = a.parseVersion()),
          (c.fontRevision = Math.round(1e3 * a.parseFixed()) / 1e3),
          (c.checkSumAdjustment = a.parseULong()),
          (c.magicNumber = a.parseULong()),
          z.argument(1594834165 === c.magicNumber, 'Font header has wrong magic number.'),
          (c.flags = a.parseUShort()),
          (c.unitsPerEm = a.parseUShort()),
          (c.created = a.parseLongDateTime()),
          (c.modified = a.parseLongDateTime()),
          (c.xMin = a.parseShort()),
          (c.yMin = a.parseShort()),
          (c.xMax = a.parseShort()),
          (c.yMax = a.parseShort()),
          (c.macStyle = a.parseUShort()),
          (c.lowestRecPPEM = a.parseUShort()),
          (c.fontDirectionHint = a.parseShort()),
          (c.indexToLocFormat = a.parseShort()),
          (c.glyphDataFormat = a.parseShort()),
          c
        );
      },
      make: function(a) {
        var b = Math.round(new Date().getTime() / 1e3) + 2082844800,
          c = b;
        return (
          a.createdTimestamp && (c = a.createdTimestamp + 2082844800),
          new A.Table(
            'head',
            [
              { name: 'version', type: 'FIXED', value: 65536 },
              { name: 'fontRevision', type: 'FIXED', value: 65536 },
              { name: 'checkSumAdjustment', type: 'ULONG', value: 0 },
              { name: 'magicNumber', type: 'ULONG', value: 1594834165 },
              { name: 'flags', type: 'USHORT', value: 0 },
              { name: 'unitsPerEm', type: 'USHORT', value: 1e3 },
              { name: 'created', type: 'LONGDATETIME', value: c },
              { name: 'modified', type: 'LONGDATETIME', value: b },
              { name: 'xMin', type: 'SHORT', value: 0 },
              { name: 'yMin', type: 'SHORT', value: 0 },
              { name: 'xMax', type: 'SHORT', value: 0 },
              { name: 'yMax', type: 'SHORT', value: 0 },
              { name: 'macStyle', type: 'USHORT', value: 0 },
              { name: 'lowestRecPPEM', type: 'USHORT', value: 0 },
              { name: 'fontDirectionHint', type: 'SHORT', value: 2 },
              { name: 'indexToLocFormat', type: 'SHORT', value: 0 },
              { name: 'glyphDataFormat', type: 'SHORT', value: 0 },
            ],
            a
          )
        );
      },
    },
    ic = {
      parse: function(a, b) {
        var c = {};
        a = new y.Parser(a, b);
        return (
          (c.version = a.parseVersion()),
          (c.ascender = a.parseShort()),
          (c.descender = a.parseShort()),
          (c.lineGap = a.parseShort()),
          (c.advanceWidthMax = a.parseUShort()),
          (c.minLeftSideBearing = a.parseShort()),
          (c.minRightSideBearing = a.parseShort()),
          (c.xMaxExtent = a.parseShort()),
          (c.caretSlopeRise = a.parseShort()),
          (c.caretSlopeRun = a.parseShort()),
          (c.caretOffset = a.parseShort()),
          (a.relativeOffset += 8),
          (c.metricDataFormat = a.parseShort()),
          (c.numberOfHMetrics = a.parseUShort()),
          c
        );
      },
      make: function(a) {
        return new A.Table(
          'hhea',
          [
            { name: 'version', type: 'FIXED', value: 65536 },
            { name: 'ascender', type: 'FWORD', value: 0 },
            { name: 'descender', type: 'FWORD', value: 0 },
            { name: 'lineGap', type: 'FWORD', value: 0 },
            { name: 'advanceWidthMax', type: 'UFWORD', value: 0 },
            { name: 'minLeftSideBearing', type: 'FWORD', value: 0 },
            { name: 'minRightSideBearing', type: 'FWORD', value: 0 },
            { name: 'xMaxExtent', type: 'FWORD', value: 0 },
            { name: 'caretSlopeRise', type: 'SHORT', value: 1 },
            { name: 'caretSlopeRun', type: 'SHORT', value: 0 },
            { name: 'caretOffset', type: 'SHORT', value: 0 },
            { name: 'reserved1', type: 'SHORT', value: 0 },
            { name: 'reserved2', type: 'SHORT', value: 0 },
            { name: 'reserved3', type: 'SHORT', value: 0 },
            { name: 'reserved4', type: 'SHORT', value: 0 },
            { name: 'metricDataFormat', type: 'SHORT', value: 0 },
            { name: 'numberOfHMetrics', type: 'USHORT', value: 0 },
          ],
          a
        );
      },
    },
    oc = {
      parse: function(a, b, c, e, d) {
        var g, f;
        a = new y.Parser(a, b);
        for (b = 0; b < e; b += 1) {
          b < c && ((g = a.parseUShort()), (f = a.parseShort()));
          var h = d.get(b);
          h.advanceWidth = g;
          h.leftSideBearing = f;
        }
      },
      make: function(a) {
        for (var b = new A.Table('hmtx', []), c = 0; c < a.length; c += 1) {
          var e = a.get(c),
            d = e.leftSideBearing || 0;
          b.fields.push({ name: 'advanceWidth_' + c, type: 'USHORT', value: e.advanceWidth || 0 });
          b.fields.push({ name: 'leftSideBearing_' + c, type: 'SHORT', value: d });
        }
        return b;
      },
    },
    jc = {
      make: function(a) {
        for (
          var b = new A.Table('ltag', [
              { name: 'version', type: 'ULONG', value: 1 },
              { name: 'flags', type: 'ULONG', value: 0 },
              { name: 'numTags', type: 'ULONG', value: a.length },
            ]),
            c = '',
            e = 12 + 4 * a.length,
            d = 0;
          d < a.length;
          ++d
        ) {
          var f = c.indexOf(a[d]);
          0 > f && ((f = c.length), (c += a[d]));
          b.fields.push({ name: 'offset ' + d, type: 'USHORT', value: e + f });
          b.fields.push({ name: 'length ' + d, type: 'USHORT', value: a[d].length });
        }
        return b.fields.push({ name: 'stringPool', type: 'CHARARRAY', value: c }), b;
      },
      parse: function(a, b) {
        var c = new y.Parser(a, b),
          e = c.parseULong();
        z.argument(1 === e, 'Unsupported ltag table version.');
        c.skip('uLong', 1);
        e = c.parseULong();
        for (var d = [], f = 0; f < e; f++) {
          for (var n = '', h = b + c.parseUShort(), m = c.parseUShort(), k = h; k < h + m; ++k)
            n += String.fromCharCode(a.getInt8(k));
          d.push(n);
        }
        return d;
      },
    },
    kc = {
      parse: function(a, b) {
        var c = {};
        a = new y.Parser(a, b);
        return (
          (c.version = a.parseVersion()),
          (c.numGlyphs = a.parseUShort()),
          1 === c.version &&
            ((c.maxPoints = a.parseUShort()),
            (c.maxContours = a.parseUShort()),
            (c.maxCompositePoints = a.parseUShort()),
            (c.maxCompositeContours = a.parseUShort()),
            (c.maxZones = a.parseUShort()),
            (c.maxTwilightPoints = a.parseUShort()),
            (c.maxStorage = a.parseUShort()),
            (c.maxFunctionDefs = a.parseUShort()),
            (c.maxInstructionDefs = a.parseUShort()),
            (c.maxStackElements = a.parseUShort()),
            (c.maxSizeOfInstructions = a.parseUShort()),
            (c.maxComponentElements = a.parseUShort()),
            (c.maxComponentDepth = a.parseUShort())),
          c
        );
      },
      make: function(a) {
        return new A.Table('maxp', [
          { name: 'version', type: 'FIXED', value: 20480 },
          { name: 'numGlyphs', type: 'USHORT', value: a },
        ]);
      },
    },
    sc = 'copyright fontFamily fontSubfamily uniqueID fullName version postScriptName trademark manufacturer designer description manufacturerURL designerURL license licenseURL reserved preferredFamily preferredSubfamily compatibleFullName sampleText postScriptFindFontName wwsFamily wwsSubfamily'.split(
      ' '
    ),
    tc = {
      0: 'en',
      1: 'fr',
      2: 'de',
      3: 'it',
      4: 'nl',
      5: 'sv',
      6: 'es',
      7: 'da',
      8: 'pt',
      9: 'no',
      10: 'he',
      11: 'ja',
      12: 'ar',
      13: 'fi',
      14: 'el',
      15: 'is',
      16: 'mt',
      17: 'tr',
      18: 'hr',
      19: 'zh-Hant',
      20: 'ur',
      21: 'hi',
      22: 'th',
      23: 'ko',
      24: 'lt',
      25: 'pl',
      26: 'hu',
      27: 'es',
      28: 'lv',
      29: 'se',
      30: 'fo',
      31: 'fa',
      32: 'ru',
      33: 'zh',
      34: 'nl-BE',
      35: 'ga',
      36: 'sq',
      37: 'ro',
      38: 'cz',
      39: 'sk',
      40: 'si',
      41: 'yi',
      42: 'sr',
      43: 'mk',
      44: 'bg',
      45: 'uk',
      46: 'be',
      47: 'uz',
      48: 'kk',
      49: 'az-Cyrl',
      50: 'az-Arab',
      51: 'hy',
      52: 'ka',
      53: 'mo',
      54: 'ky',
      55: 'tg',
      56: 'tk',
      57: 'mn-CN',
      58: 'mn',
      59: 'ps',
      60: 'ks',
      61: 'ku',
      62: 'sd',
      63: 'bo',
      64: 'ne',
      65: 'sa',
      66: 'mr',
      67: 'bn',
      68: 'as',
      69: 'gu',
      70: 'pa',
      71: 'or',
      72: 'ml',
      73: 'kn',
      74: 'ta',
      75: 'te',
      76: 'si',
      77: 'my',
      78: 'km',
      79: 'lo',
      80: 'vi',
      81: 'id',
      82: 'tl',
      83: 'ms',
      84: 'ms-Arab',
      85: 'am',
      86: 'ti',
      87: 'om',
      88: 'so',
      89: 'sw',
      90: 'rw',
      91: 'rn',
      92: 'ny',
      93: 'mg',
      94: 'eo',
      128: 'cy',
      129: 'eu',
      130: 'ca',
      131: 'la',
      132: 'qu',
      133: 'gn',
      134: 'ay',
      135: 'tt',
      136: 'ug',
      137: 'dz',
      138: 'jv',
      139: 'su',
      140: 'gl',
      141: 'af',
      142: 'br',
      143: 'iu',
      144: 'gd',
      145: 'gv',
      146: 'ga',
      147: 'to',
      148: 'el-polyton',
      149: 'kl',
      150: 'az',
      151: 'nn',
    },
    Uc = {
      0: 0,
      1: 0,
      2: 0,
      3: 0,
      4: 0,
      5: 0,
      6: 0,
      7: 0,
      8: 0,
      9: 0,
      10: 5,
      11: 1,
      12: 4,
      13: 0,
      14: 6,
      15: 0,
      16: 0,
      17: 0,
      18: 0,
      19: 2,
      20: 4,
      21: 9,
      22: 21,
      23: 3,
      24: 29,
      25: 29,
      26: 29,
      27: 29,
      28: 29,
      29: 0,
      30: 0,
      31: 4,
      32: 7,
      33: 25,
      34: 0,
      35: 0,
      36: 0,
      37: 0,
      38: 29,
      39: 29,
      40: 0,
      41: 5,
      42: 7,
      43: 7,
      44: 7,
      45: 7,
      46: 7,
      47: 7,
      48: 7,
      49: 7,
      50: 4,
      51: 24,
      52: 23,
      53: 7,
      54: 7,
      55: 7,
      56: 7,
      57: 27,
      58: 7,
      59: 4,
      60: 4,
      61: 4,
      62: 4,
      63: 26,
      64: 9,
      65: 9,
      66: 9,
      67: 13,
      68: 13,
      69: 11,
      70: 10,
      71: 12,
      72: 17,
      73: 16,
      74: 14,
      75: 15,
      76: 18,
      77: 19,
      78: 20,
      79: 22,
      80: 30,
      81: 0,
      82: 0,
      83: 0,
      84: 4,
      85: 28,
      86: 28,
      87: 28,
      88: 0,
      89: 0,
      90: 0,
      91: 0,
      92: 0,
      93: 0,
      94: 0,
      128: 0,
      129: 0,
      130: 0,
      131: 0,
      132: 0,
      133: 0,
      134: 0,
      135: 7,
      136: 4,
      137: 26,
      138: 0,
      139: 0,
      140: 0,
      141: 0,
      142: 0,
      143: 28,
      144: 0,
      145: 0,
      146: 0,
      147: 0,
      148: 6,
      149: 0,
      150: 0,
      151: 0,
    },
    uc = {
      1078: 'af',
      1052: 'sq',
      1156: 'gsw',
      1118: 'am',
      5121: 'ar-DZ',
      15361: 'ar-BH',
      3073: 'ar',
      2049: 'ar-IQ',
      11265: 'ar-JO',
      13313: 'ar-KW',
      12289: 'ar-LB',
      4097: 'ar-LY',
      6145: 'ary',
      8193: 'ar-OM',
      16385: 'ar-QA',
      1025: 'ar-SA',
      10241: 'ar-SY',
      7169: 'aeb',
      14337: 'ar-AE',
      9217: 'ar-YE',
      1067: 'hy',
      1101: 'as',
      2092: 'az-Cyrl',
      1068: 'az',
      1133: 'ba',
      1069: 'eu',
      1059: 'be',
      2117: 'bn',
      1093: 'bn-IN',
      8218: 'bs-Cyrl',
      5146: 'bs',
      1150: 'br',
      1026: 'bg',
      1027: 'ca',
      3076: 'zh-HK',
      5124: 'zh-MO',
      2052: 'zh',
      4100: 'zh-SG',
      1028: 'zh-TW',
      1155: 'co',
      1050: 'hr',
      4122: 'hr-BA',
      1029: 'cs',
      1030: 'da',
      1164: 'prs',
      1125: 'dv',
      2067: 'nl-BE',
      1043: 'nl',
      3081: 'en-AU',
      10249: 'en-BZ',
      4105: 'en-CA',
      9225: 'en-029',
      16393: 'en-IN',
      6153: 'en-IE',
      8201: 'en-JM',
      17417: 'en-MY',
      5129: 'en-NZ',
      13321: 'en-PH',
      18441: 'en-SG',
      7177: 'en-ZA',
      11273: 'en-TT',
      2057: 'en-GB',
      1033: 'en',
      12297: 'en-ZW',
      1061: 'et',
      1080: 'fo',
      1124: 'fil',
      1035: 'fi',
      2060: 'fr-BE',
      3084: 'fr-CA',
      1036: 'fr',
      5132: 'fr-LU',
      6156: 'fr-MC',
      4108: 'fr-CH',
      1122: 'fy',
      1110: 'gl',
      1079: 'ka',
      3079: 'de-AT',
      1031: 'de',
      5127: 'de-LI',
      4103: 'de-LU',
      2055: 'de-CH',
      1032: 'el',
      1135: 'kl',
      1095: 'gu',
      1128: 'ha',
      1037: 'he',
      1081: 'hi',
      1038: 'hu',
      1039: 'is',
      1136: 'ig',
      1057: 'id',
      1117: 'iu',
      2141: 'iu-Latn',
      2108: 'ga',
      1076: 'xh',
      1077: 'zu',
      1040: 'it',
      2064: 'it-CH',
      1041: 'ja',
      1099: 'kn',
      1087: 'kk',
      1107: 'km',
      1158: 'quc',
      1159: 'rw',
      1089: 'sw',
      1111: 'kok',
      1042: 'ko',
      1088: 'ky',
      1108: 'lo',
      1062: 'lv',
      1063: 'lt',
      2094: 'dsb',
      1134: 'lb',
      1071: 'mk',
      2110: 'ms-BN',
      1086: 'ms',
      1100: 'ml',
      1082: 'mt',
      1153: 'mi',
      1146: 'arn',
      1102: 'mr',
      1148: 'moh',
      1104: 'mn',
      2128: 'mn-CN',
      1121: 'ne',
      1044: 'nb',
      2068: 'nn',
      1154: 'oc',
      1096: 'or',
      1123: 'ps',
      1045: 'pl',
      1046: 'pt',
      2070: 'pt-PT',
      1094: 'pa',
      1131: 'qu-BO',
      2155: 'qu-EC',
      3179: 'qu',
      1048: 'ro',
      1047: 'rm',
      1049: 'ru',
      9275: 'smn',
      4155: 'smj-NO',
      5179: 'smj',
      3131: 'se-FI',
      1083: 'se',
      2107: 'se-SE',
      8251: 'sms',
      6203: 'sma-NO',
      7227: 'sms',
      1103: 'sa',
      7194: 'sr-Cyrl-BA',
      3098: 'sr',
      6170: 'sr-Latn-BA',
      2074: 'sr-Latn',
      1132: 'nso',
      1074: 'tn',
      1115: 'si',
      1051: 'sk',
      1060: 'sl',
      11274: 'es-AR',
      16394: 'es-BO',
      13322: 'es-CL',
      9226: 'es-CO',
      5130: 'es-CR',
      7178: 'es-DO',
      12298: 'es-EC',
      17418: 'es-SV',
      4106: 'es-GT',
      18442: 'es-HN',
      2058: 'es-MX',
      19466: 'es-NI',
      6154: 'es-PA',
      15370: 'es-PY',
      10250: 'es-PE',
      20490: 'es-PR',
      3082: 'es',
      1034: 'es',
      21514: 'es-US',
      14346: 'es-UY',
      8202: 'es-VE',
      2077: 'sv-FI',
      1053: 'sv',
      1114: 'syr',
      1064: 'tg',
      2143: 'tzm',
      1097: 'ta',
      1092: 'tt',
      1098: 'te',
      1054: 'th',
      1105: 'bo',
      1055: 'tr',
      1090: 'tk',
      1152: 'ug',
      1058: 'uk',
      1070: 'hsb',
      1056: 'ur',
      2115: 'uz-Cyrl',
      1091: 'uz',
      1066: 'vi',
      1106: 'cy',
      1160: 'wo',
      1157: 'sah',
      1144: 'ii',
      1130: 'yo',
    },
    Ac = {
      0: 'macintosh',
      1: 'x-mac-japanese',
      2: 'x-mac-chinesetrad',
      3: 'x-mac-korean',
      6: 'x-mac-greek',
      7: 'x-mac-cyrillic',
      9: 'x-mac-devanagai',
      10: 'x-mac-gurmukhi',
      11: 'x-mac-gujarati',
      12: 'x-mac-oriya',
      13: 'x-mac-bengali',
      14: 'x-mac-tamil',
      15: 'x-mac-telugu',
      16: 'x-mac-kannada',
      17: 'x-mac-malayalam',
      18: 'x-mac-sinhalese',
      19: 'x-mac-burmese',
      20: 'x-mac-khmer',
      21: 'x-mac-thai',
      22: 'x-mac-lao',
      23: 'x-mac-georgian',
      24: 'x-mac-armenian',
      25: 'x-mac-chinesesimp',
      26: 'x-mac-tibetan',
      27: 'x-mac-mongolian',
      28: 'x-mac-ethiopic',
      29: 'x-mac-ce',
      30: 'x-mac-vietnamese',
      31: 'x-mac-extarabic',
    },
    zc = {
      15: 'x-mac-icelandic',
      17: 'x-mac-turkish',
      18: 'x-mac-croatian',
      24: 'x-mac-ce',
      25: 'x-mac-ce',
      26: 'x-mac-ce',
      27: 'x-mac-ce',
      28: 'x-mac-ce',
      30: 'x-mac-icelandic',
      37: 'x-mac-romanian',
      38: 'x-mac-ce',
      39: 'x-mac-ce',
      40: 'x-mac-ce',
      143: 'x-mac-inuit',
      146: 'x-mac-gaelic',
    },
    mc = {
      parse: function(a, b, c) {
        var e = {};
        b = new y.Parser(a, b);
        for (
          var d = b.parseUShort(), f = b.parseUShort(), n = b.offset + b.parseUShort(), h = 0;
          h < f;
          h++
        ) {
          var m = b.parseUShort(),
            k = b.parseUShort(),
            p = b.parseUShort(),
            l = b.parseUShort();
          l = sc[l] || l;
          var q = b.parseUShort(),
            u = b.parseUShort();
          a: {
            switch (m) {
              case 0:
                if (65535 === p) {
                  var t = 'und';
                  break a;
                }
                if (c) {
                  t = c[p];
                  break a;
                }
                break;
              case 1:
                t = tc[p];
                break a;
              case 3:
                t = uc[p];
                break a;
            }
            t = void 0;
          }
          m = xb(m, k, p);
          void 0 !== m &&
            void 0 !== t &&
            (m = 'utf-16' === m ? ja.UTF16(a, n + u, q) : ja.MACSTRING(a, n + u, q, m)) &&
            ((k = e[l]), void 0 === k && (k = e[l] = {}), (k[t] = m));
        }
        return 1 === d && b.parseUShort(), e;
      },
      make: function(a, b) {
        var c,
          e = [],
          d = {},
          f = Na(sc);
        for (h in a) {
          var n = f[h];
          if ((void 0 === n && (n = h), (c = parseInt(n)), isNaN(c)))
            throw Error(
              'Name table entry "' + h + '" does not exist, see nameTableNames for complete list.'
            );
          d[c] = a[h];
          e.push(c);
        }
        var h = Na(tc);
        n = Na(uc);
        a = [];
        f = [];
        for (var m = 0; m < e.length; m++) {
          var k = d[(c = e[m])],
            p;
          for (p in k) {
            var l = k[p],
              q = 1,
              t = h[p],
              w = Uc[t],
              x = xb(q, w, t);
            x = u.MACSTRING(l, x);
            void 0 === x &&
              ((q = 0),
              0 > (t = b.indexOf(p)) && ((t = b.length), b.push(p)),
              (w = 4),
              (x = u.UTF16(l)));
            var v = zb(x, f);
            a.push(yb(q, w, t, c, x.length, v));
            q = n[p];
            void 0 !== q && ((l = u.UTF16(l)), (t = zb(l, f)), a.push(yb(3, 1, q, c, l.length, t)));
          }
        }
        a.sort(function(a, b) {
          return (
            a.platformID - b.platformID ||
            a.encodingID - b.encodingID ||
            a.languageID - b.languageID ||
            a.nameID - b.nameID
          );
        });
        b = new A.Table('name', [
          { name: 'format', type: 'USHORT', value: 0 },
          { name: 'count', type: 'USHORT', value: a.length },
          { name: 'stringOffset', type: 'USHORT', value: 6 + 12 * a.length },
        ]);
        for (c = 0; c < a.length; c++)
          b.fields.push({ name: 'record_' + c, type: 'RECORD', value: a[c] });
        return b.fields.push({ name: 'strings', type: 'LITERAL', value: f }), b;
      },
    },
    Za = [
      { begin: 0, end: 127 },
      { begin: 128, end: 255 },
      { begin: 256, end: 383 },
      { begin: 384, end: 591 },
      { begin: 592, end: 687 },
      { begin: 688, end: 767 },
      { begin: 768, end: 879 },
      { begin: 880, end: 1023 },
      { begin: 11392, end: 11519 },
      { begin: 1024, end: 1279 },
      { begin: 1328, end: 1423 },
      { begin: 1424, end: 1535 },
      { begin: 42240, end: 42559 },
      { begin: 1536, end: 1791 },
      { begin: 1984, end: 2047 },
      { begin: 2304, end: 2431 },
      { begin: 2432, end: 2559 },
      { begin: 2560, end: 2687 },
      { begin: 2688, end: 2815 },
      { begin: 2816, end: 2943 },
      { begin: 2944, end: 3071 },
      { begin: 3072, end: 3199 },
      { begin: 3200, end: 3327 },
      { begin: 3328, end: 3455 },
      { begin: 3584, end: 3711 },
      { begin: 3712, end: 3839 },
      { begin: 4256, end: 4351 },
      { begin: 6912, end: 7039 },
      { begin: 4352, end: 4607 },
      { begin: 7680, end: 7935 },
      { begin: 7936, end: 8191 },
      { begin: 8192, end: 8303 },
      { begin: 8304, end: 8351 },
      { begin: 8352, end: 8399 },
      { begin: 8400, end: 8447 },
      { begin: 8448, end: 8527 },
      { begin: 8528, end: 8591 },
      { begin: 8592, end: 8703 },
      { begin: 8704, end: 8959 },
      { begin: 8960, end: 9215 },
      { begin: 9216, end: 9279 },
      { begin: 9280, end: 9311 },
      { begin: 9312, end: 9471 },
      { begin: 9472, end: 9599 },
      { begin: 9600, end: 9631 },
      { begin: 9632, end: 9727 },
      { begin: 9728, end: 9983 },
      { begin: 9984, end: 10175 },
      { begin: 12288, end: 12351 },
      { begin: 12352, end: 12447 },
      { begin: 12448, end: 12543 },
      { begin: 12544, end: 12591 },
      { begin: 12592, end: 12687 },
      { begin: 43072, end: 43135 },
      { begin: 12800, end: 13055 },
      { begin: 13056, end: 13311 },
      { begin: 44032, end: 55215 },
      { begin: 55296, end: 57343 },
      { begin: 67840, end: 67871 },
      { begin: 19968, end: 40959 },
      { begin: 57344, end: 63743 },
      { begin: 12736, end: 12783 },
      { begin: 64256, end: 64335 },
      { begin: 64336, end: 65023 },
      { begin: 65056, end: 65071 },
      { begin: 65040, end: 65055 },
      { begin: 65104, end: 65135 },
      { begin: 65136, end: 65279 },
      { begin: 65280, end: 65519 },
      { begin: 65520, end: 65535 },
      { begin: 3840, end: 4095 },
      { begin: 1792, end: 1871 },
      { begin: 1920, end: 1983 },
      { begin: 3456, end: 3583 },
      { begin: 4096, end: 4255 },
      { begin: 4608, end: 4991 },
      { begin: 5024, end: 5119 },
      { begin: 5120, end: 5759 },
      { begin: 5760, end: 5791 },
      { begin: 5792, end: 5887 },
      { begin: 6016, end: 6143 },
      { begin: 6144, end: 6319 },
      { begin: 10240, end: 10495 },
      { begin: 40960, end: 42127 },
      { begin: 5888, end: 5919 },
      { begin: 66304, end: 66351 },
      { begin: 66352, end: 66383 },
      { begin: 66560, end: 66639 },
      { begin: 118784, end: 119039 },
      { begin: 119808, end: 120831 },
      { begin: 1044480, end: 1048573 },
      { begin: 65024, end: 65039 },
      { begin: 917504, end: 917631 },
      { begin: 6400, end: 6479 },
      { begin: 6480, end: 6527 },
      { begin: 6528, end: 6623 },
      { begin: 6656, end: 6687 },
      { begin: 11264, end: 11359 },
      { begin: 11568, end: 11647 },
      { begin: 19904, end: 19967 },
      { begin: 43008, end: 43055 },
      { begin: 65536, end: 65663 },
      { begin: 65856, end: 65935 },
      { begin: 66432, end: 66463 },
      { begin: 66464, end: 66527 },
      { begin: 66640, end: 66687 },
      { begin: 66688, end: 66735 },
      { begin: 67584, end: 67647 },
      { begin: 68096, end: 68191 },
      { begin: 119552, end: 119647 },
      { begin: 73728, end: 74751 },
      { begin: 119648, end: 119679 },
      { begin: 7040, end: 7103 },
      { begin: 7168, end: 7247 },
      { begin: 7248, end: 7295 },
      { begin: 43136, end: 43231 },
      { begin: 43264, end: 43311 },
      { begin: 43312, end: 43359 },
      { begin: 43520, end: 43615 },
      { begin: 65936, end: 65999 },
      { begin: 66e3, end: 66047 },
      { begin: 66208, end: 66271 },
      { begin: 127024, end: 127135 },
    ],
    Va = {
      parse: function(a, b) {
        var c = {};
        a = new y.Parser(a, b);
        c.version = a.parseUShort();
        c.xAvgCharWidth = a.parseShort();
        c.usWeightClass = a.parseUShort();
        c.usWidthClass = a.parseUShort();
        c.fsType = a.parseUShort();
        c.ySubscriptXSize = a.parseShort();
        c.ySubscriptYSize = a.parseShort();
        c.ySubscriptXOffset = a.parseShort();
        c.ySubscriptYOffset = a.parseShort();
        c.ySuperscriptXSize = a.parseShort();
        c.ySuperscriptYSize = a.parseShort();
        c.ySuperscriptXOffset = a.parseShort();
        c.ySuperscriptYOffset = a.parseShort();
        c.yStrikeoutSize = a.parseShort();
        c.yStrikeoutPosition = a.parseShort();
        c.sFamilyClass = a.parseShort();
        c.panose = [];
        for (b = 0; 10 > b; b++) c.panose[b] = a.parseByte();
        return (
          (c.ulUnicodeRange1 = a.parseULong()),
          (c.ulUnicodeRange2 = a.parseULong()),
          (c.ulUnicodeRange3 = a.parseULong()),
          (c.ulUnicodeRange4 = a.parseULong()),
          (c.achVendID = String.fromCharCode(
            a.parseByte(),
            a.parseByte(),
            a.parseByte(),
            a.parseByte()
          )),
          (c.fsSelection = a.parseUShort()),
          (c.usFirstCharIndex = a.parseUShort()),
          (c.usLastCharIndex = a.parseUShort()),
          (c.sTypoAscender = a.parseShort()),
          (c.sTypoDescender = a.parseShort()),
          (c.sTypoLineGap = a.parseShort()),
          (c.usWinAscent = a.parseUShort()),
          (c.usWinDescent = a.parseUShort()),
          1 <= c.version &&
            ((c.ulCodePageRange1 = a.parseULong()), (c.ulCodePageRange2 = a.parseULong())),
          2 <= c.version &&
            ((c.sxHeight = a.parseShort()),
            (c.sCapHeight = a.parseShort()),
            (c.usDefaultChar = a.parseUShort()),
            (c.usBreakChar = a.parseUShort()),
            (c.usMaxContent = a.parseUShort())),
          c
        );
      },
      make: function(a) {
        return new A.Table(
          'OS/2',
          [
            { name: 'version', type: 'USHORT', value: 3 },
            { name: 'xAvgCharWidth', type: 'SHORT', value: 0 },
            { name: 'usWeightClass', type: 'USHORT', value: 0 },
            { name: 'usWidthClass', type: 'USHORT', value: 0 },
            { name: 'fsType', type: 'USHORT', value: 0 },
            { name: 'ySubscriptXSize', type: 'SHORT', value: 650 },
            { name: 'ySubscriptYSize', type: 'SHORT', value: 699 },
            { name: 'ySubscriptXOffset', type: 'SHORT', value: 0 },
            { name: 'ySubscriptYOffset', type: 'SHORT', value: 140 },
            { name: 'ySuperscriptXSize', type: 'SHORT', value: 650 },
            { name: 'ySuperscriptYSize', type: 'SHORT', value: 699 },
            { name: 'ySuperscriptXOffset', type: 'SHORT', value: 0 },
            { name: 'ySuperscriptYOffset', type: 'SHORT', value: 479 },
            { name: 'yStrikeoutSize', type: 'SHORT', value: 49 },
            { name: 'yStrikeoutPosition', type: 'SHORT', value: 258 },
            { name: 'sFamilyClass', type: 'SHORT', value: 0 },
            { name: 'bFamilyType', type: 'BYTE', value: 0 },
            { name: 'bSerifStyle', type: 'BYTE', value: 0 },
            { name: 'bWeight', type: 'BYTE', value: 0 },
            { name: 'bProportion', type: 'BYTE', value: 0 },
            { name: 'bContrast', type: 'BYTE', value: 0 },
            { name: 'bStrokeVariation', type: 'BYTE', value: 0 },
            { name: 'bArmStyle', type: 'BYTE', value: 0 },
            { name: 'bLetterform', type: 'BYTE', value: 0 },
            { name: 'bMidline', type: 'BYTE', value: 0 },
            { name: 'bXHeight', type: 'BYTE', value: 0 },
            { name: 'ulUnicodeRange1', type: 'ULONG', value: 0 },
            { name: 'ulUnicodeRange2', type: 'ULONG', value: 0 },
            { name: 'ulUnicodeRange3', type: 'ULONG', value: 0 },
            { name: 'ulUnicodeRange4', type: 'ULONG', value: 0 },
            { name: 'achVendID', type: 'CHARARRAY', value: 'XXXX' },
            { name: 'fsSelection', type: 'USHORT', value: 0 },
            { name: 'usFirstCharIndex', type: 'USHORT', value: 0 },
            { name: 'usLastCharIndex', type: 'USHORT', value: 0 },
            { name: 'sTypoAscender', type: 'SHORT', value: 0 },
            { name: 'sTypoDescender', type: 'SHORT', value: 0 },
            { name: 'sTypoLineGap', type: 'SHORT', value: 0 },
            { name: 'usWinAscent', type: 'USHORT', value: 0 },
            { name: 'usWinDescent', type: 'USHORT', value: 0 },
            { name: 'ulCodePageRange1', type: 'ULONG', value: 0 },
            { name: 'ulCodePageRange2', type: 'ULONG', value: 0 },
            { name: 'sxHeight', type: 'SHORT', value: 0 },
            { name: 'sCapHeight', type: 'SHORT', value: 0 },
            { name: 'usDefaultChar', type: 'USHORT', value: 0 },
            { name: 'usBreakChar', type: 'USHORT', value: 0 },
            { name: 'usMaxContext', type: 'USHORT', value: 0 },
          ],
          a
        );
      },
      unicodeRanges: Za,
      getUnicodeRange: function(a) {
        for (var b = 0; b < Za.length; b += 1) {
          var c = Za[b];
          if (a >= c.begin && a < c.end) return b;
        }
        return -1;
      },
    },
    lc = {
      parse: function(a, b) {
        var c = {};
        a = new y.Parser(a, b);
        switch (
          ((c.version = a.parseVersion()),
          (c.italicAngle = a.parseFixed()),
          (c.underlinePosition = a.parseShort()),
          (c.underlineThickness = a.parseShort()),
          (c.isFixedPitch = a.parseULong()),
          (c.minMemType42 = a.parseULong()),
          (c.maxMemType42 = a.parseULong()),
          (c.minMemType1 = a.parseULong()),
          (c.maxMemType1 = a.parseULong()),
          c.version)
        ) {
          case 1:
            c.names = ea.slice();
            break;
          case 2:
            c.numberOfGlyphs = a.parseUShort();
            c.glyphNameIndex = Array(c.numberOfGlyphs);
            for (b = 0; b < c.numberOfGlyphs; b++) c.glyphNameIndex[b] = a.parseUShort();
            c.names = [];
            for (b = 0; b < c.numberOfGlyphs; b++)
              if (c.glyphNameIndex[b] >= ea.length) {
                var e = a.parseChar();
                c.names.push(a.parseString(e));
              }
            break;
          case 2.5:
            for (
              c.numberOfGlyphs = a.parseUShort(), c.offset = Array(c.numberOfGlyphs), b = 0;
              b < c.numberOfGlyphs;
              b++
            )
              c.offset[b] = a.parseChar();
        }
        return c;
      },
      make: function() {
        return new A.Table('post', [
          { name: 'version', type: 'FIXED', value: 196608 },
          { name: 'italicAngle', type: 'FIXED', value: 0 },
          { name: 'underlinePosition', type: 'FWORD', value: 0 },
          { name: 'underlineThickness', type: 'FWORD', value: 0 },
          { name: 'isFixedPitch', type: 'ULONG', value: 0 },
          { name: 'minMemType42', type: 'ULONG', value: 0 },
          { name: 'maxMemType42', type: 'ULONG', value: 0 },
          { name: 'minMemType1', type: 'ULONG', value: 0 },
          { name: 'maxMemType1', type: 'ULONG', value: 0 },
        ]);
      },
    },
    R = Array(9);
  R[1] = function() {
    var a = this.offset + this.relativeOffset,
      b = this.parseUShort();
    return 1 === b
      ? {
          substFormat: 1,
          coverage: this.parsePointer(l.coverage),
          deltaGlyphId: this.parseUShort(),
        }
      : 2 === b
      ? {
          substFormat: 2,
          coverage: this.parsePointer(l.coverage),
          substitute: this.parseOffset16List(),
        }
      : void z.assert(!1, '0x' + a.toString(16) + ': lookup type 1 format must be 1 or 2.');
  };
  R[2] = function() {
    var a = this.parseUShort();
    return (
      z.argument(1 === a, 'GSUB Multiple Substitution Subtable identifier-format must be 1'),
      {
        substFormat: a,
        coverage: this.parsePointer(l.coverage),
        sequences: this.parseListOfLists(),
      }
    );
  };
  R[3] = function() {
    var a = this.parseUShort();
    return (
      z.argument(1 === a, 'GSUB Alternate Substitution Subtable identifier-format must be 1'),
      {
        substFormat: a,
        coverage: this.parsePointer(l.coverage),
        alternateSets: this.parseListOfLists(),
      }
    );
  };
  R[4] = function() {
    var a = this.parseUShort();
    return (
      z.argument(1 === a, 'GSUB ligature table identifier-format must be 1'),
      {
        substFormat: a,
        coverage: this.parsePointer(l.coverage),
        ligatureSets: this.parseListOfLists(function() {
          return {
            ligGlyph: this.parseUShort(),
            components: this.parseUShortList(this.parseUShort() - 1),
          };
        }),
      }
    );
  };
  var ka = { sequenceIndex: l.uShort, lookupListIndex: l.uShort };
  R[5] = function() {
    var a = this.offset + this.relativeOffset,
      b = this.parseUShort();
    if (1 === b)
      return {
        substFormat: b,
        coverage: this.parsePointer(l.coverage),
        ruleSets: this.parseListOfLists(function() {
          var a = this.parseUShort(),
            b = this.parseUShort();
          return { input: this.parseUShortList(a - 1), lookupRecords: this.parseRecordList(b, ka) };
        }),
      };
    if (2 === b)
      return {
        substFormat: b,
        coverage: this.parsePointer(l.coverage),
        classDef: this.parsePointer(l.classDef),
        classSets: this.parseListOfLists(function() {
          var a = this.parseUShort(),
            b = this.parseUShort();
          return {
            classes: this.parseUShortList(a - 1),
            lookupRecords: this.parseRecordList(b, ka),
          };
        }),
      };
    if (3 === b) {
      a = this.parseUShort();
      var c = this.parseUShort();
      return {
        substFormat: b,
        coverages: this.parseList(a, l.pointer(l.coverage)),
        lookupRecords: this.parseRecordList(c, ka),
      };
    }
    z.assert(!1, '0x' + a.toString(16) + ': lookup type 5 format must be 1, 2 or 3.');
  };
  R[6] = function() {
    var a = this.offset + this.relativeOffset,
      b = this.parseUShort();
    return 1 === b
      ? {
          substFormat: 1,
          coverage: this.parsePointer(l.coverage),
          chainRuleSets: this.parseListOfLists(function() {
            return {
              backtrack: this.parseUShortList(),
              input: this.parseUShortList(this.parseShort() - 1),
              lookahead: this.parseUShortList(),
              lookupRecords: this.parseRecordList(ka),
            };
          }),
        }
      : 2 === b
      ? {
          substFormat: 2,
          coverage: this.parsePointer(l.coverage),
          backtrackClassDef: this.parsePointer(l.classDef),
          inputClassDef: this.parsePointer(l.classDef),
          lookaheadClassDef: this.parsePointer(l.classDef),
          chainClassSet: this.parseListOfLists(function() {
            return {
              backtrack: this.parseUShortList(),
              input: this.parseUShortList(this.parseShort() - 1),
              lookahead: this.parseUShortList(),
              lookupRecords: this.parseRecordList(ka),
            };
          }),
        }
      : 3 === b
      ? {
          substFormat: 3,
          backtrackCoverage: this.parseList(l.pointer(l.coverage)),
          inputCoverage: this.parseList(l.pointer(l.coverage)),
          lookaheadCoverage: this.parseList(l.pointer(l.coverage)),
          lookupRecords: this.parseRecordList(ka),
        }
      : void z.assert(!1, '0x' + a.toString(16) + ': lookup type 6 format must be 1, 2 or 3.');
  };
  R[7] = function() {
    var a = this.parseUShort();
    z.argument(1 === a, 'GSUB Extension Substitution subtable identifier-format must be 1');
    a = this.parseUShort();
    var b = new l(this.data, this.offset + this.parseULong());
    return { substFormat: 1, lookupType: a, extension: R[a].call(b) };
  };
  R[8] = function() {
    var a = this.parseUShort();
    return (
      z.argument(
        1 === a,
        'GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1'
      ),
      {
        substFormat: a,
        coverage: this.parsePointer(l.coverage),
        backtrackCoverage: this.parseList(l.pointer(l.coverage)),
        lookaheadCoverage: this.parseList(l.pointer(l.coverage)),
        substitutes: this.parseUShortList(),
      }
    );
  };
  var Fa = Array(9);
  Fa[1] = function(a) {
    return 1 === a.substFormat
      ? new A.Table('substitutionTable', [
          { name: 'substFormat', type: 'USHORT', value: 1 },
          { name: 'coverage', type: 'TABLE', value: new A.Coverage(a.coverage) },
          { name: 'deltaGlyphID', type: 'USHORT', value: a.deltaGlyphId },
        ])
      : new A.Table(
          'substitutionTable',
          [
            { name: 'substFormat', type: 'USHORT', value: 2 },
            { name: 'coverage', type: 'TABLE', value: new A.Coverage(a.coverage) },
          ].concat(A.ushortList('substitute', a.substitute))
        );
  };
  Fa[3] = function(a) {
    return (
      z.assert(1 === a.substFormat, 'Lookup type 3 substFormat must be 1.'),
      new A.Table(
        'substitutionTable',
        [
          { name: 'substFormat', type: 'USHORT', value: 1 },
          { name: 'coverage', type: 'TABLE', value: new A.Coverage(a.coverage) },
        ].concat(
          A.tableList('altSet', a.alternateSets, function(a) {
            return new A.Table('alternateSetTable', A.ushortList('alternate', a));
          })
        )
      )
    );
  };
  Fa[4] = function(a) {
    return (
      z.assert(1 === a.substFormat, 'Lookup type 4 substFormat must be 1.'),
      new A.Table(
        'substitutionTable',
        [
          { name: 'substFormat', type: 'USHORT', value: 1 },
          { name: 'coverage', type: 'TABLE', value: new A.Coverage(a.coverage) },
        ].concat(
          A.tableList('ligSet', a.ligatureSets, function(a) {
            return new A.Table(
              'ligatureSetTable',
              A.tableList('ligature', a, function(a) {
                return new A.Table(
                  'ligatureTable',
                  [{ name: 'ligGlyph', type: 'USHORT', value: a.ligGlyph }].concat(
                    A.ushortList('component', a.components, a.components.length + 1)
                  )
                );
              })
            );
          })
        )
      )
    );
  };
  var pc = {
      parse: function(a, b) {
        a = new l(a, b || 0);
        b = a.parseVersion(1);
        return (
          z.argument(1 === b || 1.1 === b, 'Unsupported GSUB table version.'),
          1 === b
            ? {
                version: b,
                scripts: a.parseScriptList(),
                features: a.parseFeatureList(),
                lookups: a.parseLookupList(R),
              }
            : {
                version: b,
                scripts: a.parseScriptList(),
                features: a.parseFeatureList(),
                lookups: a.parseLookupList(R),
                variations: a.parseFeatureVariationsList(),
              }
        );
      },
      make: function(a) {
        return new A.Table('GSUB', [
          { name: 'version', type: 'ULONG', value: 65536 },
          { name: 'scripts', type: 'TABLE', value: new A.ScriptList(a.scripts) },
          { name: 'features', type: 'TABLE', value: new A.FeatureList(a.features) },
          { name: 'lookups', type: 'TABLE', value: new A.LookupList(a.lookups, Fa) },
        ]);
      },
    },
    qc = {
      parse: function(a, b) {
        var c = new y.Parser(a, b),
          e = c.parseULong();
        z.argument(1 === e, 'Unsupported META table version.');
        c.parseULong();
        c.parseULong();
        e = c.parseULong();
        for (var d = {}, f = 0; f < e; f++) {
          var h = c.parseTag(),
            k = c.parseULong(),
            m = c.parseULong();
          k = ja.UTF8(a, b + k, m);
          d[h] = k;
        }
        return d;
      },
      make: function(a) {
        var b = Object.keys(a).length,
          c = '',
          e = 16 + 12 * b;
        b = new A.Table('meta', [
          { name: 'version', type: 'ULONG', value: 1 },
          { name: 'flags', type: 'ULONG', value: 0 },
          { name: 'offset', type: 'ULONG', value: e },
          { name: 'numTags', type: 'ULONG', value: b },
        ]);
        for (var d in a) {
          var f = c.length;
          c += a[d];
          b.fields.push({ name: 'tag ' + d, type: 'TAG', value: d });
          b.fields.push({ name: 'offset ' + d, type: 'ULONG', value: e + f });
          b.fields.push({ name: 'length ' + d, type: 'ULONG', value: a[d].length });
        }
        return b.fields.push({ name: 'stringPool', type: 'CHARARRAY', value: c }), b;
      },
    },
    Vc = {
      make: Bb,
      fontToTable: function(a) {
        for (
          var b,
            c = [],
            e = [],
            d = [],
            f = [],
            h = [],
            k = [],
            m = [],
            l = 0,
            p = 0,
            q = 0,
            t = 0,
            u = 0,
            w = 0;
          w < a.glyphs.length;
          w += 1
        ) {
          var x = a.glyphs.get(w),
            v = 0 | x.unicode;
          if (isNaN(x.advanceWidth))
            throw Error('Glyph ' + x.name + ' (' + w + '): advanceWidth is not a number.');
          (v < b || void 0 === b) && 0 < v && (b = v);
          l < v && (l = v);
          v = Va.getUnicodeRange(v);
          if (32 > v) p |= 1 << v;
          else if (64 > v) q |= 1 << (v - 32);
          else if (96 > v) t |= 1 << (v - 64);
          else {
            if (!(123 > v))
              throw Error('Unicode ranges bits > 123 are reserved for internal usage');
            u |= 1 << (v - 96);
          }
          '.notdef' !== x.name &&
            ((v = x.getMetrics()),
            c.push(v.xMin),
            e.push(v.yMin),
            d.push(v.xMax),
            f.push(v.yMax),
            k.push(v.leftSideBearing),
            m.push(v.rightSideBearing),
            h.push(x.advanceWidth));
        }
        c = Math.min.apply(null, c);
        e = Math.min.apply(null, e);
        d = Math.max.apply(null, d);
        f = Math.max.apply(null, f);
        w = Math.max.apply(null, h);
        for (v = x = 0; v < h.length; v += 1) x += h[v];
        f = {
          xMin: c,
          yMin: e,
          xMax: d,
          yMax: f,
          advanceWidthMax: w,
          advanceWidthAvg: x / h.length,
          minLeftSideBearing: Math.min.apply(null, k),
          maxLeftSideBearing: Math.max.apply(null, k),
          minRightSideBearing: Math.min.apply(null, m),
        };
        f.ascender = a.ascender;
        f.descender = a.descender;
        h = hc.make({
          flags: 3,
          unitsPerEm: a.unitsPerEm,
          xMin: f.xMin,
          yMin: f.yMin,
          xMax: f.xMax,
          yMax: f.yMax,
          lowestRecPPEM: 3,
          createdTimestamp: a.createdTimestamp,
        });
        k = ic.make({
          ascender: f.ascender,
          descender: f.descender,
          advanceWidthMax: f.advanceWidthMax,
          minLeftSideBearing: f.minLeftSideBearing,
          minRightSideBearing: f.minRightSideBearing,
          xMaxExtent: f.maxLeftSideBearing + (f.xMax - f.xMin),
          numberOfHMetrics: a.glyphs.length,
        });
        m = kc.make(a.glyphs.length);
        b = Va.make({
          xAvgCharWidth: Math.round(f.advanceWidthAvg),
          usWeightClass: a.tables.os2.usWeightClass,
          usWidthClass: a.tables.os2.usWidthClass,
          usFirstCharIndex: b,
          usLastCharIndex: l,
          ulUnicodeRange1: p,
          ulUnicodeRange2: q,
          ulUnicodeRange3: t,
          ulUnicodeRange4: u,
          fsSelection: a.tables.os2.fsSelection,
          sTypoAscender: f.ascender,
          sTypoDescender: f.descender,
          sTypoLineGap: 0,
          usWinAscent: f.yMax,
          usWinDescent: Math.abs(f.yMin),
          ulCodePageRange1: 1,
          sxHeight: Cb(a, 'xyvw', { yMax: Math.round(f.ascender / 2) }).yMax,
          sCapHeight: Cb(a, 'HIKLEFJMNTZBDPRAGOQSUVWXY', f).yMax,
          usDefaultChar: a.hasChar(' ') ? 32 : 0,
          usBreakChar: a.hasChar(' ') ? 32 : 0,
        });
        l = oc.make(a.glyphs);
        p = gc.make(a.glyphs);
        q = a.getEnglishName('fontFamily');
        t = a.getEnglishName('fontSubfamily');
        u = q + ' ' + t;
        (d = a.getEnglishName('postScriptName')) || (d = q.replace(/\s/g, '') + '-' + t);
        e = {};
        for (var y in a.names) e[y] = a.names[y];
        e.uniqueID || (e.uniqueID = { en: a.getEnglishName('manufacturer') + ':' + u });
        e.postScriptName || (e.postScriptName = { en: d });
        e.preferredFamily || (e.preferredFamily = a.names.fontFamily);
        e.preferredSubfamily || (e.preferredSubfamily = a.names.fontSubfamily);
        c = [];
        y = mc.make(e, c);
        e = 0 < c.length ? jc.make(c) : void 0;
        c = lc.make();
        t = nc.make(a.glyphs, {
          version: a.getEnglishName('version'),
          fullName: u,
          familyName: q,
          weightName: t,
          postScriptName: d,
          unitsPerEm: a.unitsPerEm,
          fontBBox: [0, f.yMin, f.ascender, f.advanceWidthMax],
        });
        q = a.metas && 0 < Object.keys(a.metas).length ? qc.make(a.metas) : void 0;
        y = [h, k, m, b, y, p, c, t, l];
        e && y.push(e);
        a.tables.gsub && y.push(pc.make(a.tables.gsub));
        q && y.push(q);
        a = Bb(y);
        y = Oa(a.encode());
        b = a.fields;
        l = !1;
        for (p = 0; p < b.length; p += 1)
          if ('head table' === b[p].name) {
            b[p].value.checkSumAdjustment = 2981146554 - y;
            l = !0;
            break;
          }
        if (!l) throw Error('Could not find head table with checkSum to adjust.');
        return a;
      },
      computeCheckSum: Oa,
    };
  (za.prototype = ya.prototype = {
    searchTag: Pa,
    binSearch: Db,
    getTable: function(a) {
      var b = this.font.tables[this.tableName];
      return !b && a && (b = this.font.tables[this.tableName] = this.createDefaultTable()), b;
    },
    getScriptNames: function() {
      var a = this.getTable();
      return a
        ? a.scripts.map(function(a) {
            return a.tag;
          })
        : [];
    },
    getDefaultScriptName: function() {
      var a = this.getTable();
      if (a) {
        for (var b = !1, c = 0; c < a.scripts.length; c++) {
          var e = a.scripts[c].tag;
          if ('DFLT' === e) return e;
          'latn' === e && (b = !0);
        }
        return b ? 'latn' : void 0;
      }
    },
    getScriptTable: function(a, b) {
      var c = this.getTable(b);
      if (c) {
        a = a || 'DFLT';
        var e = c.scripts;
        c = Pa(c.scripts, a);
        if (0 <= c) return e[c].script;
        if (b)
          return (
            (a = {
              tag: a,
              script: {
                defaultLangSys: { reserved: 0, reqFeatureIndex: 65535, featureIndexes: [] },
                langSysRecords: [],
              },
            }),
            e.splice(-1 - c, 0, a),
            a.script
          );
      }
    },
    getLangSysTable: function(a, b, c) {
      if ((a = this.getScriptTable(a, c))) {
        if (!b || 'dflt' === b || 'DFLT' === b) return a.defaultLangSys;
        var e = Pa(a.langSysRecords, b);
        if (0 <= e) return a.langSysRecords[e].langSys;
        if (c)
          return (
            (b = { tag: b, langSys: { reserved: 0, reqFeatureIndex: 65535, featureIndexes: [] } }),
            a.langSysRecords.splice(-1 - e, 0, b),
            b.langSys
          );
      }
    },
    getFeatureTable: function(a, b, c, e) {
      if ((a = this.getLangSysTable(a, b, e))) {
        var d;
        a = a.featureIndexes;
        b = this.font.tables[this.tableName].features;
        for (var f = 0; f < a.length; f++) if ((d = b[a[f]]).tag === c) return d.feature;
        if (e)
          return (
            (e = b.length),
            z.assert(0 === e || c >= b[e - 1].tag, 'Features must be added in alphabetical order.'),
            (d = { tag: c, feature: { params: 0, lookupListIndexes: [] } }),
            b.push(d),
            a.push(e),
            d.feature
          );
      }
    },
    getLookupTables: function(a, b, c, e, d) {
      b = this.getFeatureTable(a, b, c, d);
      a = [];
      if (b) {
        var g;
        b = b.lookupListIndexes;
        c = this.font.tables[this.tableName].lookups;
        for (var f = 0; f < b.length; f++) (g = c[b[f]]).lookupType === e && a.push(g);
        if (0 === a.length && d)
          return (
            (g = { lookupType: e, lookupFlag: 0, subtables: [], markFilteringSet: void 0 }),
            (e = c.length),
            c.push(g),
            b.push(e),
            [g]
          );
      }
      return a;
    },
    getGlyphClass: function(a, b) {
      switch (a.format) {
        case 1:
          return a.startGlyph <= b && b < a.startGlyph + a.classes.length
            ? a.classes[b - a.startGlyph]
            : 0;
        case 2:
          return (a = Eb(a.ranges, b)) ? a.classId : 0;
      }
    },
    getCoverageIndex: function(a, b) {
      switch (a.format) {
        case 1:
          return (b = Db(a.glyphs, b)), 0 <= b ? b : -1;
        case 2:
          return (a = Eb(a.ranges, b)) ? a.index + b - a.start : -1;
      }
    },
    expandCoverage: function(a) {
      if (1 === a.format) return a.glyphs;
      var b = [];
      a = a.ranges;
      for (var c = 0; c < a.length; c++) {
        var e = a[c],
          d = e.end;
        for (e = e.start; e <= d; e++) b.push(e);
      }
      return b;
    },
  }).init = function() {
    var a = this.getDefaultScriptName();
    this.defaultKerningTables = this.getKerningTables(a);
  };
  za.prototype.getKerningValue = function(a, b, c) {
    for (var e = 0; e < a.length; e++)
      for (var d = a[e].subtables, f = 0; f < d.length; f++) {
        var h = d[f],
          k = this.getCoverageIndex(h.coverage, b);
        if (!(0 > k))
          switch (h.posFormat) {
            case 1:
              h = h.pairSets[k];
              for (k = 0; k < h.length; k++) {
                var m = h[k];
                if (m.secondGlyph === c) return (m.value1 && m.value1.xAdvance) || 0;
              }
              break;
            case 2:
              return (
                (a = this.getGlyphClass(h.classDef1, b)),
                (c = this.getGlyphClass(h.classDef2, c)),
                (c = h.classRecords[a][c]),
                (c.value1 && c.value1.xAdvance) || 0
              );
          }
      }
    return 0;
  };
  za.prototype.getKerningTables = function(a, b) {
    if (this.font.tables.gpos) return this.getLookupTables(a, b, 'kern', 2);
  };
  (U.prototype = ya.prototype).createDefaultTable = function() {
    return {
      version: 1,
      scripts: [
        {
          tag: 'DFLT',
          script: {
            defaultLangSys: { reserved: 0, reqFeatureIndex: 65535, featureIndexes: [] },
            langSysRecords: [],
          },
        },
      ],
      features: [],
      lookups: [],
    };
  };
  U.prototype.getSingle = function(a, b, c) {
    var e = [];
    a = this.getLookupTables(b, c, a, 1);
    for (b = 0; b < a.length; b++) {
      c = a[b].subtables;
      for (var d = 0; d < c.length; d++) {
        var f = c[d],
          h = this.expandCoverage(f.coverage);
        if (1 === f.substFormat) {
          var k = f.deltaGlyphId;
          for (f = 0; f < h.length; f++) {
            var m = h[f];
            e.push({ sub: m, by: m + k });
          }
        } else for (k = f.substitute, f = 0; f < h.length; f++) e.push({ sub: h[f], by: k[f] });
      }
    }
    return e;
  };
  U.prototype.getAlternates = function(a, b, c) {
    var e = [];
    a = this.getLookupTables(b, c, a, 3);
    for (b = 0; b < a.length; b++) {
      c = a[b].subtables;
      for (var d = 0; d < c.length; d++) {
        var f = c[d],
          h = this.expandCoverage(f.coverage);
        f = f.alternateSets;
        for (var k = 0; k < h.length; k++) e.push({ sub: h[k], by: f[k] });
      }
    }
    return e;
  };
  U.prototype.getLigatures = function(a, b, c) {
    var e = [];
    a = this.getLookupTables(b, c, a, 4);
    for (b = 0; b < a.length; b++) {
      c = a[b].subtables;
      for (var d = 0; d < c.length; d++) {
        var f = c[d],
          h = this.expandCoverage(f.coverage);
        f = f.ligatureSets;
        for (var k = 0; k < h.length; k++)
          for (var m = h[k], l = f[k], p = 0; p < l.length; p++) {
            var q = l[p];
            e.push({ sub: [m].concat(q.components), by: q.ligGlyph });
          }
      }
    }
    return e;
  };
  U.prototype.addSingle = function(a, b, c, e) {
    a = Fb(this.getLookupTables(c, e, a, 1, !0)[0], 2, {
      substFormat: 2,
      coverage: { format: 1, glyphs: [] },
      substitute: [],
    });
    z.assert(
      1 === a.coverage.format,
      'Ligature: unable to modify coverage table format ' + a.coverage.format
    );
    c = b.sub;
    e = this.binSearch(a.coverage.glyphs, c);
    0 > e && ((e = -1 - e), a.coverage.glyphs.splice(e, 0, c), a.substitute.splice(e, 0, 0));
    a.substitute[e] = b.by;
  };
  U.prototype.addAlternate = function(a, b, c, e) {
    a = Fb(this.getLookupTables(c, e, a, 3, !0)[0], 1, {
      substFormat: 1,
      coverage: { format: 1, glyphs: [] },
      alternateSets: [],
    });
    z.assert(
      1 === a.coverage.format,
      'Ligature: unable to modify coverage table format ' + a.coverage.format
    );
    c = b.sub;
    e = this.binSearch(a.coverage.glyphs, c);
    0 > e && ((e = -1 - e), a.coverage.glyphs.splice(e, 0, c), a.alternateSets.splice(e, 0, 0));
    a.alternateSets[e] = b.by;
  };
  U.prototype.addLigature = function(a, b, c, e) {
    a = this.getLookupTables(c, e, a, 4, !0)[0];
    (c = a.subtables[0]) ||
      ((c = { substFormat: 1, coverage: { format: 1, glyphs: [] }, ligatureSets: [] }),
      (a.subtables[0] = c));
    z.assert(
      1 === c.coverage.format,
      'Ligature: unable to modify coverage table format ' + c.coverage.format
    );
    e = b.sub[0];
    a = b.sub.slice(1);
    b = { ligGlyph: b.by, components: a };
    var d = this.binSearch(c.coverage.glyphs, e);
    if (0 <= d) {
      c = c.ligatureSets[d];
      for (e = 0; e < c.length; e++) {
        a: {
          d = c[e].components;
          var f = d.length;
          if (f !== a.length) d = !1;
          else {
            for (var h = 0; h < f; h++)
              if (d[h] !== a[h]) {
                d = !1;
                break a;
              }
            d = !0;
          }
        }
        if (d) return;
      }
      c.push(b);
    } else (d = -1 - d), c.coverage.glyphs.splice(d, 0, e), c.ligatureSets.splice(d, 0, [b]);
  };
  U.prototype.getFeature = function(a, b, c) {
    if (/ss\d\d/.test(a)) return this.getSingle(a, b, c);
    switch (a) {
      case 'aalt':
      case 'salt':
        return this.getSingle(a, b, c).concat(this.getAlternates(a, b, c));
      case 'dlig':
      case 'liga':
      case 'rlig':
        return this.getLigatures(a, b, c);
    }
  };
  U.prototype.add = function(a, b, c, e) {
    if (/ss\d\d/.test(a)) return this.addSingle(a, b, c, e);
    switch (a) {
      case 'aalt':
      case 'salt':
        return 'number' == typeof b.by ? this.addSingle(a, b, c, e) : this.addAlternate(a, b, c, e);
      case 'dlig':
      case 'liga':
      case 'rlig':
        return this.addLigature(a, b, c, e);
    }
  };
  var Kb = {
      getPath: Ib,
      parse: function(a, b, c, e) {
        for (var d = new ia.GlyphSet(e), f = 0; f < c.length - 1; f += 1) {
          var h = c[f];
          h !== c[f + 1]
            ? d.push(f, ia.ttfGlyphLoader(e, f, Bc, a, b + h, Cc))
            : d.push(f, ia.glyphLoader(e, f));
        }
        return d;
      },
    },
    vc = function(a) {
      var b = this.srPeriod,
        c = this.srPhase,
        e = 1;
      return (
        0 > a && ((a = -a), (e = -1)),
        (a += this.srThreshold - c),
        (a = Math.trunc(a / b) * b),
        0 > (a += c) ? c * e : a * e
      );
    },
    V = {
      x: 1,
      y: 0,
      axis: 'x',
      distance: function(a, b, c, e) {
        return (c ? a.xo : a.x) - (e ? b.xo : b.x);
      },
      interpolate: function(a, b, c, e) {
        var d, f, h, k, m, l, p;
        if (!e || e === this)
          return (
            (d = a.xo - b.xo),
            (f = a.xo - c.xo),
            (m = b.x - b.xo),
            (l = c.x - c.xo),
            0 === (p = (h = Math.abs(d)) + (k = Math.abs(f)))
              ? void (a.x = a.xo + (m + l) / 2)
              : void (a.x = a.xo + (m * k + l * h) / p)
          );
        d = e.distance(a, b, !0, !0);
        f = e.distance(a, c, !0, !0);
        m = e.distance(b, b, !1, !0);
        l = e.distance(c, c, !1, !0);
        0 !== (p = (h = Math.abs(d)) + (k = Math.abs(f)))
          ? V.setRelative(a, a, (m * k + l * h) / p, e, !0)
          : V.setRelative(a, a, (m + l) / 2, e, !0);
      },
      normalSlope: Number.NEGATIVE_INFINITY,
      setRelative: function(a, b, c, d, f) {
        a.x =
          d && d !== this
            ? (f ? b.xo : b.x) + c * d.x + (a.y - ((f ? b.yo : b.y) + c * d.y)) / d.normalSlope
            : (f ? b.xo : b.x) + c;
      },
      slope: 0,
      touch: function(a) {
        a.xTouched = !0;
      },
      touched: function(a) {
        return a.xTouched;
      },
      untouch: function(a) {
        a.xTouched = !1;
      },
    },
    X = {
      x: 0,
      y: 1,
      axis: 'y',
      distance: function(a, b, c, d) {
        return (c ? a.yo : a.y) - (d ? b.yo : b.y);
      },
      interpolate: function(a, b, c, d) {
        var e, f, h, k, m, l, p;
        if (!d || d === this)
          return (
            (e = a.yo - b.yo),
            (f = a.yo - c.yo),
            (m = b.y - b.yo),
            (l = c.y - c.yo),
            0 === (p = (h = Math.abs(e)) + (k = Math.abs(f)))
              ? void (a.y = a.yo + (m + l) / 2)
              : void (a.y = a.yo + (m * k + l * h) / p)
          );
        e = d.distance(a, b, !0, !0);
        f = d.distance(a, c, !0, !0);
        m = d.distance(b, b, !1, !0);
        l = d.distance(c, c, !1, !0);
        0 !== (p = (h = Math.abs(e)) + (k = Math.abs(f)))
          ? X.setRelative(a, a, (m * k + l * h) / p, d, !0)
          : X.setRelative(a, a, (m + l) / 2, d, !0);
      },
      normalSlope: 0,
      setRelative: function(a, b, c, d, f) {
        a.y =
          d && d !== this
            ? (f ? b.yo : b.y) + c * d.y + d.normalSlope * (a.x - ((f ? b.xo : b.x) + c * d.x))
            : (f ? b.yo : b.y) + c;
      },
      slope: Number.POSITIVE_INFINITY,
      touch: function(a) {
        a.yTouched = !0;
      },
      touched: function(a) {
        return a.yTouched;
      },
      untouch: function(a) {
        a.yTouched = !1;
      },
    };
  Object.freeze(V);
  Object.freeze(X);
  pa.prototype.distance = function(a, b, c, d) {
    return this.x * V.distance(a, b, c, d) + this.y * X.distance(a, b, c, d);
  };
  pa.prototype.interpolate = function(a, b, c, d) {
    var e, f, h;
    var k = d.distance(a, b, !0, !0);
    var m = d.distance(a, c, !0, !0);
    b = d.distance(b, b, !1, !0);
    c = d.distance(c, c, !1, !0);
    0 !== (h = (e = Math.abs(k)) + (f = Math.abs(m)))
      ? this.setRelative(a, a, (b * f + c * e) / h, d, !0)
      : this.setRelative(a, a, (b + c) / 2, d, !0);
  };
  pa.prototype.setRelative = function(a, b, c, d, f) {
    d = d || this;
    var e = d.normalSlope,
      g = this.slope,
      h = a.x,
      k = a.y;
    a.x = (g * h - e * ((f ? b.xo : b.x) + c * d.x) + ((f ? b.yo : b.y) + c * d.y) - k) / (g - e);
    a.y = g * (a.x - h) + k;
  };
  pa.prototype.touch = function(a) {
    a.xTouched = !0;
    a.yTouched = !0;
  };
  Y.prototype.nextTouched = function(a) {
    for (var b = this.nextPointOnContour; !a.touched(b) && b !== this; ) b = b.nextPointOnContour;
    return b;
  };
  Y.prototype.prevTouched = function(a) {
    for (var b = this.prevPointOnContour; !a.touched(b) && b !== this; ) b = b.prevPointOnContour;
    return b;
  };
  var ra = Object.freeze(new Y(0, 0)),
    Wc = { cvCutIn: 1.0625, deltaBase: 9, deltaShift: 0.125, loop: 1, minDis: 1, autoFlip: !0 };
  Jb.prototype.exec = function(a, b) {
    if ('number' != typeof b) throw Error('Point size is not a number!');
    if (!(2 < this._errorState)) {
      var c = this.font,
        e = this._prepState;
      if (!e || e.ppem !== b) {
        e = this._fpgmState;
        if (!e) {
          ba.prototype = Wc;
          (e = this._fpgmState = new ba('fpgm', c.tables.fpgm)).funcs = [];
          e.font = c;
          d.DEBUG && (console.log('---EXEC FPGM---'), (e.step = -1));
          try {
            la(e);
          } catch (n) {
            return console.log('Hinting error in FPGM:' + n), void (this._errorState = 3);
          }
        }
        ba.prototype = e;
        (e = this._prepState = new ba('prep', c.tables.prep)).ppem = b;
        var f = c.tables.cvt;
        if (f) {
          var h = (e.cvt = Array(f.length));
          b /= c.unitsPerEm;
          for (c = 0; c < f.length; c++) h[c] = f[c] * b;
        } else e.cvt = [];
        d.DEBUG && (console.log('---EXEC PREP---'), (e.step = -1));
        try {
          la(e);
        } catch (n) {
          2 > this._errorState && console.log('Hinting error in PREP:' + n), (this._errorState = 2);
        }
      }
      if (!(1 < this._errorState))
        try {
          return Xc(a, e);
        } catch (n) {
          return (
            1 > this._errorState &&
              (console.log('Hinting error:' + n),
              console.log('Note: further hinting errors are silenced')),
            void (this._errorState = 1)
          );
        }
    }
  };
  var Xc = function(a, b) {
    var c = b.ppem / b.font.unitsPerEm,
      e = a.components;
    if (((ba.prototype = b), e)) {
      var f = b.font;
      var h = [];
      b = [];
      for (var n = 0; n < e.length; n++) {
        var k = e[n],
          m = f.glyphs.get(k.glyphIndex);
        var l = new ba('glyf', m.instructions);
        d.DEBUG && (console.log('---EXEC COMP ' + n + '---'), (l.step = -1));
        wc(m, l, c, c);
        m = Math.round(k.dx * c);
        var p = Math.round(k.dy * c),
          q = l.gZone;
        k = l.contours;
        for (var t = 0; t < q.length; t++) {
          var u = q[t];
          u.xTouched = u.yTouched = !1;
          u.xo = u.x += m;
          u.yo = u.y += p;
        }
        m = h.length;
        h.push.apply(h, q);
        for (q = 0; q < k.length; q++) b.push(k[q] + m);
      }
      a.instructions &&
        !l.inhibitGridFit &&
        (((l = new ba('glyf', a.instructions)).gZone = l.z0 = l.z1 = l.z2 = h),
        (l.contours = b),
        h.push(new Y(0, 0), new Y(Math.round(a.advanceWidth * c), 0)),
        d.DEBUG && (console.log('---EXEC COMPOSITE---'), (l.step = -1)),
        la(l),
        (h.length -= 2));
    } else
      (l = new ba('glyf', a.instructions)),
        d.DEBUG && (console.log('---EXEC GLYPH---'), (l.step = -1)),
        wc(a, l, c, c),
        (h = l.gZone);
    return h;
  };
  var wc = function(a, b, c, e) {
    for (
      var f,
        h,
        n,
        k = a.points || [],
        m = k.length,
        l = (b.gZone = b.z0 = b.z1 = b.z2 = []),
        p = (b.contours = []),
        q = 0;
      q < m;
      q++
    )
      (f = k[q]), (l[q] = new Y(f.x * c, f.y * e, f.lastPointOfContour, f.onCurve));
    for (e = 0; e < m; e++)
      (f = l[e]),
        h || ((h = f), p.push(e)),
        f.lastPointOfContour
          ? (((f.nextPointOnContour = h).prevPointOnContour = f), (h = void 0))
          : ((n = l[e + 1]), ((f.nextPointOnContour = n).prevPointOnContour = f));
    if (!b.inhibitGridFit) {
      if (d.DEBUG)
        for (console.log('PROCESSING GLYPH', b.stack), f = 0; f < m; f++)
          console.log(f, l[f].x, l[f].y);
      if (
        (l.push(new Y(0, 0), new Y(Math.round(a.advanceWidth * c), 0)),
        la(b),
        (l.length -= 2),
        d.DEBUG)
      )
        for (console.log('FINISHED GLYPH', b.stack), a = 0; a < m; a++)
          console.log(a, l[a].x, l[a].y);
    }
  };
  var la = function(a) {
    var b = a.prog;
    if (b) {
      var c,
        e = b.length;
      for (a.ip = 0; a.ip < e; a.ip++) {
        if ((d.DEBUG && a.step++, !(c = Yc[b[a.ip]])))
          throw Error('unknown instruction: 0x' + Number(b[a.ip]).toString(16));
        c(a);
      }
    }
  };
  var Yc = [
    Nb.bind(void 0, X),
    Nb.bind(void 0, V),
    Ob.bind(void 0, X),
    Ob.bind(void 0, V),
    Pb.bind(void 0, X),
    Pb.bind(void 0, V),
    Qb.bind(void 0, 0),
    Qb.bind(void 0, 1),
    Rb.bind(void 0, 0),
    Rb.bind(void 0, 1),
    function(a) {
      var b = a.stack,
        c = b.pop();
      b = b.pop();
      d.DEBUG && console.log(a.step, 'SPVFS[]', c, b);
      a.pv = a.dpv = qa(b, c);
    },
    function(a) {
      var b = a.stack,
        c = b.pop();
      b = b.pop();
      d.DEBUG && console.log(a.step, 'SPVFS[]', c, b);
      a.fv = qa(b, c);
    },
    function(a) {
      var b = a.stack,
        c = a.pv;
      d.DEBUG && console.log(a.step, 'GPV[]');
      b.push(16384 * c.x);
      b.push(16384 * c.y);
    },
    function(a) {
      var b = a.stack,
        c = a.fv;
      d.DEBUG && console.log(a.step, 'GFV[]');
      b.push(16384 * c.x);
      b.push(16384 * c.y);
    },
    function(a) {
      a.fv = a.pv;
      d.DEBUG && console.log(a.step, 'SFVTPV[]');
    },
    function(a) {
      var b = a.stack,
        c = b.pop(),
        e = b.pop(),
        f = b.pop(),
        h = b.pop(),
        k = b.pop(),
        l = a.z0;
      b = a.z1;
      var m = l[c],
        q = l[e];
      l = b[f];
      b = b[h];
      a = a.z2[k];
      d.DEBUG && console.log('ISECT[], ', c, e, f, h, k);
      c = m.x;
      e = m.y;
      f = q.x;
      q = q.y;
      h = l.x;
      l = l.y;
      m = b.x;
      b = b.y;
      k = (c - f) * (l - b) - (e - q) * (h - m);
      var p = c * q - e * f,
        t = h * b - l * m;
      a.x = (p * (h - m) - t * (c - f)) / k;
      a.y = (p * (l - b) - t * (e - q)) / k;
    },
    function(a) {
      a.rp0 = a.stack.pop();
      d.DEBUG && console.log(a.step, 'SRP0[]', a.rp0);
    },
    function(a) {
      a.rp1 = a.stack.pop();
      d.DEBUG && console.log(a.step, 'SRP1[]', a.rp1);
    },
    function(a) {
      a.rp2 = a.stack.pop();
      d.DEBUG && console.log(a.step, 'SRP2[]', a.rp2);
    },
    function(a) {
      var b = a.stack.pop();
      switch ((d.DEBUG && console.log(a.step, 'SZP0[]', b), (a.zp0 = b))) {
        case 0:
          a.tZone || Aa(a);
          a.z0 = a.tZone;
          break;
        case 1:
          a.z0 = a.gZone;
          break;
        default:
          throw Error('Invalid zone pointer');
      }
    },
    function(a) {
      var b = a.stack.pop();
      switch ((d.DEBUG && console.log(a.step, 'SZP1[]', b), (a.zp1 = b))) {
        case 0:
          a.tZone || Aa(a);
          a.z1 = a.tZone;
          break;
        case 1:
          a.z1 = a.gZone;
          break;
        default:
          throw Error('Invalid zone pointer');
      }
    },
    function(a) {
      var b = a.stack.pop();
      switch ((d.DEBUG && console.log(a.step, 'SZP2[]', b), (a.zp2 = b))) {
        case 0:
          a.tZone || Aa(a);
          a.z2 = a.tZone;
          break;
        case 1:
          a.z2 = a.gZone;
          break;
        default:
          throw Error('Invalid zone pointer');
      }
    },
    function(a) {
      var b = a.stack.pop();
      switch ((d.DEBUG && console.log(a.step, 'SZPS[]', b), (a.zp0 = a.zp1 = a.zp2 = b), b)) {
        case 0:
          a.tZone || Aa(a);
          a.z0 = a.z1 = a.z2 = a.tZone;
          break;
        case 1:
          a.z0 = a.z1 = a.z2 = a.gZone;
          break;
        default:
          throw Error('Invalid zone pointer');
      }
    },
    function(a) {
      a.loop = a.stack.pop();
      d.DEBUG && console.log(a.step, 'SLOOP[]', a.loop);
    },
    function(a) {
      d.DEBUG && console.log(a.step, 'RTG[]');
      a.round = Lb;
    },
    function(a) {
      d.DEBUG && console.log(a.step, 'RTHG[]');
      a.round = Fc;
    },
    function(a) {
      var b = a.stack.pop();
      d.DEBUG && console.log(a.step, 'SMD[]', b);
      a.minDis = b / 64;
    },
    function(a) {
      d.DEBUG && console.log(a.step, 'ELSE[]');
      Mb(a, !1);
    },
    function(a) {
      var b = a.stack.pop();
      d.DEBUG && console.log(a.step, 'JMPR[]', b);
      a.ip += b - 1;
    },
    function(a) {
      var b = a.stack.pop();
      d.DEBUG && console.log(a.step, 'SCVTCI[]', b);
      a.cvCutIn = b / 64;
    },
    void 0,
    void 0,
    function(a) {
      var b = a.stack;
      d.DEBUG && console.log(a.step, 'DUP[]');
      b.push(b[b.length - 1]);
    },
    Ra,
    function(a) {
      d.DEBUG && console.log(a.step, 'CLEAR[]');
      a.stack.length = 0;
    },
    function(a) {
      var b = a.stack,
        c = b.pop(),
        e = b.pop();
      d.DEBUG && console.log(a.step, 'SWAP[]');
      b.push(c);
      b.push(e);
    },
    function(a) {
      var b = a.stack;
      d.DEBUG && console.log(a.step, 'DEPTH[]');
      b.push(b.length);
    },
    function(a) {
      var b = a.stack,
        c = b.pop();
      d.DEBUG && console.log(a.step, 'CINDEX[]', c);
      b.push(b[b.length - c]);
    },
    function(a) {
      var b = a.stack,
        c = b.pop();
      d.DEBUG && console.log(a.step, 'MINDEX[]', c);
      b.push(b.splice(b.length - c, 1)[0]);
    },
    void 0,
    void 0,
    void 0,
    function(a) {
      var b = a.stack,
        c = b.pop();
      b = b.pop();
      d.DEBUG && console.log(a.step, 'LOOPCALL[]', c, b);
      var e = a.ip,
        f = a.prog;
      a.prog = a.funcs[c];
      for (c = 0; c < b; c++)
        la(a), d.DEBUG && console.log(++a.step, c + 1 < b ? 'next loopcall' : 'done loopcall', c);
      a.ip = e;
      a.prog = f;
    },
    function(a) {
      var b = a.stack.pop();
      d.DEBUG && console.log(a.step, 'CALL[]', b);
      var c = a.ip,
        e = a.prog;
      a.prog = a.funcs[b];
      la(a);
      a.ip = c;
      a.prog = e;
      d.DEBUG && console.log(++a.step, 'returning from', b);
    },
    function(a) {
      if ('fpgm' !== a.env) throw Error('FDEF not allowed here');
      var b = a.prog,
        c = a.ip,
        e = a.stack.pop(),
        f = c;
      for (d.DEBUG && console.log(a.step, 'FDEF[]', e); 45 !== b[++c]; );
      a.ip = c;
      a.funcs[e] = b.slice(f + 1, c);
    },
    void 0,
    Sb.bind(void 0, 0),
    Sb.bind(void 0, 1),
    Tb.bind(void 0, X),
    Tb.bind(void 0, V),
    Ub.bind(void 0, 0),
    Ub.bind(void 0, 1),
    Vb.bind(void 0, 0),
    Vb.bind(void 0, 1),
    Wb.bind(void 0, 0),
    Wb.bind(void 0, 1),
    function(a) {
      for (var b = a.stack, c = a.loop, e = a.fv, f = b.pop() / 64, h = a.z2; c--; ) {
        var k = b.pop(),
          l = h[k];
        d.DEBUG &&
          console.log(a.step, (1 < a.loop ? 'loop ' + (a.loop - c) + ': ' : '') + 'SHPIX[]', k, f);
        e.setRelative(l, l, f);
        e.touch(l);
      }
      a.loop = 1;
    },
    function(a) {
      for (
        var b = a.stack,
          c = a.rp1,
          e = a.rp2,
          f = a.loop,
          h = a.z0[c],
          k = a.z1[e],
          l = a.fv,
          m = a.dpv,
          q = a.z2;
        f--;

      ) {
        var p = b.pop(),
          t = q[p];
        d.DEBUG &&
          console.log(
            a.step,
            (1 < a.loop ? 'loop ' + (a.loop - f) + ': ' : '') + 'IP[]',
            p,
            c,
            '<->',
            e
          );
        l.interpolate(t, h, k, m);
        l.touch(t);
      }
      a.loop = 1;
    },
    Xb.bind(void 0, 0),
    Xb.bind(void 0, 1),
    function(a) {
      for (var b = a.stack, c = a.z0[a.rp0], e = a.loop, f = a.fv, h = a.pv, k = a.z1; e--; ) {
        var l = b.pop(),
          m = k[l];
        d.DEBUG &&
          console.log(a.step, (1 < a.loop ? 'loop ' + (a.loop - e) + ': ' : '') + 'ALIGNRP[]', l);
        f.setRelative(m, c, 0, h);
        f.touch(m);
      }
      a.loop = 1;
    },
    function(a) {
      d.DEBUG && console.log(a.step, 'RTDG[]');
      a.round = Ec;
    },
    Yb.bind(void 0, 0),
    Yb.bind(void 0, 1),
    function(a) {
      var b = a.prog,
        c = a.ip,
        e = a.stack,
        f = b[++c];
      d.DEBUG && console.log(a.step, 'NPUSHB[]', f);
      for (var h = 0; h < f; h++) e.push(b[++c]);
      a.ip = c;
    },
    function(a) {
      var b = a.ip,
        c = a.prog,
        e = a.stack,
        f = c[++b];
      d.DEBUG && console.log(a.step, 'NPUSHW[]', f);
      for (var h = 0; h < f; h++) {
        var k = (c[++b] << 8) | c[++b];
        32768 & k && (k = -(1 + (65535 ^ k)));
        e.push(k);
      }
      a.ip = b;
    },
    function(a) {
      var b = a.stack,
        c = a.store;
      c || (c = a.store = []);
      var e = b.pop();
      b = b.pop();
      d.DEBUG && console.log(a.step, 'WS', e, b);
      c[b] = e;
    },
    function(a) {
      var b = a.stack,
        c = a.store,
        e = b.pop();
      d.DEBUG && console.log(a.step, 'RS', e);
      b.push((c && c[e]) || 0);
    },
    function(a) {
      var b = a.stack,
        c = b.pop();
      b = b.pop();
      d.DEBUG && console.log(a.step, 'WCVTP', c, b);
      a.cvt[b] = c / 64;
    },
    function(a) {
      var b = a.stack,
        c = b.pop();
      d.DEBUG && console.log(a.step, 'RCVT', c);
      b.push(64 * a.cvt[c]);
    },
    Zb.bind(void 0, 0),
    Zb.bind(void 0, 1),
    void 0,
    $b.bind(void 0, 0),
    $b.bind(void 0, 1),
    function(a) {
      d.DEBUG && console.log(a.step, 'MPPEM[]');
      a.stack.push(a.ppem);
    },
    void 0,
    function(a) {
      d.DEBUG && console.log(a.step, 'FLIPON[]');
      a.autoFlip = !0;
    },
    void 0,
    void 0,
    function(a) {
      var b = a.stack,
        c = b.pop(),
        e = b.pop();
      d.DEBUG && console.log(a.step, 'LT[]', c, e);
      b.push(e < c ? 1 : 0);
    },
    function(a) {
      var b = a.stack,
        c = b.pop(),
        e = b.pop();
      d.DEBUG && console.log(a.step, 'LTEQ[]', c, e);
      b.push(e <= c ? 1 : 0);
    },
    function(a) {
      var b = a.stack,
        c = b.pop(),
        e = b.pop();
      d.DEBUG && console.log(a.step, 'GT[]', c, e);
      b.push(c < e ? 1 : 0);
    },
    function(a) {
      var b = a.stack,
        c = b.pop(),
        e = b.pop();
      d.DEBUG && console.log(a.step, 'GTEQ[]', c, e);
      b.push(c <= e ? 1 : 0);
    },
    function(a) {
      var b = a.stack,
        c = b.pop(),
        e = b.pop();
      d.DEBUG && console.log(a.step, 'EQ[]', c, e);
      b.push(c === e ? 1 : 0);
    },
    function(a) {
      var b = a.stack,
        c = b.pop(),
        e = b.pop();
      d.DEBUG && console.log(a.step, 'NEQ[]', c, e);
      b.push(c !== e ? 1 : 0);
    },
    function(a) {
      var b = a.stack,
        c = b.pop();
      d.DEBUG && console.log(a.step, 'ODD[]', c);
      b.push(Math.trunc(c) % 2 ? 1 : 0);
    },
    function(a) {
      var b = a.stack,
        c = b.pop();
      d.DEBUG && console.log(a.step, 'EVEN[]', c);
      b.push(Math.trunc(c) % 2 ? 0 : 1);
    },
    function(a) {
      var b = a.stack.pop();
      d.DEBUG && console.log(a.step, 'IF[]', b);
      b || (Mb(a, !0), d.DEBUG && console.log(a.step, 'EIF[]'));
    },
    function(a) {
      d.DEBUG && console.log(a.step, 'EIF[]');
    },
    function(a) {
      var b = a.stack,
        c = b.pop(),
        e = b.pop();
      d.DEBUG && console.log(a.step, 'AND[]', c, e);
      b.push(c && e ? 1 : 0);
    },
    function(a) {
      var b = a.stack,
        c = b.pop(),
        e = b.pop();
      d.DEBUG && console.log(a.step, 'OR[]', c, e);
      b.push(c || e ? 1 : 0);
    },
    function(a) {
      var b = a.stack,
        c = b.pop();
      d.DEBUG && console.log(a.step, 'NOT[]', c);
      b.push(c ? 0 : 1);
    },
    Sa.bind(void 0, 1),
    function(a) {
      var b = a.stack.pop();
      d.DEBUG && console.log(a.step, 'SDB[]', b);
      a.deltaBase = b;
    },
    function(a) {
      var b = a.stack.pop();
      d.DEBUG && console.log(a.step, 'SDS[]', b);
      a.deltaShift = Math.pow(0.5, b);
    },
    function(a) {
      var b = a.stack,
        c = b.pop(),
        e = b.pop();
      d.DEBUG && console.log(a.step, 'ADD[]', c, e);
      b.push(e + c);
    },
    function(a) {
      var b = a.stack,
        c = b.pop(),
        e = b.pop();
      d.DEBUG && console.log(a.step, 'SUB[]', c, e);
      b.push(e - c);
    },
    function(a) {
      var b = a.stack,
        c = b.pop(),
        e = b.pop();
      d.DEBUG && console.log(a.step, 'DIV[]', c, e);
      b.push((64 * e) / c);
    },
    function(a) {
      var b = a.stack,
        c = b.pop(),
        e = b.pop();
      d.DEBUG && console.log(a.step, 'MUL[]', c, e);
      b.push((e * c) / 64);
    },
    function(a) {
      var b = a.stack,
        c = b.pop();
      d.DEBUG && console.log(a.step, 'ABS[]', c);
      b.push(Math.abs(c));
    },
    function(a) {
      var b = a.stack,
        c = b.pop();
      d.DEBUG && console.log(a.step, 'NEG[]', c);
      b.push(-c);
    },
    function(a) {
      var b = a.stack,
        c = b.pop();
      d.DEBUG && console.log(a.step, 'FLOOR[]', c);
      b.push(64 * Math.floor(c / 64));
    },
    function(a) {
      var b = a.stack,
        c = b.pop();
      d.DEBUG && console.log(a.step, 'CEILING[]', c);
      b.push(64 * Math.ceil(c / 64));
    },
    Ba.bind(void 0, 0),
    Ba.bind(void 0, 1),
    Ba.bind(void 0, 2),
    Ba.bind(void 0, 3),
    void 0,
    void 0,
    void 0,
    void 0,
    function(a) {
      var b = a.stack,
        c = b.pop();
      b = b.pop();
      d.DEBUG && console.log(a.step, 'WCVTF[]', c, b);
      a.cvt[b] = (c * a.ppem) / a.font.unitsPerEm;
    },
    Sa.bind(void 0, 2),
    Sa.bind(void 0, 3),
    Ta.bind(void 0, 1),
    Ta.bind(void 0, 2),
    Ta.bind(void 0, 3),
    function(a) {
      var b = a.stack.pop();
      switch ((d.DEBUG && console.log(a.step, 'SROUND[]', b), (a.round = vc), 192 & b)) {
        case 0:
          var c = 0.5;
          break;
        case 64:
          c = 1;
          break;
        case 128:
          c = 2;
          break;
        default:
          throw Error('invalid SROUND value');
      }
      switch (((a.srPeriod = c), 48 & b)) {
        case 0:
          a.srPhase = 0;
          break;
        case 16:
          a.srPhase = 0.25 * c;
          break;
        case 32:
          a.srPhase = 0.5 * c;
          break;
        case 48:
          a.srPhase = 0.75 * c;
          break;
        default:
          throw Error('invalid SROUND value');
      }
      b &= 15;
      a.srThreshold = 0 === b ? 0 : (b / 8 - 0.5) * c;
    },
    function(a) {
      var b = a.stack.pop();
      switch ((d.DEBUG && console.log(a.step, 'S45ROUND[]', b), (a.round = vc), 192 & b)) {
        case 0:
          var c = Math.sqrt(2) / 2;
          break;
        case 64:
          c = Math.sqrt(2);
          break;
        case 128:
          c = 2 * Math.sqrt(2);
          break;
        default:
          throw Error('invalid S45ROUND value');
      }
      switch (((a.srPeriod = c), 48 & b)) {
        case 0:
          a.srPhase = 0;
          break;
        case 16:
          a.srPhase = 0.25 * c;
          break;
        case 32:
          a.srPhase = 0.5 * c;
          break;
        case 48:
          a.srPhase = 0.75 * c;
          break;
        default:
          throw Error('invalid S45ROUND value');
      }
      b &= 15;
      a.srThreshold = 0 === b ? 0 : (b / 8 - 0.5) * c;
    },
    void 0,
    void 0,
    function(a) {
      d.DEBUG && console.log(a.step, 'ROFF[]');
      a.round = Dc;
    },
    void 0,
    function(a) {
      d.DEBUG && console.log(a.step, 'RUTG[]');
      a.round = Gc;
    },
    function(a) {
      d.DEBUG && console.log(a.step, 'RDTG[]');
      a.round = Hc;
    },
    Ra,
    Ra,
    void 0,
    void 0,
    void 0,
    void 0,
    void 0,
    function(a) {
      var b = a.stack.pop();
      d.DEBUG && console.log(a.step, 'SCANCTRL[]', b);
    },
    ac.bind(void 0, 0),
    ac.bind(void 0, 1),
    function(a) {
      var b = a.stack,
        c = b.pop(),
        e = 0;
      d.DEBUG && console.log(a.step, 'GETINFO[]', c);
      1 & c && (e = 35);
      32 & c && (e |= 4096);
      b.push(e);
    },
    void 0,
    function(a) {
      var b = a.stack,
        c = b.pop(),
        e = b.pop(),
        f = b.pop();
      d.DEBUG && console.log(a.step, 'ROLL[]');
      b.push(e);
      b.push(c);
      b.push(f);
    },
    function(a) {
      var b = a.stack,
        c = b.pop(),
        e = b.pop();
      d.DEBUG && console.log(a.step, 'MAX[]', c, e);
      b.push(Math.max(e, c));
    },
    function(a) {
      var b = a.stack,
        c = b.pop(),
        e = b.pop();
      d.DEBUG && console.log(a.step, 'MIN[]', c, e);
      b.push(Math.min(e, c));
    },
    function(a) {
      var b = a.stack.pop();
      d.DEBUG && console.log(a.step, 'SCANTYPE[]', b);
    },
    function(a) {
      var b = a.stack.pop(),
        c = a.stack.pop();
      switch ((d.DEBUG && console.log(a.step, 'INSTCTRL[]', b, c), b)) {
        case 1:
          return void (a.inhibitGridFit = !!c);
        case 2:
          return void (a.ignoreCvt = !!c);
        default:
          throw Error('invalid INSTCTRL[] selector');
      }
    },
    void 0,
    void 0,
    void 0,
    void 0,
    void 0,
    void 0,
    void 0,
    void 0,
    void 0,
    void 0,
    void 0,
    void 0,
    void 0,
    void 0,
    void 0,
    void 0,
    void 0,
    void 0,
    void 0,
    void 0,
    void 0,
    void 0,
    void 0,
    void 0,
    void 0,
    void 0,
    void 0,
    void 0,
    void 0,
    void 0,
    void 0,
    void 0,
    void 0,
    ca.bind(void 0, 1),
    ca.bind(void 0, 2),
    ca.bind(void 0, 3),
    ca.bind(void 0, 4),
    ca.bind(void 0, 5),
    ca.bind(void 0, 6),
    ca.bind(void 0, 7),
    ca.bind(void 0, 8),
    da.bind(void 0, 1),
    da.bind(void 0, 2),
    da.bind(void 0, 3),
    da.bind(void 0, 4),
    da.bind(void 0, 5),
    da.bind(void 0, 6),
    da.bind(void 0, 7),
    da.bind(void 0, 8),
    t.bind(void 0, 0, 0, 0, 0, 0),
    t.bind(void 0, 0, 0, 0, 0, 1),
    t.bind(void 0, 0, 0, 0, 0, 2),
    t.bind(void 0, 0, 0, 0, 0, 3),
    t.bind(void 0, 0, 0, 0, 1, 0),
    t.bind(void 0, 0, 0, 0, 1, 1),
    t.bind(void 0, 0, 0, 0, 1, 2),
    t.bind(void 0, 0, 0, 0, 1, 3),
    t.bind(void 0, 0, 0, 1, 0, 0),
    t.bind(void 0, 0, 0, 1, 0, 1),
    t.bind(void 0, 0, 0, 1, 0, 2),
    t.bind(void 0, 0, 0, 1, 0, 3),
    t.bind(void 0, 0, 0, 1, 1, 0),
    t.bind(void 0, 0, 0, 1, 1, 1),
    t.bind(void 0, 0, 0, 1, 1, 2),
    t.bind(void 0, 0, 0, 1, 1, 3),
    t.bind(void 0, 0, 1, 0, 0, 0),
    t.bind(void 0, 0, 1, 0, 0, 1),
    t.bind(void 0, 0, 1, 0, 0, 2),
    t.bind(void 0, 0, 1, 0, 0, 3),
    t.bind(void 0, 0, 1, 0, 1, 0),
    t.bind(void 0, 0, 1, 0, 1, 1),
    t.bind(void 0, 0, 1, 0, 1, 2),
    t.bind(void 0, 0, 1, 0, 1, 3),
    t.bind(void 0, 0, 1, 1, 0, 0),
    t.bind(void 0, 0, 1, 1, 0, 1),
    t.bind(void 0, 0, 1, 1, 0, 2),
    t.bind(void 0, 0, 1, 1, 0, 3),
    t.bind(void 0, 0, 1, 1, 1, 0),
    t.bind(void 0, 0, 1, 1, 1, 1),
    t.bind(void 0, 0, 1, 1, 1, 2),
    t.bind(void 0, 0, 1, 1, 1, 3),
    t.bind(void 0, 1, 0, 0, 0, 0),
    t.bind(void 0, 1, 0, 0, 0, 1),
    t.bind(void 0, 1, 0, 0, 0, 2),
    t.bind(void 0, 1, 0, 0, 0, 3),
    t.bind(void 0, 1, 0, 0, 1, 0),
    t.bind(void 0, 1, 0, 0, 1, 1),
    t.bind(void 0, 1, 0, 0, 1, 2),
    t.bind(void 0, 1, 0, 0, 1, 3),
    t.bind(void 0, 1, 0, 1, 0, 0),
    t.bind(void 0, 1, 0, 1, 0, 1),
    t.bind(void 0, 1, 0, 1, 0, 2),
    t.bind(void 0, 1, 0, 1, 0, 3),
    t.bind(void 0, 1, 0, 1, 1, 0),
    t.bind(void 0, 1, 0, 1, 1, 1),
    t.bind(void 0, 1, 0, 1, 1, 2),
    t.bind(void 0, 1, 0, 1, 1, 3),
    t.bind(void 0, 1, 1, 0, 0, 0),
    t.bind(void 0, 1, 1, 0, 0, 1),
    t.bind(void 0, 1, 1, 0, 0, 2),
    t.bind(void 0, 1, 1, 0, 0, 3),
    t.bind(void 0, 1, 1, 0, 1, 0),
    t.bind(void 0, 1, 1, 0, 1, 1),
    t.bind(void 0, 1, 1, 0, 1, 2),
    t.bind(void 0, 1, 1, 0, 1, 3),
    t.bind(void 0, 1, 1, 1, 0, 0),
    t.bind(void 0, 1, 1, 1, 0, 1),
    t.bind(void 0, 1, 1, 1, 0, 2),
    t.bind(void 0, 1, 1, 1, 0, 3),
    t.bind(void 0, 1, 1, 1, 1, 0),
    t.bind(void 0, 1, 1, 1, 1, 1),
    t.bind(void 0, 1, 1, 1, 1, 2),
    t.bind(void 0, 1, 1, 1, 1, 3),
  ];
  var Zc =
    Array.from ||
    function(a) {
      return a.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]?|[^\uD800-\uDFFF]|./g) || [];
    };
  H.prototype.hasChar = function(a) {
    return null !== this.encoding.charToGlyphIndex(a);
  };
  H.prototype.charToGlyphIndex = function(a) {
    return this.encoding.charToGlyphIndex(a);
  };
  H.prototype.charToGlyph = function(a) {
    a = this.charToGlyphIndex(a);
    a = this.glyphs.get(a);
    return a || (a = this.glyphs.get(0)), a;
  };
  H.prototype.stringToGlyphs = function(a, b) {
    b = b || this.defaultRenderOptions;
    var c = Zc(a);
    a = [];
    for (var d = 0; d < c.length; d += 1) a.push(this.charToGlyphIndex(c[d]));
    c = a.length;
    if (b.features) {
      var f = b.script || this.substitution.getDefaultScriptName();
      d = [];
      b.features.liga && (d = d.concat(this.substitution.getFeature('liga', f, b.language)));
      b.features.rlig && (d = d.concat(this.substitution.getFeature('rlig', f, b.language)));
      for (b = 0; b < c; b += 1)
        for (f = 0; f < d.length; f++) {
          for (var h = d[f], k = h.sub, l = k.length, m = 0; m < l && k[m] === a[b + m]; ) m++;
          m === l && (a.splice(b, l, h.by), (c = c - l + 1));
        }
    }
    d = Array(c);
    b = this.glyphs.get(0);
    for (f = 0; f < c; f += 1) d[f] = this.glyphs.get(a[f]) || b;
    return d;
  };
  H.prototype.nameToGlyphIndex = function(a) {
    return this.glyphNames.nameToGlyphIndex(a);
  };
  H.prototype.nameToGlyph = function(a) {
    a = this.nameToGlyphIndex(a);
    a = this.glyphs.get(a);
    return a || (a = this.glyphs.get(0)), a;
  };
  H.prototype.glyphIndexToName = function(a) {
    return this.glyphNames.glyphIndexToName ? this.glyphNames.glyphIndexToName(a) : '';
  };
  H.prototype.getKerningValue = function(a, b) {
    a = a.index || a;
    b = b.index || b;
    var c = this.position.defaultKerningTables;
    return c ? this.position.getKerningValue(c, a, b) : this.kerningPairs[a + ',' + b] || 0;
  };
  H.prototype.defaultRenderOptions = { kerning: !0, features: { liga: !0, rlig: !0 } };
  H.prototype.forEachGlyph = function(a, b, c, d, f, h) {
    b = void 0 !== b ? b : 0;
    c = void 0 !== c ? c : 0;
    d = void 0 !== d ? d : 72;
    f = f || this.defaultRenderOptions;
    var e = (1 / this.unitsPerEm) * d;
    a = this.stringToGlyphs(a, f);
    if (f.kerning) {
      var g = f.script || this.position.getDefaultScriptName();
      g = this.position.getKerningTables(g, f.language);
    }
    for (var k = 0; k < a.length; k += 1) {
      var l = a[k];
      if (
        (h.call(this, l, b, c, d, f),
        l.advanceWidth && (b += l.advanceWidth * e),
        f.kerning && k < a.length - 1)
      )
        b +=
          (g
            ? this.position.getKerningValue(g, l.index, a[k + 1].index)
            : this.getKerningValue(l, a[k + 1])) * e;
      f.letterSpacing ? (b += f.letterSpacing * d) : f.tracking && (b += (f.tracking / 1e3) * d);
    }
    return b;
  };
  H.prototype.getPath = function(a, b, c, d, f) {
    var e = new J();
    return (
      this.forEachGlyph(a, b, c, d, f, function(a, b, c, d) {
        a = a.getPath(b, c, d, f, this);
        e.extend(a);
      }),
      e
    );
  };
  H.prototype.getPaths = function(a, b, c, d, f) {
    var e = [];
    return (
      this.forEachGlyph(a, b, c, d, f, function(a, b, c, d) {
        a = a.getPath(b, c, d, f, this);
        e.push(a);
      }),
      e
    );
  };
  H.prototype.getAdvanceWidth = function(a, b, c) {
    return this.forEachGlyph(a, 0, 0, b, c, function() {});
  };
  H.prototype.draw = function(a, b, c, d, f, h) {
    this.getPath(b, c, d, f, h).draw(a);
  };
  H.prototype.drawPoints = function(a, b, c, d, f, h) {
    this.forEachGlyph(b, c, d, f, h, function(b, c, d, e) {
      b.drawPoints(a, c, d, e);
    });
  };
  H.prototype.drawMetrics = function(a, b, c, d, f, h) {
    this.forEachGlyph(b, c, d, f, h, function(b, c, d, e) {
      b.drawMetrics(a, c, d, e);
    });
  };
  H.prototype.getEnglishName = function(a) {
    if ((a = this.names[a])) return a.en;
  };
  H.prototype.validate = function() {
    function a(a) {
      (a = b.getEnglishName(a)) && a.trim().length;
    }
    var b = this;
    a('fontFamily');
    a('weightName');
    a('manufacturer');
    a('copyright');
    a('version');
    this.unitsPerEm;
  };
  H.prototype.toTables = function() {
    return Vc.fontToTable(this);
  };
  H.prototype.toBuffer = function() {
    return (
      console.warn('Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.'),
      this.toArrayBuffer()
    );
  };
  H.prototype.toArrayBuffer = function() {
    for (
      var a = this.toTables().encode(), b = new ArrayBuffer(a.length), c = new Uint8Array(b), d = 0;
      d < a.length;
      d++
    )
      c[d] = a[d];
    return b;
  };
  H.prototype.download = function(a) {
    var b = this.getEnglishName('fontFamily'),
      c = this.getEnglishName('fontSubfamily');
    a = a || b.replace(/\s/g, '') + '-' + c + '.otf';
    var d = this.toArrayBuffer();
    if ('undefined' != typeof window)
      ((window.URL = window.URL || window.webkitURL), window.URL)
        ? ((b = new DataView(d)),
          (c = new Blob([b], { type: 'font/opentype' })),
          (b = document.createElement('a')),
          (b.href = window.URL.createObjectURL(c)),
          (b.download = a),
          (a = document.createEvent('MouseEvents')),
          a.initEvent('click', !0, !1),
          b.dispatchEvent(a))
        : console.warn('Font file could not be downloaded. Try using a different browser.');
    else {
      b = require('fs');
      c = new Buffer(d.byteLength);
      d = new Uint8Array(d);
      for (var f = 0; f < c.length; ++f) c[f] = d[f];
      b.writeFileSync(a, c);
    }
  };
  H.prototype.fsSelectionValues = {
    ITALIC: 1,
    UNDERSCORE: 2,
    NEGATIVE: 4,
    OUTLINED: 8,
    STRIKEOUT: 16,
    BOLD: 32,
    REGULAR: 64,
    USER_TYPO_METRICS: 128,
    WWS: 256,
    OBLIQUE: 512,
  };
  H.prototype.usWidthClasses = {
    ULTRA_CONDENSED: 1,
    EXTRA_CONDENSED: 2,
    CONDENSED: 3,
    SEMI_CONDENSED: 4,
    MEDIUM: 5,
    SEMI_EXPANDED: 6,
    EXPANDED: 7,
    EXTRA_EXPANDED: 8,
    ULTRA_EXPANDED: 9,
  };
  H.prototype.usWeightClasses = {
    THIN: 100,
    EXTRA_LIGHT: 200,
    LIGHT: 300,
    NORMAL: 400,
    MEDIUM: 500,
    SEMI_BOLD: 600,
    BOLD: 700,
    EXTRA_BOLD: 800,
    BLACK: 900,
  };
  var Qc = {
      make: function(a, b) {
        var c,
          d,
          f,
          h,
          k = new A.Table('fvar', [
            { name: 'version', type: 'ULONG', value: 65536 },
            { name: 'offsetToData', type: 'USHORT', value: 0 },
            { name: 'countSizePairs', type: 'USHORT', value: 2 },
            { name: 'axisCount', type: 'USHORT', value: a.axes.length },
            { name: 'axisSize', type: 'USHORT', value: 20 },
            { name: 'instanceCount', type: 'USHORT', value: a.instances.length },
            { name: 'instanceSize', type: 'USHORT', value: 4 + 4 * a.axes.length },
          ]);
        k.offsetToData = k.sizeOf();
        for (var l = 0; l < a.axes.length; l++)
          k.fields = k.fields.concat(
            ((c = l),
            (d = a.axes[l]),
            (f = b),
            (h = bc(d.name, f)),
            [
              { name: 'tag_' + c, type: 'TAG', value: d.tag },
              { name: 'minValue_' + c, type: 'FIXED', value: d.minValue << 16 },
              { name: 'defaultValue_' + c, type: 'FIXED', value: d.defaultValue << 16 },
              { name: 'maxValue_' + c, type: 'FIXED', value: d.maxValue << 16 },
              { name: 'flags_' + c, type: 'USHORT', value: 0 },
              { name: 'nameID_' + c, type: 'USHORT', value: h },
            ])
          );
        for (c = 0; c < a.instances.length; c++)
          k.fields = k.fields.concat(Ic(c, a.instances[c], a.axes, b));
        return k;
      },
      parse: function(a, b, c) {
        var d = new y.Parser(a, b),
          f = d.parseULong();
        z.argument(65536 === f, 'Unsupported fvar table version.');
        var h = d.parseOffset16();
        d.skip('uShort', 1);
        var k,
          l,
          m,
          q,
          p,
          t = d.parseUShort(),
          u = d.parseUShort();
        f = d.parseUShort();
        d = d.parseUShort();
        for (var v = [], w = 0; w < t; w++)
          v.push(
            ((k = a),
            (l = b + h + w * u),
            (m = c),
            (p = q = void 0),
            (q = {}),
            (p = new y.Parser(k, l)),
            (q.tag = p.parseTag()),
            (q.minValue = p.parseFixed()),
            (q.defaultValue = p.parseFixed()),
            (q.maxValue = p.parseFixed()),
            p.skip('uShort', 1),
            (q.name = m[p.parseUShort()] || {}),
            q)
          );
        k = [];
        b = b + h + t * u;
        for (h = 0; h < f; h++) k.push(Jc(a, b + h * d, v, c));
        return { axes: v, instances: k };
      },
    },
    S = Array(10);
  S[1] = function() {
    var a = this.offset + this.relativeOffset,
      b = this.parseUShort();
    return 1 === b
      ? { posFormat: 1, coverage: this.parsePointer(l.coverage), value: this.parseValueRecord() }
      : 2 === b
      ? {
          posFormat: 2,
          coverage: this.parsePointer(l.coverage),
          values: this.parseValueRecordList(),
        }
      : void z.assert(!1, '0x' + a.toString(16) + ': GPOS lookup type 1 format must be 1 or 2.');
  };
  S[2] = function() {
    var a = this.offset + this.relativeOffset,
      b = this.parseUShort();
    z.assert(
      1 === b || 2 === b,
      '0x' + a.toString(16) + ': GPOS lookup type 2 format must be 1 or 2.'
    );
    a = this.parsePointer(l.coverage);
    var c = this.parseUShort(),
      d = this.parseUShort();
    if (1 === b)
      return {
        posFormat: b,
        coverage: a,
        valueFormat1: c,
        valueFormat2: d,
        pairSets: this.parseList(
          l.pointer(
            l.list(function() {
              return {
                secondGlyph: this.parseUShort(),
                value1: this.parseValueRecord(c),
                value2: this.parseValueRecord(d),
              };
            })
          )
        ),
      };
    if (2 === b) {
      var f = this.parsePointer(l.classDef),
        h = this.parsePointer(l.classDef),
        k = this.parseUShort(),
        q = this.parseUShort();
      return {
        posFormat: b,
        coverage: a,
        valueFormat1: c,
        valueFormat2: d,
        classDef1: f,
        classDef2: h,
        class1Count: k,
        class2Count: q,
        classRecords: this.parseList(
          k,
          l.list(q, function() {
            return { value1: this.parseValueRecord(c), value2: this.parseValueRecord(d) };
          })
        ),
      };
    }
  };
  S[3] = function() {
    return { error: 'GPOS Lookup 3 not supported' };
  };
  S[4] = function() {
    return { error: 'GPOS Lookup 4 not supported' };
  };
  S[5] = function() {
    return { error: 'GPOS Lookup 5 not supported' };
  };
  S[6] = function() {
    return { error: 'GPOS Lookup 6 not supported' };
  };
  S[7] = function() {
    return { error: 'GPOS Lookup 7 not supported' };
  };
  S[8] = function() {
    return { error: 'GPOS Lookup 8 not supported' };
  };
  S[9] = function() {
    return { error: 'GPOS Lookup 9 not supported' };
  };
  var $c = Array(10),
    Pc = {
      parse: function(a, b) {
        a = new l(a, b || 0);
        b = a.parseVersion(1);
        return (
          z.argument(1 === b || 1.1 === b, 'Unsupported GPOS table version ' + b),
          1 === b
            ? {
                version: b,
                scripts: a.parseScriptList(),
                features: a.parseFeatureList(),
                lookups: a.parseLookupList(S),
              }
            : {
                version: b,
                scripts: a.parseScriptList(),
                features: a.parseFeatureList(),
                lookups: a.parseLookupList(S),
                variations: a.parseFeatureVariationsList(),
              }
        );
      },
      make: function(a) {
        return new A.Table('GPOS', [
          { name: 'version', type: 'ULONG', value: 65536 },
          { name: 'scripts', type: 'TABLE', value: new A.ScriptList(a.scripts) },
          { name: 'features', type: 'TABLE', value: new A.FeatureList(a.features) },
          { name: 'lookups', type: 'TABLE', value: new A.LookupList(a.lookups, $c) },
        ]);
      },
    },
    Oc = {
      parse: function(a, b) {
        a = new y.Parser(a, b);
        b = a.parseUShort();
        if (0 === b)
          return (function(a) {
            var b = {};
            a.skip('uShort');
            var c = a.parseUShort();
            z.argument(0 === c, 'Unsupported kern sub-table version.');
            a.skip('uShort', 2);
            c = a.parseUShort();
            a.skip('uShort', 3);
            for (var d = 0; d < c; d += 1) {
              var f = a.parseUShort(),
                h = a.parseUShort(),
                k = a.parseShort();
              b[f + ',' + h] = k;
            }
            return b;
          })(a);
        if (1 === b)
          return (function(a) {
            var b = {};
            a.skip('uShort');
            1 < a.parseULong() && console.warn('Only the first kern subtable is supported.');
            a.skip('uLong');
            var c = 255 & a.parseUShort();
            if ((a.skip('uShort'), 0 === c)) {
              c = a.parseUShort();
              a.skip('uShort', 3);
              for (var d = 0; d < c; d += 1) {
                var f = a.parseUShort(),
                  h = a.parseUShort(),
                  k = a.parseShort();
                b[f + ',' + h] = k;
              }
            }
            return b;
          })(a);
        throw Error('Unsupported kern table version (' + b + ').');
      },
    },
    Nc = {
      parse: function(a, b, c, d) {
        a = new y.Parser(a, b);
        b = d ? a.parseUShort : a.parseULong;
        for (var e = [], f = 0; f < c + 1; f += 1) {
          var h = b.call(a);
          d && (h *= 2);
          e.push(h);
        }
        return e;
      },
    };
  d.Font = H;
  d.Glyph = O;
  d.Path = J;
  d.BoundingBox = I;
  d._parse = y;
  d.parse = Ua;
  d.load = function(a, b) {
    ('undefined' == typeof window ? Kc : Lc)(a, function(a, d) {
      if (a) return b(a);
      try {
        var c = Ua(d);
      } catch (r) {
        return b(r, null);
      }
      return b(null, c);
    });
  };
  d.loadSync = function(a) {
    return Ua(Gb(require('fs').readFileSync(a)));
  };
  Object.defineProperty(d, '__esModule', { value: !0 });
});
var cellCount = 90,
  cellWidth = 44,
  cellHeight = 40,
  cellMarginTop = 1,
  cellMarginBottom = 8,
  cellMarginLeftRight = 1,
  glyphMargin = 5,
  pixelRatio = window.devicePixelRatio || 1,
  font,
  fontScale,
  fontSize,
  fontBaseline,
  glyphScale,
  glyphSize,
  glyphBaseline;
function enableHighDPICanvas(d) {
  'string' === typeof d && (d = document.getElementById(d));
  var f = window.devicePixelRatio || 1;
  if (1 !== f) {
    var h = d.width,
      k = d.height;
    d.width = h * f;
    d.height = k * f;
    d.style.width = h + 'px';
    d.style.height = k + 'px';
    d.getContext('2d').scale(f, f);
  }
}
function renderGlyphItem(d, f) {
  if (
    null != d &&
    ((d = d.getContext('2d')), d.clearRect(0, 0, cellWidth, cellHeight), !(f >= font.numGlyphs))
  ) {
    d.fillStyle = '#ff0000';
    d.font = '9px sans-serif';
    d.fillText(f, 1, cellHeight - 1);
    f = font.glyphs.get(f);
    var h = f.advanceWidth,
      k = f.advanceWidth * fontScale,
      q = (cellWidth - k) / 2;
    k = (cellWidth + k) / 2;
    d.fillRect(q - 4 + 1, fontBaseline, 4, 1);
    d.fillRect(q, fontBaseline, 1, 4);
    d.fillRect(k, fontBaseline, 4, 1);
    d.fillRect(k, fontBaseline, 1, 4);
    d.fillStyle = '#ff0000';
    d.strokeStyle = '#ff0000';
    q = f.getPath(q, fontBaseline, fontSize);
    q.fill = '#ff0000';
    q.stroke = '#ff0000';
    q.draw(d);
    f.advanceWidth = h;
  }
}
function displayGlyphArray(d) {
  for (var f = 0; f < d.length; f++) renderGlyphItem(document.getElementById('g' + f), d[f]);
  for (; f < cellCount; )
    null != document.getElementById('g' + f) &&
      document
        .getElementById('g' + f)
        .getContext('2d')
        .clearRect(0, 0, cellWidth, cellHeight),
      f++;
}
function onFontLoaded(d) {
  window.font = d;
  var f = cellHeight - cellMarginTop - cellMarginBottom,
    h = d.tables.head,
    k = h.yMax - h.yMin;
  fontScale = Math.min((cellWidth - 2 * cellMarginLeftRight) / (h.xMax - h.xMin), f / k);
  fontSize = fontScale * d.unitsPerEm;
  fontBaseline = cellMarginTop + (f * h.yMax) / k;
  plotEdit.loadConfig();
}
opentype.load('/plot/sym1600.otf', function(d, f) {
  d ? '' : onFontLoaded(f);
});
function prepareGlyphList(d) {
  if (null != d) {
    var f = document.createElement('DIV');
    d.appendChild(f);
    d = document.createElement('DIV');
    d.id = 'glyph-list-end';
    f.appendChild(d);
    f = document.getElementById('glyph-list-end');
    d = f.parentElement;
    for (var h = 0; h < cellCount; h++) {
      var k = document.createElement('canvas');
      k.width = cellWidth;
      k.height = cellHeight;
      k.className = 'item';
      k.id = 'g' + h;
      k.addEventListener('click', cellSelect, !1);
      enableHighDPICanvas(k);
      d.insertBefore(k, f);
    }
  }
}
function cellSelect(d) {
  if (font) {
    d = parseInt(d.target.id.substr(1));
    d = g_symidpages[g_curpageidx][d];
    var f = parent,
      h = 1;
    0 == g_curpageidx && (h = 0);
    f.startDrawingSymbol(h, getKeyidFromGid(d));
  }
}
prepareGlyphList(document.getElementById('plotlist'));
function getKeyidFromGid(d) {
  var f = d;
  779 == d
    ? (f = 2003)
    : 930 == d
    ? (f = 2004)
    : 382 == d
    ? (f = 2011)
    : 959 == d
    ? (f = 2005)
    : 604 == d
    ? (f = 2006)
    : 960 == d
    ? (f = 2001)
    : 602 == d
    ? (f = 2008)
    : 925 == d && (f = 2007);
  return f;
}
function getGidFromKeyid(d) {
  var f = d;
  2e3 < d &&
    (2003 == d
      ? (f = 527)
      : 2004 == d
      ? (f = 536)
      : 2011 == d
      ? (f = 382)
      : 2005 == d
      ? (f = 603)
      : 2006 == d
      ? (f = 604)
      : 2001 == d
      ? (f = 605)
      : 2008 == d
      ? (f = 602)
      : 4001 == d
      ? (f = 280)
      : 4002 == d
      ? (f = 446)
      : 4003 == d
      ? (f = 74)
      : 4004 == d && (f = 441));
  return f;
}
function drawPathWithArrows(d, f) {
  var h;
  d.beginPath();
  for (h = 0; h < f.commands.length; h += 1) {
    var k = f.commands[h];
    'M' === k.type
      ? d.moveTo(k.x, k.y)
      : 'L' === k.type
      ? d.lineTo(k.x, k.y)
      : 'C' === k.type
      ? d.bezierCurveTo(k.x1, k.y1, k.x2, k.y2, k.x, k.y)
      : 'Q' === k.type
      ? d.quadraticCurveTo(k.x1, k.y1, k.x, k.y)
      : 'Z' === k.type && d.closePath();
  }
  f.fill && ((d.fillStyle = f.fill), d.fill());
  f.stroke && ((d.strokeStyle = f.stroke), (d.lineWidth = f.strokeWidth), d.stroke());
}
function displayGlyph2(d, f, h) {
  null == h &&
    (h = {
      fill: '#00ff00',
      stroke: '#ff0000',
      strokeWidth: 1.5,
      fontColor: '#0000ff',
      textx: 300,
      texty: 800,
    });
  var k = d.getContext('2d'),
    q = d.width / pixelRatio,
    w = d.height / pixelRatio;
  k.clearRect(0, 0, d.width, d.height);
  if (!(0 > f)) {
    w -= 2 * glyphMargin;
    var v = font.tables.head,
      F = v.yMax - v.yMin;
    glyphScale = Math.min((q - 2 * glyphMargin) / (v.xMax - v.xMin), w / F);
    glyphSize = glyphScale * font.unitsPerEm;
    glyphBaseline = glyphMargin + (w * v.yMax) / F;
    f = font.glyphs.get(f).getPath(0, d.height, glyphSize);
    f.fill = h.fill;
    f.stroke = h.stroke;
    f.strokeWidth = h.strokeWidth;
    drawPathWithArrows(k, f);
    k.fillStyle = h.textcolor;
    k.textAlign = 'start';
    k.font = h.font_size + 'px "\u5fae\u8f6f\u96c5\u9ed1"';
    q = (1 / font.unitsPerEm) * glyphSize;
    f = h.textx * q;
    d = d.height - h.texty * q;
    null != h.text && 0 < h.text.length && k.fillText(h.text, f, d);
  }
}
function drawSymbol(d, f) {
  var h = document.createElement('canvas');
  h.getContext('2d').fillStyle = '#99f';
  h.width = f.symbolSize;
  h.height = f.symbolSize;
  displayGlyph2(h, d, f);
  return h;
}
